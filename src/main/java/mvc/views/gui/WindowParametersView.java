package mvc.views.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import mvc.controllers.ParametersController;
import mvc.eventsmanagement.events.parameters.MaxNodeValuationChanged;
import mvc.eventsmanagement.events.parameters.MaxNumberOfSegmentsChanged;
import mvc.eventsmanagement.events.parameters.MinNumberOfSegmentsChanged;
import mvc.model.ParametersModel;
import mvc.views.AbstractParametersView;
import mvc.views.gui.listeners.parameters.*;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;

public class WindowParametersView extends AbstractParametersView {

    private JPanel contentPane;
    private JButton btn_ok;
    private JButton btn_cancel;
    private JSpinner spin_maxNodeValuation;
    private JSpinner spin_minNumberOfSegments;
    private JSpinner spin_maxNumberOfSegments;
    private JCheckBox chk_approximation1;
    private JCheckBox chk_approximation2;
    private JCheckBox chk_approximation3;
    private JCheckBox chk_approximation4;
    private JDialog dialog;

    public WindowParametersView(ParametersController parametersController, ParametersModel parametersModel) {
        super(parametersController, parametersModel);
    }

    @Override
    public void buildView() {
        $$$setupUI$$$();
    }

    @Override
    public void display() {
        spin_maxNodeValuation.addChangeListener(new SpinMaxNodeValuationListener(getParametersController()));
        spin_minNumberOfSegments.addChangeListener(new SpinMinNumberOfSegmentsListener(getParametersController()));
        spin_maxNumberOfSegments.addChangeListener(new SpinMaxNumberOfSegmentsListener(getParametersController()));
        btn_ok.addActionListener(new BtnOkListener(getParametersController()));
        btn_cancel.addActionListener(new BtnCancelListener(getParametersController()));
        dialog = new JDialog();
        dialog.setTitle("Verification parameters");
        dialog.setContentPane(contentPane);
        dialog.setModal(true);
        dialog.getRootPane().setDefaultButton(btn_ok);
        dialog.pack();
        dialog.setVisible(true);
    }

    @Override
    public void close() {
        dialog.dispose();
    }

    @Override
    public void maxNodeValuationChanged(MaxNodeValuationChanged event) {
    }

    @Override
    public void minNumberOfSegmentsChanged(MinNumberOfSegmentsChanged event) {
    }

    @Override
    public void maxNumberOfSegmentsChanged(MaxNumberOfSegmentsChanged event) {
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(2, 2, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1, true, false));
        panel1.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        btn_ok = new JButton();
        btn_ok.setText("OK");
        btn_ok.setMnemonic('O');
        btn_ok.setDisplayedMnemonicIndex(0);
        panel2.add(btn_ok, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        btn_cancel = new JButton();
        btn_cancel.setText("Cancel");
        btn_cancel.setMnemonic('C');
        btn_cancel.setDisplayedMnemonicIndex(0);
        panel2.add(btn_cancel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(1, 2, new Insets(2, 2, 2, 2), -1, -1));
        panel3.add(panel4, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel4.setBorder(BorderFactory.createTitledBorder(null, "Parameters", TitledBorder.CENTER, TitledBorder.DEFAULT_POSITION));
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new GridLayoutManager(3, 2, new Insets(2, 2, 2, 2), -1, -1));
        panel4.add(panel5, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel5.setBorder(BorderFactory.createTitledBorder(null, "Limits", TitledBorder.CENTER, TitledBorder.DEFAULT_POSITION));
        final JLabel label1 = new JLabel();
        label1.setText("Max node valuation :");
        panel5.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        spin_maxNodeValuation = new JSpinner();
        panel5.add(spin_maxNodeValuation, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(101, 26), null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Max number of segments :");
        panel5.add(label2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        spin_maxNumberOfSegments = new JSpinner();
        panel5.add(spin_maxNumberOfSegments, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(101, 26), null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Min number of segments :");
        panel5.add(label3, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        spin_minNumberOfSegments = new JSpinner();
        panel5.add(spin_minNumberOfSegments, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(101, 26), null, 0, false));
        final JPanel panel6 = new JPanel();
        panel6.setLayout(new GridLayoutManager(4, 1, new Insets(2, 2, 2, 2), -1, -1));
        panel4.add(panel6, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel6.setBorder(BorderFactory.createTitledBorder(null, "Approximations", TitledBorder.CENTER, TitledBorder.DEFAULT_POSITION));
        chk_approximation1 = new JCheckBox();
        chk_approximation1.setSelected(true);
        chk_approximation1.setText("1- State Equation + Specification");
        chk_approximation1.setMnemonic('1');
        chk_approximation1.setDisplayedMnemonicIndex(0);
        panel6.add(chk_approximation1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        chk_approximation2 = new JCheckBox();
        chk_approximation2.setSelected(true);
        chk_approximation2.setText("2- State Equation + Specification + No siphon");
        chk_approximation2.setMnemonic('2');
        chk_approximation2.setDisplayedMnemonicIndex(0);
        panel6.add(chk_approximation2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        chk_approximation3 = new JCheckBox();
        chk_approximation3.setSelected(true);
        chk_approximation3.setText("3- Segments");
        chk_approximation3.setMnemonic('3');
        chk_approximation3.setDisplayedMnemonicIndex(0);
        panel6.add(chk_approximation3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        chk_approximation4 = new JCheckBox();
        chk_approximation4.setSelected(true);
        chk_approximation4.setText("4- Segments + No siphon");
        chk_approximation4.setMnemonic('4');
        chk_approximation4.setDisplayedMnemonicIndex(0);
        panel6.add(chk_approximation4, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panel3.add(spacer2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        contentPane.add(spacer3, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
