#
# Copyright (C) 2003 Swedish Institute of Computer Science.
#
# CVS: $Id: Makefile,v 1.13 2010-11-02 14:54:16 perm Exp $
#
# This file needs to be filtered through 'configure' to produce a ready-to-use
# Makefile.
#
# NOTE: This Makefile requires GNU make.
#

SRCDIR=.
.PHONY: default
default: all

# [PM] 4.2 $(SRCDIR)/... should really be configure-output-directory or some such
# Include common Makefile parts.
include $(SRCDIR)/../../../Common
vpath config.status $(SRCDIR)/../../..

ifneq ($(FORCE_PARMAKE),yes) # DBG
.NOTPARALLEL: # [PM] 4.0.2+ make -j does not work with this file
endif

# Classes to build
# 3.8.5 IllegalCallerException now only present for backward compatibility
# [PD] added Jasper, Server, Prolog, Query and Term for thread safe hack
# [PD] 3.11.1 add Version for checking version consistency (Java vs. spnative)
CLASSES=SICStus SPTerm SPCanonicalAtom SPQuery SPPredicate SPException \
	NativeCodeException ConversionFailedException \
	AtomRegisterFailure \
	IllegalCallerException \
        IllegalTermException \
	Jasper \
	Server \
	Prolog \
	Query \
	Term \
	Version

EXAMPLES= NQueens

.PHONY: all
ifneq ($(JASPER_MODULE),)
all:  $(CLASSES:=.class) jasper.jar
else
all:
	@echo "Nothing to be done here; Jasper is not supported."
endif

Version.java : % : %.in config.status
	$(POSIX_SHELL) $(filter %config.status,$^) '--file=$@:$<'
	if test -f '$@'; then : ; else echo 'Did not create $@' 1>&2; exit 1 ; fi
	if test -s '$@'; then : ; else echo 'Created empty $@' 1>&2; exit 1 ; fi


## [PM] 3.9 Give up on accurate dependencies. Recompile everything if anything changes
$(CLASSES:=.class): $(CLASSES:=.java)

## [PM] 3.9 experiment with more accurate dependency info (This should be autogenerated)
#SICStus.class SPTerm.class SPQuery.class: SICStus.java SPTerm.java SPQuery.java
#	$(JAVAC) $(JAVACFLAGS) -deprecation -classpath $(SRCDIR)/../../.. $^
#SPCanonicalAtom.class:           SICStus.class IllegalTermException.class AtomRegisterFailure.class
#	$(JAVAC) $(JAVACFLAGS) -deprecation -classpath $(SRCDIR)/../../.. $^
#SPPredicate.class:               SICStus.class SPQuery.class SPCanonicalAtom.class SPException.class
#	$(JAVAC) $(JAVACFLAGS) -deprecation -classpath $(SRCDIR)/../../.. $^
#SPException.class:               SICStus.class SPTerm.class
#	$(JAVAC) $(JAVACFLAGS) -deprecation -classpath $(SRCDIR)/../../.. $^
#NativeCodeException.class:       SICStus.class SPException.class
#	$(JAVAC) $(JAVACFLAGS) -deprecation -classpath $(SRCDIR)/../../.. $^
#ConversionFailedException.class: SICStus.class SPException.class
#	$(JAVAC) $(JAVACFLAGS) -deprecation -classpath $(SRCDIR)/../../.. $^
#AtomRegisterFailure.class:       SICStus.class SPException.class
#	$(JAVAC) $(JAVACFLAGS) -deprecation -classpath $(SRCDIR)/../../.. $^
#IllegalCallerException.class:    SICStus.class SPException.class
#	$(JAVAC) $(JAVACFLAGS) -deprecation -classpath $(SRCDIR)/../../.. $^
#IllegalTermException.class:      SICStus.class SPException.class
#	$(JAVAC) $(JAVACFLAGS) -deprecation -classpath $(SRCDIR)/../../.. $^


%.manifest:
	echo "Main-Class: se.sics.jasper.$*" > $@

jasper.jar: SICStus.manifest $(CLASSES:=.class)
	$(JAR) cmf $< $@ $(patsubst %,-C ../../.. '%',$(shell cd ../../..; find se/sics/jasper -name '*.class'))

.PHONY: install
install:
	$(MKDIR) $(SP_LIBDIR)/se/sics/jasper
	for file in $(patsubst %,'%',$(wildcard *.java *.class Makefile)); do \
	    if expr $$file : '.*~.*' > /dev/null || expr $$file : '\.#.*' > /dev/null; then echo "Skipping $$file..." ; continue; fi; \
	    echo "Installing $$file..." ;\
	    $(INSTALL_DATA) $$file $(SP_LIBDIR)/se/sics/jasper ;\
	done

.PHONY: examples
examples:
	(cd examples; \
		$(MAKE) -f $(SRCDIR)/../Makefile SRCDIR=.. $(EXAMPLES:=.class))

# # Admin only. Builds the jserver-module.
# jserver: 
# 	(cd ../../../library; $(MAKE) all MODULES=jserver)

%.class: %.java
	$(JAVAC) $(JAVACFLAGS) $(JAVACLINTFLAGS) -deprecation -classpath $(SRCDIR)/../../.. $^

.PHONY: clean
clean:
	$(RM) -f $(patsubst %,'%',$(wildcard *.class examples/*.class *~ *.jar *.manifest)) $(RMDUMMY)

.PHONY: distclean mostlyclean maintainerclean
distclean mostlyclean maintainerclean: clean
	$(RM) -f Version.java *_tmp
