:- op(550, xfx, ..).
:- op(400,  yfx, [/>,/<]).                      % ceiling(div), floor(div)

:- use_module(library(lists)).

codegen :-
        part(mul),
        part(quo),
        part(div),
        part(rem),
        part(mod).

codegen(Op) :-
	format('/* -*- Mode:C; buffer-read-only:t -*-\n', []),
	format('This file is automatically generated, do not edit */\n', []),
	part(Op),
	halt.

part(Op) :-
        format('  for (iter=0; iter<3; iter++) {\n', []),
        format('    switch (iter) {\n', []),
        format('    case 0:                     /* (X,Y) => Z */\n', []),
        switch(Op, z),
        format('      break;\n', []),
        format('    case 1:                     /* (X,Z) => Y */\n', []),
        switch(Op, y),
        format('      break;\n', []),
        format('    case 2:                     /* (Y,Z) => X */\n', []),
        switch(Op, x),
        format('      break;\n', []),
        format('    }\n', []),
        format('  }\n', []).


switch(Op, Val) :-
        findall(Z-(X,Y), switch_case(Op, Val, X,Y,Z), L1),
        keysort(L1, L2),
        keyclumped(L2, L3),
        switch_print(L3, Op, Val),
        true.

switch_case(mul,z, Xmin..Xmax, Ymin..Ymax, Action) :-
        mul_z(X1..X2, Y1..Y2, A1),
        bound(X1, axmin, Xmin, lower),
        bound(X2, axmax, Xmax, upper),
        bound(Y1, aymin, Ymin, lower),
        bound(Y2, aymax, Ymax, upper),
        simplify(A1, Action).
switch_case(mul,y, Xmin..Xmax, Zmin..Zmax, Action) :-
        mul_x(X1..X2, Z1..Z2, A1),
        bound(X1, axmin, Xmin, lower),
        bound(X2, axmax, Xmax, upper),
        bound(Z1, azmin, Zmin, lower),
        bound(Z2, azmax, Zmax, upper),
        simplify(A1, Action).
switch_case(mul,x, Ymin..Ymax, Zmin..Zmax, Action) :-
        mul_x(Y1..Y2, Z1..Z2, A1),
        bound(Y1, aymin, Ymin, lower),
        bound(Y2, aymax, Ymax, upper),
        bound(Z1, azmin, Zmin, lower),
        bound(Z2, azmax, Zmax, upper),
        simplify(A1, Action).
switch_case(quo,z, Xmin..Xmax, Ymin..Ymax, Action) :-
        quo_z(X1..X2, Y1..Y2, A1),
        bound(X1, axmin, Xmin, lower),
        bound(X2, axmax, Xmax, upper),
        bound(Y1, aymin, Ymin, lower),
        bound(Y2, aymax, Ymax, upper),
        simplify(A1, Action).
switch_case(quo,y, Xmin..Xmax, Zmin..Zmax, Action) :-
        quo_y(X1..X2, Z1..Z2, A1),
        bound(X1, axmin, Xmin, lower),
        bound(X2, axmax, Xmax, upper),
        bound(Z1, azmin, Zmin, lower),
        bound(Z2, azmax, Zmax, upper),
        simplify(A1, Action).
switch_case(quo,x, Ymin..Ymax, Zmin..Zmax, Action) :-
        quo_x(Y1..Y2, Z1..Z2, A1),
        bound(Y1, aymin, Ymin, lower),
        bound(Y2, aymax, Ymax, upper),
        bound(Z1, azmin, Zmin, lower),
        bound(Z2, azmax, Zmax, upper),
        simplify(A1, Action).
switch_case(div,z, Xmin..Xmax, Ymin..Ymax, Action) :-
        div_z(X1..X2, Y1..Y2, A1),
        bound(X1, axmin, Xmin, lower),
        bound(X2, axmax, Xmax, upper),
        bound(Y1, aymin, Ymin, lower),
        bound(Y2, aymax, Ymax, upper),
        simplify(A1, Action).
switch_case(div,y, Xmin..Xmax, Zmin..Zmax, Action) :-
        div_y(X1..X2, Z1..Z2, A1),
        bound(X1, axmin, Xmin, lower),
        bound(X2, axmax, Xmax, upper),
        bound(Z1, azmin, Zmin, lower),
        bound(Z2, azmax, Zmax, upper),
        simplify(A1, Action).
switch_case(div,x, Ymin..Ymax, Zmin..Zmax, Action) :-
        div_x(Y1..Y2, Z1..Z2, A1),
        bound(Y1, aymin, Ymin, lower),
        bound(Y2, aymax, Ymax, upper),
        bound(Z1, azmin, Zmin, lower),
        bound(Z2, azmax, Zmax, upper),
        simplify(A1, Action).
switch_case(rem,z, Xmin..Xmax, Ymin..Ymax, Action) :-
        rem_z(X1..X2, Y1..Y2, A1),
        bound(X1, axmin, Xmin, lower),
        bound(X2, axmax, Xmax, upper),
        bound(Y1, aymin, Ymin, lower),
        bound(Y2, aymax, Ymax, upper),
        simplify(A1, Action).
switch_case(rem,y, Xmin..Xmax, Zmin..Zmax, Action) :-
        rem_y(X1..X2, Z1..Z2, A1),
        bound(X1, axmin, Xmin, lower),
        bound(X2, axmax, Xmax, upper),
        bound(Z1, azmin, Zmin, lower),
        bound(Z2, azmax, Zmax, upper),
        simplify(A1, Action).
switch_case(rem,x, Ymin..Ymax, Zmin..Zmax, Action) :-
        rem_x(Y1..Y2, Z1..Z2, A1),
        bound(Y1, aymin, Ymin, lower),
        bound(Y2, aymax, Ymax, upper),
        bound(Z1, azmin, Zmin, lower),
        bound(Z2, azmax, Zmax, upper),
        simplify(A1, Action).
switch_case(mod,z, Xmin..Xmax, Ymin..Ymax, Action) :-
        mod_z(X1..X2, Y1..Y2, A1),
        bound(X1, axmin, Xmin, lower),
        bound(X2, axmax, Xmax, upper),
        bound(Y1, aymin, Ymin, lower),
        bound(Y2, aymax, Ymax, upper),
        simplify(A1, Action).
switch_case(mod,y, Xmin..Xmax, Zmin..Zmax, Action) :-
        mod_y(X1..X2, Z1..Z2, A1),
        bound(X1, axmin, Xmin, lower),
        bound(X2, axmax, Xmax, upper),
        bound(Z1, azmin, Zmin, lower),
        bound(Z2, azmax, Zmax, upper),
        simplify(A1, Action).
switch_case(mod,x, Ymin..Ymax, Zmin..Zmax, Action) :-
        mod_x(Y1..Y2, Z1..Z2, A1),
        bound(Y1, aymin, Ymin, lower),
        bound(Y2, aymax, Ymax, upper),
        bound(Z1, azmin, Zmin, lower),
        bound(Z2, azmax, Zmax, upper),
        simplify(A1, Action).

bound(-sup, _, inf, lower).
bound(-(Tag), Tag, -(Tag), _).
bound(0, _, 0, _).
bound(+(Tag), Tag, +(Tag), _).
bound(+sup, _, sup, upper).

simplify(X, Z) :-
	(ground(X) -> true ; raise_exception(simplify(X))),
        simplify_rec(X, Z).
        % print_message(informational, simplifed(Z)).

simplify_rec(sup, +sup) :- !.
simplify_rec(L1..U1, Expr) :- !,
        simplify_rec(L1, L2),
        simplify_rec(U1, U2),
        (   L2 = -sup,
            U2 = +sup
        ->  Expr = true
        ;   L2 = +sup
        ->  Expr = false
        ;   U2 = -sup
        ->  Expr = false
        ;   integer(L2),
            integer(U2),
            L2 > U2
        ->  Expr = false
        ;   Expr = (L2..U2)
        ).
simplify_rec(\ (X1), Expr) :- !,
        simplify_rec(X1, X2),
        (   X2 = true -> Expr = false
        ;   X2 = false -> Expr = true
        ;   Expr = \ (X2)
        ).
simplify_rec(X\Y, Expr) :- !,
        simplify_rec(X, X1),
        simplify_rec(Y, Y1),
        (   Y1 = false -> Expr = X1
        ;   X1 = true  -> Expr = \ (Y1)
        ;   Expr = X1\Y1
        ).
simplify_rec(+sup, +sup) :- !.
simplify_rec(+(X), Expr) :- !,
        simplify_rec(X, Expr).
simplify_rec(-sup, -sup) :- !.
simplify_rec(-(X), Expr) :- !,
        simplify_rec(X, Y),
        (   integer(Y) -> Expr is -Y
        ;   Y = +sup -> Expr = -sup
        ;   Y = -sup -> Expr = +sup
        ;   Y = A-B -> Expr = B-A
        ;   Expr = -(Y)
        ).
simplify_rec(X1*Y1, Expr) :- !,
        simplify_rec(X1, X2),
        simplify_rec(Y1, Y2),
        (   X2 = +sup, pos_expr(Y2) -> Expr = +sup
        ;   X2 = +sup, neg_expr(Y2) -> Expr = -sup
        ;   X2 = -sup, pos_expr(Y2) -> Expr = -sup
        ;   X2 = -sup, neg_expr(Y2) -> Expr = +sup
        ;   Y2 = +sup, pos_expr(X2) -> Expr = +sup
        ;   Y2 = +sup, neg_expr(X2) -> Expr = -sup
        ;   Y2 = -sup, pos_expr(X2) -> Expr = -sup
        ;   Y2 = -sup, neg_expr(X2) -> Expr = +sup
        ;   Expr = X2*Y2
        ).
simplify_rec(X1/>Y1, Expr) :- !, % ceiling
        simplify_rec(X1, X2),
        simplify_rec(Y1, Y2),
        (   X2 = +sup, pos_expr(Y2) -> Expr = +sup
        ;   X2 = +sup, neg_expr(Y2) -> Expr = -sup
        ;   X2 = -sup, pos_expr(Y2) -> Expr = -sup
        ;   X2 = -sup, neg_expr(Y2) -> Expr = +sup
        ;   Y2 = +sup, pos_expr(X2) -> Expr = 1
        ;   Y2 = +sup, neg_expr(X2) -> Expr = 0
        ;   Y2 = -sup, pos_expr(X2) -> Expr = 0
        ;   Y2 = -sup, neg_expr(X2) -> Expr = 1
        ;   Expr = X2/>Y2
        ).
simplify_rec(X1/<Y1, Expr) :- !, % floor
        simplify_rec(X1, X2),
        simplify_rec(Y1, Y2),
        (   X2 = +sup, pos_expr(Y2) -> Expr = +sup
        ;   X2 = +sup, neg_expr(Y2) -> Expr = -sup
        ;   X2 = -sup, pos_expr(Y2) -> Expr = -sup
        ;   X2 = -sup, neg_expr(Y2) -> Expr = +sup
        ;   Y2 = +sup, pos_expr(X2) -> Expr = 0
        ;   Y2 = +sup, neg_expr(X2) -> Expr = -1
        ;   Y2 = -sup, pos_expr(X2) -> Expr = -1
        ;   Y2 = -sup, neg_expr(X2) -> Expr = 0
        ;   Expr = X2/<Y2
        ).
simplify_rec(X1+Y1, Expr) :- !,
        simplify_rec(X1, X2),
        simplify_rec(Y1, Y2),
        (   X2 = +sup -> Expr = +sup
        ;   Y2 = +sup -> Expr = +sup
        ;   X2 = -sup -> Expr = -sup
        ;   Expr = X2+Y2
        ).
simplify_rec(X1-Y1, Expr) :- !,
        simplify_rec(X1, X2),
        simplify_rec(Y1, Y2),
        (   X2 = +sup -> Expr = +sup
        ;   Y2 = +sup -> Expr = -sup
        ;   X2 = -sup -> Expr = -sup
        ;   integer(X2), integer(Y2) -> Expr is X2-Y2
        ;   Expr = X2-Y2
        ).
simplify_rec(max(X1,Y1), Expr) :- !,
        simplify_rec(X1, X2),
        simplify_rec(Y1, Y2),
        (   X2 = +sup -> Expr = X2
        ;   Y2 = +sup -> Expr = Y2
        ;   X2 = -sup -> Expr = Y2
        ;   Y2 = -sup -> Expr = X2
        ;   Expr = max(X2,Y2)
        ).
simplify_rec(min(X1,Y1), Expr) :- !,
        simplify_rec(X1, X2),
        simplify_rec(Y1, Y2),
        (   X2 = +sup -> Expr = Y2
        ;   Y2 = +sup -> Expr = X2
        ;   X2 = -sup -> Expr = X2
        ;   Y2 = -sup -> Expr = Y2
        ;   Expr = min(X2,Y2)
        ).
simplify_rec(X1<Y1, Expr) :- !,
        simplify_rec(X1, X2),
        simplify_rec(Y1, Y2),
        (   X2 = +sup -> Expr = false
        ;   Y2 = +sup -> Expr = true
        ;   Expr = (X2<Y2)
        ).
simplify_rec(X1=<Y1, Expr) :- !,
        simplify_rec(X1, X2),
        simplify_rec(Y1, Y2),
        (   X2 = +sup -> Expr = false
        ;   Y2 = +sup -> Expr = true
        ;   Expr = (X2=<Y2)
        ).
simplify_rec(X1=Y1, (X2=Y2)) :- !,
        simplify_rec(X1, X2),
        simplify_rec(Y1, Y2).
simplify_rec((If -> Then ; Else), Expr) :- !,
        simplify_rec(If, If1),
        simplify_rec(Then, Then1),
        simplify_rec(Else, Else1),
        (   If1 = true -> Expr = Then1
        ;   If1 = false -> Expr = Else1
        ;   Then1 = Else1 -> Expr = Then1
        ;   Expr = (If1 -> Then1 ; Else1)
        ).
simplify_rec(Expr, Expr).

pos_expr(+sup).
pos_expr(X) :- atom(X).
pos_expr(X-1) :- atom(X).
pos_expr(X+1) :- atom(X).

neg_expr(-sup).
neg_expr(-X) :- atom(X).
neg_expr(1-X) :- atom(X).

switch_print(Clumps, Op, Val) :-
        codegen_args(Val, X, Y),
        (   Op = (mod), Val = x -> true
        ;   format('      a~wmin = (Tgez(~wmin) ? ~wmin : fd_safe_negate_val(~wmin));\n', [X,X,X,X]),
            format('      a~wmax = (Tgez(~wmax) ? ~wmax : fd_safe_negate_val(~wmax));\n', [X,X,X,X]),
            format('      a~wmin = (Tgez(~wmin) ? ~wmin : fd_safe_negate_val(~wmin));\n', [Y,Y,Y,Y]),
            format('      a~wmax = (Tgez(~wmax) ? ~wmax : fd_safe_negate_val(~wmax));\n', [Y,Y,Y,Y])
        ),
        format('      switch (ARITH_DISPATCH(~wmin,~wmax,~wmin,~wmax)) {\n', [X,X,Y,Y]),
        format('      /* AUTOMATICALLY GENERATED CASES FOR ~w PRUNING DVAR dv~w */\n', [Op,Val]),
        (   foreach(Action-Keys,Clumps),
            param(Val)
        do  codegen_values(Keys),
            (   Action = true
            ->  format('      default:\n', [])
            ;   true
            ),
            codegen_action(Action, Val, '', J),
            (   J = jump -> true
            ;   format('        break;\n', [])
            )
        ), !,
        format('      }\n', []), % [MC] SPRM 13682, overflow handling
        format('      if (dvar_fix_interval_t(dv~w, newmin, newmax)<0) {\n', [Val]),
        format('        if (newmin==Sup) /* integer overflow */\n', []),
        format('          fd.fd_overflow = 2;\n', []),
        format('        else if (newmax==Inf) /* integer underflow */\n', []),
        format('          fd.fd_overflow = 1;\n', []),
        format('        goto ret;\n', []),
        format('      }\n', []).

codegen_args(z, x, y).
codegen_args(y, x, z).
codegen_args(x, y, z).

codegen_action(false, _, Prefix, jump) :-
        format('        ~wgoto ret;\n', [Prefix]).
codegen_action(fail, _, Prefix, jump) :-
        format('        ~wgoto ret;\n', [Prefix]).
codegen_action(true, _, Prefix, jump) :- 
        format('        ~wcontinue;\n', [Prefix]).
codegen_action((If -> Then ; Else), Z, Prefix, J) :-
        atom_concat(Prefix, '  ', Prefix2),
        pl_c(If, If1),
        format('        ~wif (~w) {\n', [Prefix,If1]),
        codegen_action(Then, Z, Prefix2, J1),
        format('        ~w} else {\n', [Prefix]),
        codegen_action(Else, Z, Prefix2, J2),
        format('        ~w}\n', [Prefix]),
        (   J1 = J2 -> J = J2 ; J = proceed   ).
codegen_action(Min .. Max, _, Prefix, proceed) :- !,
        codegen_store_vars(Min, Max, Prefix).
codegen_action(\ Sub, Z, Prefix, jump) :-
        codegen_action(Sub, Z, Prefix, proceed),
        format('        ~wif (dvar_prune_interval_t( dv~w, newmin, newmax)<0)\n', [Prefix,Z]),
        format('        ~w  goto ret;\n', [Prefix]),
        format('        ~wcontinue;\n', [Prefix]).
codegen_action(Range \ Sub, Z, Prefix, J) :-
        codegen_action(Sub, Z, Prefix, proceed),
        format('        ~wif (dvar_prune_interval_t( dv~w, newmin, newmax)<0)\n', [Prefix,Z]),
        format('        ~w  goto ret;\n', [Prefix]),
        codegen_action(Range, Z, Prefix, J).

codegen_store_vars(-(Max), +(Max), Prefix) :- atom(Max), !,
        pl_c(Max, MaxC),
        format('        ~wnewmin = fd_safe_negate(~w);\n', [Prefix,MaxC]),
        format('        ~wnewmax = ~w;\n', [Prefix,MaxC]).
codegen_store_vars(-(Max), +(Max), Prefix) :- !,
        pl_c(Max, MaxC),
        format('        ~wnewmax = ~w;\n', [Prefix,MaxC]),
        format('        ~wnewmin = fd_safe_negate(~w);\n', [Prefix,newmax]).
codegen_store_vars(+(A-B), +(B-A), Prefix) :- !,
        pl_c(B-A, MaxC),
        format('        ~wnewmax = ~w;\n', [Prefix,MaxC]),
        format('        ~wnewmin = fd_safe_negate(~w);\n', [Prefix,newmax]).
codegen_store_vars(Min, Max, Prefix) :-
        pl_c(Min, MinC),
        pl_c(Max, MaxC),
        format('        ~wnewmin = ~w;\n', [Prefix,MinC]),
        format('        ~wnewmax = ~w;\n', [Prefix,MaxC]).

pl_c(-1, 'TaggedMinusOne') :- !.
pl_c(0, 'TaggedZero') :- !.
pl_c(1, 'TaggedOne') :- !.
pl_c(A, A) :- atom(A), !.
pl_c(+sup, 'Sup') :- !.
pl_c(-sup, 'Inf') :- !.
pl_c(+(X), X1) :-
        pl_c(X, X1).
pl_c(-(X), fd_safe_negate_val(X)) :-
	atom(X), !.
pl_c(-(X), fd_safe_negate(X1)) :-
        pl_c(X, X1).
pl_c(X+Y, fd_safe_plus(X1,Y1)) :-
        pl_c(X, X1),
        pl_c(Y, Y1).
pl_c(X-Y, fd_safe_minus(X1,Y1)) :-
        pl_c(X, X1),
        pl_c(Y, Y1).
pl_c(X*Y, fd_safe_mul_val(X,Y)) :-
	atom(X),
	atom(Y), !.
pl_c(X*Y, fd_safe_mul(X1,Y1)) :- 
        pl_c(X, X1),
        pl_c(Y, Y1).
pl_c(X/<Y, fd_safe_divd(X1,Y1)) :-
        pl_c(X, X1),
        pl_c(Y, Y1).
pl_c(X/>Y, fd_safe_divu(X1,Y1)) :-
        pl_c(X, X1),
        pl_c(Y, Y1).
pl_c(max(X,Y), fd_safe_max(X1,Y1)) :-
        pl_c(X, X1),
        pl_c(Y, Y1).
pl_c(min(X,Y), fd_safe_min(X1,Y1)) :-
        pl_c(X, X1),
        pl_c(Y, Y1).
pl_c(X<Y, 'Tlt'(X1,Y1)) :-
        pl_c(X, X1),
        pl_c(Y, Y1).
pl_c(X=<Y, 'Tle'(X1,Y1)) :-
        pl_c(X, X1),
        pl_c(Y, Y1).
pl_c(X=Y, (X1==Y1)) :-
        pl_c(X, X1),
        pl_c(Y, Y1).

codegen_values([]).
codegen_values([(L1..U1,L2..U2)|L]) :-
        switch_key(L1, U1, L2, U2, Key), % (Key = 0x60 -> trace ; true),
        format('      case 0x~16r: /* ~q..~q * ~q..~q */\n', [Key,L1,U1,L2,U2]),
        codegen_values(L).

switch_key(L1, U1, L2, U2, Key) :-
        lb_key(L1, K1),
        ub_key(U1, K2),
        lb_key(L2, K3),
        ub_key(U2, K4),
        Key is (K1<<6)+(K2<<4)+(K3<<2)+K4.

lb_key(inf, 0).
lb_key(-(_), 1).
lb_key(0, 2).
lb_key(+(_), 3).

ub_key(-(_), 0).
ub_key(0, 1).
ub_key(+(_), 2).
ub_key(sup, 3).


%     X             Y       =>    Z
mul_z(-(A) .. -(B), -(C) .. -(D), (B*D) .. (A*C)).
mul_z(-(A) .. -(_), -(C) .. 0   , 0     .. (A*C)).
mul_z(-(A) .. -(_), -(C) .. +(D), -(A*D) .. (A*C)).
mul_z(-(_) .. -(_), 0    .. 0   , 0     .. 0    ).
mul_z(-(A) .. -(_), 0    .. +(D), -(A*D) .. 0    ).
mul_z(-(A) .. -(B), +(C) .. +(D), -(A*D) .. -(B*C)).
mul_z(-(A) .. 0   , -(C) .. -(_), 0     .. (A*C)).
mul_z(-(A) .. 0   , -(C) .. 0   , 0     .. (A*C)).
mul_z(-(A) .. 0   , -(C) .. +(D), -(A*D) .. (A*C)).
mul_z(-(_) .. 0   , 0    .. 0   , 0     .. 0    ).
mul_z(-(A) .. 0   , 0    .. +(D), -(A*D) .. 0    ).
mul_z(-(A) .. 0   , +(_) .. +(D), -(A*D) .. 0    ).
mul_z(-(A) .. +(B), -(C) .. -(_), -(B*C) .. (A*C)).
mul_z(-(A) .. +(B), -(C) .. 0   , -(B*C) .. (A*C)).
mul_z(-(A) .. +(B), -(C) .. +(D), min(-(B*C),-(A*D)) .. max(A*C,B*D)).
mul_z(-(_) .. +(_), 0    .. 0   , 0     .. 0    ).
mul_z(-(A) .. +(B), 0    .. +(D), -(A*D) .. (B*D)).
mul_z(-(A) .. +(B), +(_) .. +(D), -(A*D) .. (B*D)).
mul_z(0    .. 0   , -(_) .. -(_), 0     .. 0    ).
mul_z(0    .. 0   , -(_) .. 0   , 0     .. 0    ).
mul_z(0    .. 0   , -(_) .. +(_), 0     .. 0    ).
mul_z(0    .. 0   , 0    .. 0   , 0     .. 0    ).
mul_z(0    .. 0   , 0    .. +(_), 0     .. 0    ).
mul_z(0    .. 0   , +(_) .. +(_), 0     .. 0    ).
mul_z(0    .. +(B), -(C) .. -(_), -(B*C) .. 0    ).
mul_z(0    .. +(B), -(C) .. 0   , -(B*C) .. 0    ).
mul_z(0    .. +(B), -(C) .. +(D), -(B*C) .. (B*D)).
mul_z(0    .. +(_), 0    .. 0   , 0     .. 0    ).
mul_z(0    .. +(B), 0    .. +(D), 0     .. (B*D)).
mul_z(0    .. +(B), +(_) .. +(D), 0     .. (B*D)).
mul_z(+(A) .. +(B), -(C) .. -(D), -(B*C) .. -(A*D)).
mul_z(+(_) .. +(B), -(C) .. 0   , -(B*C) .. 0    ).
mul_z(+(_) .. +(B), -(C) .. +(D), -(B*C) .. (B*D)).
mul_z(+(_) .. +(_), 0    .. 0   , 0     .. 0    ).
mul_z(+(_) .. +(B), 0    .. +(D), 0     .. (B*D)).
mul_z(+(A) .. +(B), +(C) .. +(D), (A*C) .. (B*D)).

%     Y             Z       =>    X
mul_x(-(A) .. -(B), -(C) .. -(D), (-(D) /> -(A)) .. (-(C) /< -(B))).
mul_x(-(_) .. -(B), -(C) .. 0   , 0      .. (-(C) /< -(B))).
mul_x(-(_) .. -(B), -(C) .. +(D), (+(D) /> -(B)) .. (-(C) /< -(B))).
mul_x(-(_) .. -(_), 0    .. 0   , 0      .. 0     ).
mul_x(-(_) .. -(B), 0    .. +(D), (+(D) /> -(B)) .. 0     ).
mul_x(-(A) .. -(B), +(C) .. +(D), (+(D) /> -(B)) .. (+(C) /< -(A))).

mul_x(-(A) .. 0   , -(C) .. -(D), (-(D) /> -(A)) .. +(C)    ).
mul_x(-(_) .. 0   , -(_) .. 0   , -sup .. +sup    ).
mul_x(-(_) .. 0   , -(_) .. +(_), -sup .. +sup    ).
mul_x(-(_) .. 0   , 0    .. 0   , -sup .. +sup    ).
mul_x(-(_) .. 0   , 0    .. +(_), -sup .. +sup    ).
mul_x(-(A) .. 0   , +(C) .. +(D), -(D)     .. (+(C) /< -(A))    ).

mul_x(-(A) .. +(B), -(C) .. -(D), (-(C) .. +(C)) \ (((1-D) /> B) .. ((D-1) /< A))). %new
mul_x(-(_) .. +(_), -(_) .. 0   , -sup .. +sup    ).
mul_x(-(_) .. +(_), -(_) .. +(_), -sup .. +sup    ).
mul_x(-(_) .. +(_), 0    .. 0   , -sup .. +sup    ).
mul_x(-(_) .. +(_), 0    .. +(_), -sup .. +sup    ).
mul_x(-(A) .. +(B), +(C) .. +(D), (-(D) .. +(D)) \ (((1-C) /> A) .. ((C-1) /< B))). %new

mul_x(0    .. 0   , -(_) .. -(_), fail).
mul_x(0    .. 0   , -(_) .. 0   , -sup .. +sup    ).
mul_x(0    .. 0   , -(_) .. +(_), -sup .. +sup    ).
mul_x(0    .. 0   , 0    .. 0   , -sup .. +sup    ).
mul_x(0    .. 0   , 0    .. +(_), -sup .. +sup    ).
mul_x(0    .. 0   , +(_) .. +(_), fail).

mul_x(0    .. +(B), -(C) .. -(D), -(C) .. (-(D) /< +(B))     ).
mul_x(0    .. +(_), -(_) .. 0   , -sup .. +sup    ).
mul_x(0    .. +(_), -(_) .. +(_), -sup .. +sup    ).
mul_x(0    .. +(_), 0    .. 0   , -sup .. +sup    ).
mul_x(0    .. +(_), 0    .. +(_), -sup .. +sup    ).
mul_x(0    .. +(B), +(C) .. +(D), (+(C) /> +(B)) .. +(D)     ).

mul_x(+(A) .. +(B), -(C) .. -(D), (-(C) /> +(A)) .. (-(D) /< +(B))).
mul_x(+(A) .. +(_), -(C) .. 0   , (-(C) /> +(A)) .. 0     ).
mul_x(+(A) .. +(_), -(C) .. +(D), (-(C) /> +(A)) .. (+(D) /< +(A))).
mul_x(+(_) .. +(_), 0    .. 0   , 0      .. 0     ).
mul_x(+(A) .. +(_), 0    .. +(D), 0      .. (+(D) /< +(A))).
mul_x(+(A) .. +(B), +(C) .. +(D), (+(C) /> +(B)) .. (+(D) /< +(A))).

%     X             Y       =>    Z
rem_z(-(A) .. -(B), -(C) .. -(D), (A<D -> -(A) .. -(B) ; -min(A,C-1) .. 0)).
rem_z(-(A) .. -(_), -(C) .. 0   , -min(A,C-1) .. 0).
rem_z(-(A) .. -(_), -(C) .. +(D), -min(A,max(C,D)-1) .. 0).
rem_z(-(_) .. -(_), 0    .. 0   , fail).
rem_z(-(A) .. -(_), 0    .. +(D), -min(A,D-1) .. 0).
rem_z(-(A) .. -(B), +(C) .. +(D), (A<C -> -(A) .. -(B) ; -min(A,D-1) .. 0)).
rem_z(-(A) .. 0   , -(C) .. -(_), -min(A,C-1) .. 0).
rem_z(-(A) .. 0   , -(C) .. 0   , -min(A,C-1) .. 0).
rem_z(-(A) .. 0   , -(C) .. +(D), -min(A,max(C,D)-1) .. 0).
rem_z(-(_) .. 0   , 0    .. 0   , fail).
rem_z(-(A) .. 0   , 0    .. +(D), -min(A,D-1) .. 0).
rem_z(-(A) .. 0   , +(_) .. +(D), -min(A,D-1) .. 0).
rem_z(-(A) .. +(B), -(C) .. -(_), -min(A,C-1) .. min(B,C-1)).
rem_z(-(A) .. +(B), -(C) .. 0   , -min(A,C-1) .. min(B,C-1)).
rem_z(-(A) .. +(B), -(C) .. +(D), -min(A,max(C,D)-1) .. min(B,max(C,D)-1)).
rem_z(-(_) .. +(_), 0    .. 0   , fail).
rem_z(-(A) .. +(B), 0    .. +(D), -min(A,D-1) .. min(B,D-1)).
rem_z(-(A) .. +(B), +(_) .. +(D), -min(A,D-1) .. min(B,D-1)).
rem_z(0    .. 0   , -(_) .. -(_), 0 .. 0).
rem_z(0    .. 0   , -(_) .. 0   , 0 .. 0).
rem_z(0    .. 0   , -(_) .. +(_), 0 .. 0).
rem_z(0    .. 0   , 0    .. 0   , fail).
rem_z(0    .. 0   , 0    .. +(_), 0 .. 0).
rem_z(0    .. 0   , +(_) .. +(_), 0 .. 0).
rem_z(0    .. +(B), -(C) .. -(_), 0 .. min(B,C-1)).
rem_z(0    .. +(B), -(C) .. 0   , 0 .. min(B,C-1)).
rem_z(0    .. +(B), -(C) .. +(D), 0 .. min(B,max(C,D)-1)).
rem_z(0    .. +(_), 0    .. 0   , fail).
rem_z(0    .. +(B), 0    .. +(D), 0 .. min(B,D-1)).
rem_z(0    .. +(B), +(_) .. +(D), 0 .. min(B,D-1)).
rem_z(+(A) .. +(B), -(C) .. -(D), (B<D -> +(A) .. +(B) ; 0 .. min(B,C-1))).
rem_z(+(_) .. +(B), -(C) .. 0   , 0 .. min(B,C-1)).
rem_z(+(_) .. +(B), -(C) .. +(D), 0 .. min(B,max(C,D)-1)).
rem_z(+(_) .. +(_), 0    .. 0   , fail).
rem_z(+(_) .. +(B), 0    .. +(D), 0 .. min(B,D-1)).
rem_z(+(A) .. +(B), +(C) .. +(D), (B<C -> +(A) .. +(B) ; 0 .. min(B,D-1))).

%     X             Z       =>    Y
rem_y(-(A) .. -(B), -(C) .. -(D), (max(B,D)=<min(A,C) ->  -sup .. +sup ;   -(A-D) .. +(A-D)) \ (-(D) .. +(D))).
rem_y(-(A) .. -(B), -(C) .. +(_), (B=<C -> -sup .. +sup ; -(A) .. +(A))).
rem_y(-(A) .. -(B), -(C) .. 0   , (B=<C -> -sup .. +sup ; -(A) .. +(A))).
rem_y(-(A) .. -(_), 0    .. 0   , -(A) .. +(A)).
rem_y(-(A) .. -(_), 0    .. +(_), -(A) .. +(A)).
rem_y(-(_) .. -(_), +(_) .. +(_), fail).
rem_y(-(A) .. 0   , -(_) .. -(D), (D=<A -> -sup .. +sup ; -(A-D) .. +(A-D)) \ (-(D) .. +(D))).
rem_y(-(_) .. 0   , -(_) .. +(_), -sup .. +sup).
rem_y(-(_) .. 0   , -(_) .. 0   , -sup .. +sup).
rem_y(-(_) .. 0   , 0    .. 0   , -sup .. +sup).
rem_y(-(_) .. 0   , 0    .. +(_), -sup .. +sup).
rem_y(-(_) .. 0   , +(_) .. +(_), fail).
rem_y(-(A) .. +(_), -(_) .. -(D), (D=<A -> -sup .. +sup ; -(A-D) .. +(A-D)) \ (-(D) .. +(D))).
rem_y(-(_) .. +(_), -(_) .. +(_), -sup .. +sup).
rem_y(-(_) .. +(_), -(_) .. 0   , -sup .. +sup).
rem_y(-(_) .. +(_), 0    .. 0   , -sup .. +sup).
rem_y(-(_) .. +(_), 0    .. +(_), -sup .. +sup).
rem_y(-(_) .. +(B), +(C) .. +(_), (C=<B -> -sup .. +sup ; -(B-C) .. +(B-C)) \ (-(C) .. +(C))).
rem_y(0    .. 0   , -(_) .. -(_), fail).
rem_y(0    .. 0   , -(_) .. +(_), -sup .. +sup).
rem_y(0    .. 0   , -(_) .. 0   , -sup .. +sup).
rem_y(0    .. 0   , 0    .. 0   , -sup .. +sup).
rem_y(0    .. 0   , 0    .. +(_), -sup .. +sup).
rem_y(0    .. 0   , +(_) .. +(_), fail).
rem_y(0    .. +(_), -(_) .. -(_), fail).
rem_y(0    .. +(_), -(_) .. +(_), -sup .. +sup).
rem_y(0    .. +(_), -(_) .. 0   , -sup .. +sup).
rem_y(0    .. +(_), 0    .. 0   , -sup .. +sup).
rem_y(0    .. +(_), 0    .. +(_), -sup .. +sup).
rem_y(0    .. +(B), +(C) .. +(_), (C=<B -> -sup .. +sup ; -(B-C) .. +(B-C)) \ (-(C) .. +(C))).
rem_y(+(_) .. +(_), -(_) .. -(_), fail).
rem_y(+(A) .. +(B), -(_) .. +(D), (A=<D -> -sup .. +sup ; -(B) .. +(B))).
rem_y(+(_) .. +(B), -(_) .. 0   , -(B) .. +(B)).
rem_y(+(_) .. +(B), 0    .. 0   , -(B) .. +(B)).
rem_y(+(A) .. +(B), 0    .. +(D), (A=<D -> -sup .. +sup ; -(B) .. +(B))).
rem_y(+(A) .. +(B), +(C) .. +(D), (max(A,C)=<min(B,D) ->  -sup .. +sup ;   -(B-C) .. +(B-C)) \ (-(C) .. +(C))).

%     Y             Z       =>    X
rem_x(-(_) .. -(B), -(C) .. -(D), (-sup .. -(D)) \ (1-(B+D) .. -(C+1))).
rem_x(-(_) .. -(B), -(C) .. 0   , (-sup .. +sup) \ (1-B .. -(C+1)       ) \ (C+1          .. B-1)).
rem_x(-(_) .. -(B), -(C) .. +(D), (-sup .. +sup) \ (1-B .. -max(C+1,D+1)) \ (max(C+1,D+1) .. B-1)).
rem_x(-(_) .. -(B), 0    .. 0   , (-sup .. +sup) \ (1-B .. -1           ) \ (1            .. B-1)).
rem_x(-(_) .. -(B), 0    .. +(D), (-sup .. +sup) \ (1-B .. -(D+1)       ) \ (D+1          .. B-1)).
rem_x(-(_) .. -(B), +(C) .. +(D), (+(C) .. +sup) \ (D+1 .. B+C-1)).
rem_x(-(_) .. 0   , -(_) .. -(D), -sup .. -(D)).
rem_x(-(_) .. 0   , -(_) .. 0   , -sup .. +sup).
rem_x(-(_) .. 0   , -(_) .. +(_), -sup .. +sup).
rem_x(-(_) .. 0   , 0    .. 0   , -sup .. +sup).
rem_x(-(_) .. 0   , 0    .. +(_), -sup .. +sup).
rem_x(-(_) .. 0   , +(C) .. +(_), +(C) .. +sup).
rem_x(-(_) .. +(_), -(_) .. -(D), -sup .. -(D)).
rem_x(-(_) .. +(_), -(_) .. 0   , -sup .. +sup).
rem_x(-(_) .. +(_), -(_) .. +(_), -sup .. +sup).
rem_x(-(_) .. +(_), 0    .. 0   , -sup .. +sup).
rem_x(-(_) .. +(_), 0    .. +(_), -sup .. +sup).
rem_x(-(_) .. +(_), +(C) .. +(_), +(C) .. +sup).
rem_x(0    .. 0   , -(_) .. -(_), fail).
rem_x(0    .. 0   , -(_) .. 0   , fail).
rem_x(0    .. 0   , -(_) .. +(_), fail).
rem_x(0    .. 0   , 0    .. 0   , fail).
rem_x(0    .. 0   , 0    .. +(_), fail).
rem_x(0    .. 0   , +(_) .. +(_), fail).
rem_x(0    .. +(_), -(_) .. -(D), -sup .. -(D)).
rem_x(0    .. +(_), -(_) .. 0   , -sup .. +sup).
rem_x(0    .. +(_), -(_) .. +(_), -sup .. +sup).
rem_x(0    .. +(_), 0    .. 0   , -sup .. +sup).
rem_x(0    .. +(_), 0    .. +(_), -sup .. +sup).
rem_x(0    .. +(_), +(C) .. +(_), +(C) .. +sup).
rem_x(+(A) .. +(_), -(C) .. -(D), (-sup .. -(D)  ) \ (1-(A+D) .. -(C+1))).
rem_x(+(A) .. +(_), -(C) .. 0   , (-sup .. +sup) \ (1-A     .. -(C+1)       ) \ (C+1 .. A-1)).
rem_x(+(A) .. +(_), -(C) .. +(D), (-sup .. +sup) \ (1-A     .. -max(C+1,D+1)) \ (max(C+1,D+1) .. A-1)).
rem_x(+(A) .. +(_), 0    .. 0   , (-sup .. +sup) \ (1-A     .. -1           ) \ (1   .. A-1)).
rem_x(+(A) .. +(_), 0    .. +(D), (-sup .. +sup) \ (1-A     .. -(D+1)       ) \ (D+1 .. A-1)).
rem_x(+(A) .. +(_), +(C) .. +(D), (+(C)   .. +sup) \ (D+1     .. A+C-1)).

%     X             Y       =>    Z
mod_z(-(A) .. -(B), -(C) .. -(D), (A<D -> -(A) .. -(B) ; -min(A,C-1) .. 0)).
mod_z(-(A) .. -(_), -(C) .. 0   , -min(A,C-1) .. 0).
mod_z(-(A) .. -(_), -(C) .. +(D), -min(A,C-1) .. D-1).
mod_z(-(_) .. -(_), 0    .. 0   , fail).
mod_z(-(_) .. -(_), 0    .. +(D), 0 .. D-1).
mod_z(-(A) .. -(B), +(C) .. +(D), (A<C -> C-A .. D-B ; 0 .. D-1)).
mod_z(-(A) .. 0   , -(C) .. -(_), -min(A,C-1) .. 0).
mod_z(-(A) .. 0   , -(C) .. 0   , -min(A,C-1) .. 0).
mod_z(-(A) .. 0   , -(C) .. +(D), -min(A,C-1) .. D-1).
mod_z(-(_) .. 0   , 0    .. 0   , fail).
mod_z(-(_) .. 0   , 0    .. +(D), 0 .. D-1).
mod_z(-(_) .. 0   , +(_) .. +(D), 0 .. D-1).
mod_z(-(_) .. +(_), -(C) .. -(_), 1-C .. 0).
mod_z(-(_) .. +(_), -(C) .. 0   , 1-C .. 0).
mod_z(-(_) .. +(_), -(C) .. +(D), 1-C .. D-1).
mod_z(-(_) .. +(_), 0    .. 0   , fail).
mod_z(-(_) .. +(_), 0    .. +(D), 0 .. D-1).
mod_z(-(_) .. +(_), +(_) .. +(D), 0 .. D-1).
mod_z(0    .. 0   , -(_) .. -(_), 0 .. 0).
mod_z(0    .. 0   , -(_) .. 0   , 0 .. 0).
mod_z(0    .. 0   , -(_) .. +(_), 0 .. 0).
mod_z(0    .. 0   , 0    .. 0   , fail).
mod_z(0    .. 0   , 0    .. +(_), 0 .. 0).
mod_z(0    .. 0   , +(_) .. +(_), 0 .. 0).
mod_z(0    .. +(_), -(C) .. -(_), 1-C .. 0).
mod_z(0    .. +(_), -(C) .. 0   , 1-C .. 0).
mod_z(0    .. +(B), -(C) .. +(D), 1-C .. min(B,D-1)).
mod_z(0    .. +(_), 0    .. 0   , fail).
mod_z(0    .. +(B), 0    .. +(D), 0 .. min(B,D-1)).
mod_z(0    .. +(B), +(_) .. +(D), 0 .. min(B,D-1)).
mod_z(+(A) .. +(B), -(C) .. -(D), (B<D -> A-C .. B-D ; 1-C .. 0)).
mod_z(+(_) .. +(_), -(C) .. 0   , 1-C .. 0).
mod_z(+(_) .. +(B), -(C) .. +(D), 1-C .. min(B,D-1)).
mod_z(+(_) .. +(_), 0    .. 0   , fail).
mod_z(+(_) .. +(B), 0    .. +(D), 0 .. min(B,D-1)).
mod_z(+(A) .. +(B), +(C) .. +(D), (B<C -> +(A) .. +(B) ; 0 .. min(B,D-1))).

%     X             Z       =>    Y
% NOTE: 0 not in dom(Y)!
mod_y(-(A) .. -(B), -(C) .. -(D), (max(B,D)=<min(A,C) -> (-sup .. -(D+1)) \ (-(B) .. -(A-D+1)) ; (D-A) .. -(D+1))).
mod_y(-(A) .. -(B), -(C) .. +(D), (B=<C -> -sup .. +(A+D) ; -(A) .. +(A+D))).
mod_y(-(A) .. -(B), -(C) .. 0   , (B=<C -> -sup .. +(A  ) ; -(A) .. +(A  ))).
mod_y(-(A) .. -(_), 0    .. 0   , -(A) .. +(A)).
mod_y(-(A) .. -(_), 0    .. +(D), -(A) .. A+D).
mod_y(-(A) .. -(_), +(C) .. +(D), C+1 .. A+D).
mod_y(-(A) .. 0   , -(_) .. -(D), (D=<A -> -sup .. -(D+1) ; (D-A) .. -(D+1))).
mod_y(-(_) .. 0   , -(_) .. +(_), -sup .. +sup).
mod_y(-(_) .. 0   , -(_) .. 0   , -sup .. +sup).
mod_y(-(_) .. 0   , 0    .. 0   , -sup .. +sup).
mod_y(-(_) .. 0   , 0    .. +(_), -sup .. +sup).
mod_y(-(A) .. 0   , +(C) .. +(D), C+1 .. A+D).
mod_y(-(A) .. +(B), -(C) .. -(D), (D=<A -> -sup .. -(D+1) ; -(B+C) .. -(D+1))).
mod_y(-(_) .. +(_), -(_) .. +(_), -sup .. +sup).
mod_y(-(_) .. +(_), -(_) .. 0   , -sup .. +sup).
mod_y(-(_) .. +(_), 0    .. 0   , -sup .. +sup).
mod_y(-(_) .. +(_), 0    .. +(_), -sup .. +sup).
mod_y(-(A) .. +(B), +(C) .. +(D), (C=<B -> (C+1) .. +sup ; (C+1) .. (A+D))).
mod_y(0    .. 0   , -(_) .. -(_), fail).
mod_y(0    .. 0   , -(_) .. +(_), -sup .. +sup).
mod_y(0    .. 0   , -(_) .. 0   , -sup .. +sup).
mod_y(0    .. 0   , 0    .. 0   , -sup .. +sup).
mod_y(0    .. 0   , 0    .. +(_), -sup .. +sup).
mod_y(0    .. 0   , +(_) .. +(_), fail).
mod_y(0    .. +(B), -(C) .. -(D), -(B+C) .. -(D+1)).
mod_y(0    .. +(_), -(_) .. +(_), -sup .. +sup).
mod_y(0    .. +(_), -(_) .. 0   , -sup .. +sup).
mod_y(0    .. +(_), 0    .. 0   , -sup .. +sup).
mod_y(0    .. +(_), 0    .. +(_), -sup .. +sup).
mod_y(0    .. +(B), +(C) .. +(_), (C=<B -> (C+1) .. +sup ; (C+1) .. (B-C))).
mod_y(+(_) .. +(B), -(C) .. -(D), -(B+C) .. -(D+1)).
mod_y(+(A) .. +(B), -(C) .. +(D), (A=<D -> -(B+C) .. +sup ; -(B+C) .. +(B))).
mod_y(+(_) .. +(B), -(C) .. 0   , -(B+C) .. +(B)).
mod_y(+(_) .. +(B), 0    .. 0   , -(B) .. +(B)).
mod_y(+(A) .. +(B), 0    .. +(D), (A=<D -> -(B  ) .. +sup ; -(B  ) .. +(B))).
mod_y(+(A) .. +(B), +(C) .. +(D), (max(A,C)=<min(B,D) -> ((C+1) .. +sup) \ ((B-C+1) .. A) ; (C+1) .. (B-C))).

%     Y             Z       =>    X
mod_x(-(_) .. -(_), -(_) .. -(_), \(0 .. 0)).
mod_x(-(_) .. -(_), -(_) .. 0   , -sup .. +sup).
mod_x(-(_) .. -(_), -(_) .. +(_), -sup .. +sup).
mod_x(-(_) .. -(_), 0    .. 0   , -sup .. +sup).
mod_x(-(_) .. -(_), 0    .. +(_), -sup .. +sup).
mod_x(-(_) .. -(_), +(_) .. +(_), fail).
mod_x(-(_) .. 0   , -(_) .. -(_), \(0 .. 0)).
mod_x(-(_) .. 0   , -(_) .. 0   , -sup .. +sup).
mod_x(-(_) .. 0   , -(_) .. +(_), -sup .. +sup).
mod_x(-(_) .. 0   , 0    .. 0   , -sup .. +sup).
mod_x(-(_) .. 0   , 0    .. +(_), -sup .. +sup).
mod_x(-(_) .. 0   , +(_) .. +(_), fail).
mod_x(-(_) .. +(_), -(_) .. -(_), \(0 .. 0)).
mod_x(-(_) .. +(_), -(_) .. 0   , -sup .. +sup).
mod_x(-(_) .. +(_), -(_) .. +(_), -sup .. +sup).
mod_x(-(_) .. +(_), 0    .. 0   , -sup .. +sup).
mod_x(-(_) .. +(_), 0    .. +(_), -sup .. +sup).
mod_x(-(_) .. +(_), +(_) .. +(_), \(0 .. 0)).
mod_x(0    .. 0   , -(_) .. -(_), fail).
mod_x(0    .. 0   , -(_) .. 0   , fail).
mod_x(0    .. 0   , -(_) .. +(_), fail).
mod_x(0    .. 0   , 0    .. 0   , fail).
mod_x(0    .. 0   , 0    .. +(_), fail).
mod_x(0    .. 0   , +(_) .. +(_), fail).
mod_x(0    .. +(_), -(_) .. -(_), fail).
mod_x(0    .. +(_), -(_) .. 0   , -sup .. +sup).
mod_x(0    .. +(_), -(_) .. +(_), -sup .. +sup).
mod_x(0    .. +(_), 0    .. 0   , -sup .. +sup).
mod_x(0    .. +(_), 0    .. +(_), -sup .. +sup).
mod_x(0    .. +(_), +(_) .. +(_), \(0 .. 0)).
mod_x(+(_) .. +(_), -(_) .. -(_), fail).
mod_x(+(_) .. +(_), -(_) .. 0   , -sup .. +sup).
mod_x(+(_) .. +(_), -(_) .. +(_), -sup .. +sup).
mod_x(+(_) .. +(_), 0    .. 0   , -sup .. +sup).
mod_x(+(_) .. +(_), 0    .. +(_), -sup .. +sup).
mod_x(+(_) .. +(_), +(_) .. +(_), \(0 .. 0)).

%     X             Y       =>    Z
quo_z(-(A) .. -(B), -(C) .. -(D), +(B/<C) .. +(A/<D)).
quo_z(-(A) .. -(B), -(C) .. 0   , +(B/<C) .. +(A)).
quo_z(-(A) .. -(B), -(C) .. +(D), (-A .. +A) \ ((1-(B/<D) .. (B/<C)-1))).
quo_z(-(_) .. -(_), 0    .. 0   , fail  ).
quo_z(-(A) .. -(B), 0    .. +(D), -(A) .. -(B/<D)).
quo_z(-(A) .. -(B), +(C) .. +(D), -(A/<C) .. -(B/<D)).
quo_z(-(A) .. 0   , -(_) .. -(D), 0 .. +(A/<D)).
quo_z(-(A) .. 0   , -(_) .. 0   , 0 .. +(A)).
quo_z(-(A) .. 0   , -(_) .. +(_), -(A) .. +(A)).
quo_z(-(_) .. 0   , 0    .. 0   , fail  ).
quo_z(-(A) .. 0   , 0    .. +(_), -(A) .. 0).
quo_z(-(A) .. 0   , +(C) .. +(_), -(A/<C) .. 0).
quo_z(-(A) .. +(B), -(_) .. -(D), -(B/<D) .. +(A/<D)).
quo_z(-(A) .. +(B), -(_) .. 0   , -(B) .. +(A)).
quo_z(-(A) .. +(B), -(_) .. +(_), -max(A,B) .. max(A,B)).
quo_z(-(_) .. +(_), 0    .. 0   , fail  ).
quo_z(-(A) .. +(B), 0    .. +(_), -(A) .. +(B)).
quo_z(-(A) .. +(B), +(C) .. +(_), -(A/<C) .. +(B/<C)).
quo_z(0    .. 0   , -(_) .. -(_), 0 .. 0).
quo_z(0    .. 0   , -(_) .. 0   , 0 .. 0).
quo_z(0    .. 0   , -(_) .. +(_), 0 .. 0).
quo_z(0    .. 0   , 0    .. 0   , fail  ).
quo_z(0    .. 0   , 0    .. +(_), 0 .. 0).
quo_z(0    .. 0   , +(_) .. +(_), 0 .. 0).
quo_z(0    .. +(B), -(_) .. -(D), -(B/<D) .. 0).
quo_z(0    .. +(B), -(_) .. 0   , -(B) .. 0).
quo_z(0    .. +(B), -(_) .. +(_), -(B) .. +(B)).
quo_z(0    .. +(_), 0    .. 0   , fail  ).
quo_z(0    .. +(B), 0    .. +(_), 0 .. +(B)).
quo_z(0    .. +(B), +(C) .. +(_), 0 .. +(B/<C)).
quo_z(+(A) .. +(B), -(C) .. -(D), -(B/<D) .. -(A/<C)).
quo_z(+(A) .. +(B), -(C) .. 0   , -(B) .. -(A/<C)).
quo_z(+(A) .. +(B), -(C) .. +(D), (-B .. +B) \ ((1-(A/<C) .. (A/<D)-1))).
quo_z(+(_) .. +(_), 0    .. 0   , fail  ).
quo_z(+(A) .. +(B), 0    .. +(D), +(A/<D) .. +(B)).
quo_z(+(A) .. +(B), +(C) .. +(D), +(A/<D) .. +(B/<C)).

%     X             Z       =>    Y
quo_y(-(A) .. -(B), -(C) .. -(D), +((B+1)/>(C+1)) .. +(A/<D)). 
quo_y(-(_) .. -(B), -(C) .. +(D), \ (1-((B+1)/>(D+1)) .. ((B+1)/>(C+1))-1)).
quo_y(-(_) .. -(B), -(C) .. 0   , \ (-B               .. ((B+1)/>(C+1))-1)).
quo_y(-(_) .. -(B), 0    .. 0   , \ (-B               .. B               )).
quo_y(-(_) .. -(B), 0    .. +(D), \ (1-((B+1)/>(D+1)) .. B               )).
quo_y(-(A) .. -(B), +(C) .. +(D), -(A/<C) .. -((B+1)/>(D+1))).
quo_y(-(A) .. 0   , -(_) .. -(D), 0 .. +(A/<D)).
quo_y(-(_) .. 0   , -(_) .. +(_), -sup .. +sup).
quo_y(-(_) .. 0   , -(_) .. 0   , -sup .. +sup).
quo_y(-(_) .. 0   , 0    .. 0   , -sup .. +sup).
quo_y(-(_) .. 0   , 0    .. +(_), -sup .. +sup).
quo_y(-(A) .. 0   , +(C) .. +(_), -(A/<C) .. 0).
quo_y(-(A) .. +(B), -(_) .. -(D), -(B/<D) .. +(A/<D)).
quo_y(-(_) .. +(_), -(_) .. +(_), -sup .. +sup).
quo_y(-(_) .. +(_), -(_) .. 0   , -sup .. +sup).
quo_y(-(_) .. +(_), 0    .. 0   , -sup .. +sup).
quo_y(-(_) .. +(_), 0    .. +(_), -sup .. +sup).
quo_y(-(A) .. +(B), +(C) .. +(_), -(A/<C) .. +(B/<C)).
quo_y(0    .. 0   , -(_) .. -(_), fail  ).
quo_y(0    .. 0   , -(_) .. +(_), -sup .. +sup).
quo_y(0    .. 0   , -(_) .. 0   , -sup .. +sup).
quo_y(0    .. 0   , 0    .. 0   , -sup .. +sup).
quo_y(0    .. 0   , 0    .. +(_), -sup .. +sup).
quo_y(0    .. 0   , +(_) .. +(_), fail  ).
quo_y(0    .. +(B), -(_) .. -(D), -(B/<D) .. 0).
quo_y(0    .. +(_), -(_) .. +(_), -sup .. +sup).
quo_y(0    .. +(_), -(_) .. 0   , -sup .. +sup).
quo_y(0    .. +(_), 0    .. 0   , -sup .. +sup).
quo_y(0    .. +(_), 0    .. +(_), -sup .. +sup).
quo_y(0    .. +(B), +(C) .. +(_), 0 .. +(B/<C)).
quo_y(+(A) .. +(B), -(C) .. -(D), -(B/<D) .. -((A+1)/>(C+1))). 
quo_y(+(A) .. +(_), -(C) .. +(D), \ (1-((A+1)/>(C+1)) .. ((A+1)/>(D+1))-1)).
quo_y(+(A) .. +(_), -(C) .. 0   , \ (1-((A+1)/>(C+1)) .. A)).
quo_y(+(A) .. +(_), 0    .. 0   , \ (-A .. A)).
quo_y(+(A) .. +(_), 0    .. +(D), \ (-A .. ((A+1)/>(D+1))-1)).
quo_y(+(A) .. +(B), +(C) .. +(D), +((A+1)/>(D+1)) .. +(B/<C)). 

%     Y             Z       =>    X
quo_x(-(A) .. -(B), -(C) .. -(D), +(B*D) .. +(A*C+A-1)).
quo_x(-(A) .. -(_), -(C) .. 0   , -(A-1) .. +(A*C+A-1)).
quo_x(-(A) .. -(_), -(C) .. +(D), -(A*D+A-1) .. +(A*C+A-1)).
quo_x(-(A) .. -(_), 0    .. 0   , -(A-1) .. +(A-1)).
quo_x(-(A) .. -(_), 0    .. +(D), -(A*D+A-1) .. +(A-1)).
quo_x(-(A) .. -(B), +(C) .. +(D), -(A*D+A-1) .. -(B*C)).
quo_x(-(A) .. 0   , -(C) .. -(D), +(D) .. +(A*C+A-1)).
quo_x(-(A) .. 0   , -(C) .. 0   , -(A-1) .. +(A*C+A-1)).
quo_x(-(A) .. 0   , -(C) .. +(D), -(A*D+A-1) .. +(A*C+A-1)).
quo_x(-(A) .. 0   , 0    .. 0   , -(A-1) .. +(A-1)).
quo_x(-(A) .. 0   , 0    .. +(D), -(A*D+A-1) .. +(A-1)).
quo_x(-(A) .. 0   , +(C) .. +(D), -(A*D+A-1) .. -(C)).
quo_x(-(A) .. +(B), -(C) .. -(D), (-(B*C+B-1) .. +(A*C+A-1)) \ (-(D-1) .. +(D-1))).
quo_x(-(A) .. +(B), -(C) .. 0   , -max(B*C+B-1,A-1) .. max(A*C+A-1,B-1)).
quo_x(-(A) .. +(B), -(C) .. +(D), -max(B*C+B-1,A*D+A-1) .. max(A*C+A-1,B*D+B-1)).
quo_x(-(A) .. +(B), 0    .. 0   , -max(A-1,B-1) .. max(A-1,B-1)).
quo_x(-(A) .. +(B), 0    .. +(D), -max(B-1,A*D+A-1) .. max(A-1,B*D+B-1)).
quo_x(-(A) .. +(B), +(C) .. +(D), (-(A*D+A-1) .. +(B*D+B-1)) \ (-(C-1) .. +(C-1))).
quo_x(0    .. 0   , -(_) .. -(_), fail).
quo_x(0    .. 0   , -(_) .. 0   , fail).
quo_x(0    .. 0   , -(_) .. +(_), fail).
quo_x(0    .. 0   , 0    .. 0   , fail).
quo_x(0    .. 0   , 0    .. +(_), fail).
quo_x(0    .. 0   , +(_) .. +(_), fail).
quo_x(0    .. +(B), -(C) .. -(D), -(B*C+B-1) .. -(D)).
quo_x(0    .. +(B), -(C) .. 0   , -(B*C+B-1) .. +(B-1)).
quo_x(0    .. +(B), -(C) .. +(D), -(B*C+B-1) .. +(B*D+B-1)).
quo_x(0    .. +(B), 0    .. 0   , -(B-1) .. +(B-1)).
quo_x(0    .. +(B), 0    .. +(D), -(B-1) .. +(B*D+B-1)).
quo_x(0    .. +(B), +(C) .. +(D), +(C) .. +(B*D+B-1)).
quo_x(+(A) .. +(B), -(C) .. -(D), -(B*C+B-1) .. -(A*D)).
quo_x(+(_) .. +(B), -(C) .. 0   , -(B*C+B-1) .. +(B-1)).
quo_x(+(_) .. +(B), -(C) .. +(D), -(B*C+B-1) .. +(B*D+B-1)).
quo_x(+(_) .. +(B), 0    .. 0   , -(B-1) .. +(B-1)).
quo_x(+(_) .. +(B), 0    .. +(D), -(B-1) .. +(B*D+B-1)).
quo_x(+(A) .. +(B), +(C) .. +(D), +(A*C) .. +(B*D+B-1)).

%     X             Y       =>    Z
div_z(-(A) .. -(B), -(C) .. -(D), +(B/<C) .. +(A/<D)).
div_z(-(A) .. -(B), -(C) .. 0   , +(B/<C) .. +(A)).
div_z(-(A) .. -(B), -(C) .. +(D), (-A .. +A) \ ((1-(B/>D) .. (B/<C)-1))).
div_z(-(_) .. -(_), 0    .. 0   , fail  ).
div_z(-(A) .. -(B), 0    .. +(D), -(A) .. -(B/>D)).
div_z(-(A) .. -(B), +(C) .. +(D), -(A/>C) .. -(B/>D)).
div_z(-(A) .. 0   , -(_) .. -(D), 0 .. +(A/<D)).
div_z(-(A) .. 0   , -(_) .. 0   , 0 .. +(A)).
div_z(-(A) .. 0   , -(_) .. +(_), -(A) .. +(A)).
div_z(-(_) .. 0   , 0    .. 0   , fail  ).
div_z(-(A) .. 0   , 0    .. +(_), -(A) .. 0).
div_z(-(A) .. 0   , +(C) .. +(_), -(A/>C) .. 0).
div_z(-(A) .. +(B), -(_) .. -(D), -(B/>D) .. +(A/<D)).
div_z(-(A) .. +(B), -(_) .. 0   , -(B) .. +(A)).
div_z(-(A) .. +(B), -(_) .. +(_), -max(A,B) .. max(A,B)).
div_z(-(_) .. +(_), 0    .. 0   , fail  ).
div_z(-(A) .. +(B), 0    .. +(_), -(A) .. +(B)).
div_z(-(A) .. +(B), +(C) .. +(_), -(A/>C) .. +(B/<C)).
div_z(0    .. 0   , -(_) .. -(_), 0 .. 0).
div_z(0    .. 0   , -(_) .. 0   , 0 .. 0).
div_z(0    .. 0   , -(_) .. +(_), 0 .. 0).
div_z(0    .. 0   , 0    .. 0   , fail  ).
div_z(0    .. 0   , 0    .. +(_), 0 .. 0).
div_z(0    .. 0   , +(_) .. +(_), 0 .. 0).
div_z(0    .. +(B), -(_) .. -(D), -(B/>D) .. 0). 
div_z(0    .. +(B), -(_) .. 0   , -(B) .. 0).
div_z(0    .. +(B), -(_) .. +(_), -(B) .. +(B)).
div_z(0    .. +(_), 0    .. 0   , fail  ).
div_z(0    .. +(B), 0    .. +(_), 0 .. +(B)).
div_z(0    .. +(B), +(C) .. +(_), 0 .. +(B/<C)).
div_z(+(A) .. +(B), -(C) .. -(D), -(B/>D) .. -(A/>C)).
div_z(+(A) .. +(B), -(C) .. 0   , -(B) .. -(A/>C)).
div_z(+(A) .. +(B), -(C) .. +(D), (-B .. +B) \ ((1-(A/>C) .. (A/<D)-1))).
div_z(+(_) .. +(_), 0    .. 0   , fail  ).
div_z(+(A) .. +(B), 0    .. +(D), +(A/<D) .. +(B)).
div_z(+(A) .. +(B), +(C) .. +(D), +(A/<D) .. +(B/<C)).

%     X             Z       =>    Y
/*** A case analysis by hand, reducing to the world of real numbers

Find Y s.t. floor(X/Y) = Z
       i.e. X/Y in [Z,Z+1)
            X in [Y*Z,Y*(Z+1)) if Y is positive,
            X in (Y*(Z+1),Y*Z] if Y is negative

If Z>0, Y>0 => X>0  [A] + +

	    Y in (X/(Z+1) , X/Z]
	    Y in [ eps+ceiling(min(X)/(max(Z)+1)) , floor(max(X)/min(Z)) ]
	    Y in [ floor(min(X)/(max(Z)+1))+1 , floor(max(X)/min(Z)) ]

If Z>0, Y<0 => X<0 [B] - +

            Y in [X/Z , X/(Z+1))
	    Y in [ ceiling(min(X)/min(Z)) , ceiling(max(X)/(max(Z)+1))-1 ]

If Z=0, Y>0 => X>0 [C] + 0

	    Y in (X/(Z+1) , X/Z]
	    Y in min(X)+1 .. sup

If Z=0, Y<0 => X<0 [D] - 0

            Y in [X/Z , X/(Z+1))
	    Y in inf .. max(X)-1

If Z = -1, Y<0 => X>0 [E] + -

	    Y in (X/(Z+1) , X/Z]
	    Y in inf .. -min(X)

If Z < -1, Y<0 => X>0 [F] + -

	    Y in (X/(Z+1) , X/Z]
	    Y in [ eps+ceiling(max(X)/(max(Z)+1)) , floor(min(X)/min(Z)) ]
	    Y in [ floor(max(X)/(max(Z)+1))+1 , floor(min(X)/min(Z)) ]

If Z = -1, Y>0 => X<0 [G] - -

            Y in [X/Z , X/(Z+1))
	    Y in [ ceiling(max(X)/min(Z)) , ceiling(min(X)/(max(Z)+1))-1 ]
	    Y in -max(X) .. sup

If Z < -1, Y>0 => X<0 [H] - -

            Y in [X/Z , X/(Z+1))
	    Y in [ ceiling(max(X)/min(Z))) , ceiling(min(X)/(max(Z)+1))-1 ]
***/


div_y(-(A) .. -(B), -(C) .. -(D), (D=1 -> (B/>C) .. +sup ; (B/>C) .. (A/>(D-1))-1)). %GH
div_y(-(_) .. -(B), -(C) .. +(D), \ ((-B)/>(D+1) .. (B/>C)-1)). %BDGH
div_y(-(_) .. -(B), -(C) .. 0   , \ ((-B)        .. (B/>C)-1)). %BDGH
div_y(-(_) .. -(B), 0    .. 0   , -sup .. (-B-1)).		%D
div_y(-(_) .. -(B), 0    .. +(D), -sup .. (-B/>(D+1))-1). %BD
div_y(-(A) .. -(B), +(C) .. +(D), (-A/>C) .. (-B/>(D+1))-1). %B
div_y(-(A) .. 0   , -(_) .. -(D), (D=1 -> 1 .. +sup ; 1 .. (A/>(D-1))-1)). %GH 
div_y(-(_) .. 0   , -(_) .. +(_), -sup .. +sup).
div_y(-(_) .. 0   , -(_) .. 0   , -sup .. +sup).
div_y(-(_) .. 0   , 0    .. 0   , -sup .. +sup).
div_y(-(_) .. 0   , 0    .. +(_), -sup .. +sup).
div_y(-(A) .. 0   , +(C) .. +(_), (-A/>C) .. -1). %B
div_y(-(A) .. +(B), -(_) .. -(D), (D=1 -> -sup .. +sup ; (B/<(1-D))+1 .. (A/>(D-1))-1)). %EFGH 
div_y(-(_) .. +(_), -(_) .. +(_), -sup .. +sup).
div_y(-(_) .. +(_), -(_) .. 0   , -sup .. +sup).
div_y(-(_) .. +(_), 0    .. 0   , -sup .. +sup).
div_y(-(_) .. +(_), 0    .. +(_), -sup .. +sup).
div_y(-(A) .. +(B), +(C) .. +(_), (-A/>C) .. (B/<C)). %AB
div_y(0    .. 0   , -(_) .. -(_), fail  ).
div_y(0    .. 0   , -(_) .. +(_), -sup .. +sup).
div_y(0    .. 0   , -(_) .. 0   , -sup .. +sup).
div_y(0    .. 0   , 0    .. 0   , -sup .. +sup).
div_y(0    .. 0   , 0    .. +(_), -sup .. +sup).
div_y(0    .. 0   , +(_) .. +(_), fail  ).
div_y(0    .. +(B), -(_) .. -(D), (D=1 -> -sup .. -1 ; (B/<(1-D))+1 .. -1)). %EF
div_y(0    .. +(_), -(_) .. +(_), -sup .. +sup).
div_y(0    .. +(_), -(_) .. 0   , -sup .. +sup).
div_y(0    .. +(_), 0    .. 0   , -sup .. +sup).
div_y(0    .. +(_), 0    .. +(_), -sup .. +sup).
div_y(0    .. +(B), +(C) .. +(_), 1 .. (B/<C)). %A
div_y(+(A) .. +(B), -(C) .. -(D), (D=1 -> -sup .. (A/<(-C)) ; (B/<(1-D))+1 .. (A/<(-C)))). %EF
div_y(+(A) .. +(_), -(C) .. +(D), \ ((A/<(-C))+1 .. (A/<(D+1)))). %ACEF
div_y(+(A) .. +(_), -(C) .. 0   , \ ((A/<(-C))+1 .. A)). %CEF
div_y(+(A) .. +(_), 0    .. 0   , A+1 .. +sup). %C
div_y(+(A) .. +(_), 0    .. +(D), (A/<(D+1))+1 .. +sup). %AC
div_y(+(A) .. +(B), +(C) .. +(D), (A/<(D+1))+1 .. (B/<C) ). %A

/***

Find X s.t. floor(X/Y) = Z
       i.e. X/Y in [Z,Z+1)
            X in [Y*Z,Y*(Z+1)) if Y is positive,
            X in (Y*(Z+1),Y*Z] if Y is negative

Switch on Y,Z in

case + +: [A]

	X in min(Y)*min(Z) .. max(Y)*(max(Z)+1)-1

case + 0: [B]

	X in 0 .. max(Y)-1

case + -: [C]

	X in max(Y)*min(Z) .. min(Y)*(max(Z)+1)-1

case - +: [D]

	X in min(Y)*(max(Z)+1)+1 .. max(Y)*min(Z)

case - 0: [E]

	X in min(Y)+1 .. 0

case - -: [F]

	X in max(Y)*(max(Z)+1)+1 .. min(Y)*min(Z)

	Y>0, Z=0 -> X in 0 .. max(Y)-1
	Y>0, Z<0 -> X in max(Y)*min(Z) .. min(Y)*(max(Z)+1)-1
	Y<0, Z=0 -> X in min(Y)+1 .. 0
	Y<0, Z<0 -> X in max(Y)*(max(Z)+1)+1 .. min(Y)*min(Z)

	Y>0, Z=0 -> X in 0 .. max(Y)-1
	Y>0, Z<0 -> X in max(Y)*min(Z) .. -1
	Y<0, Z=0 -> X in min(Y)+1 .. 0
	Y<0, Z<0 -> X in 1 .. min(Y)*min(Z)


	X div -1..1 = -1..0


***/

%     Y             Z       =>    X
div_x(-(A) .. -(B), -(C) .. -(D), (B*D-B+1) .. (A*C)). %F N.B.
div_x(-(A) .. -(_), -(C) .. 0   , (1-A) .. (A*C)). %EF
div_x(-(A) .. -(_), -(C) .. +(D), -(A*D+A-1) .. (A*C)). %DEF
div_x(-(A) .. -(_), 0    .. 0   , -(A-1) .. 0). %E
div_x(-(A) .. -(_), 0    .. +(D), -(A*D+A-1) .. 0). %DE
div_x(-(A) .. -(B), +(C) .. +(D), -(A*D+A-1) .. -(B*C)). %D
div_x(-(A) .. 0   , -(C) .. -(D), (D) .. (A*C)). %F
div_x(-(A) .. 0   , -(C) .. 0   , (1-A) .. (A*C)). %EF
div_x(-(A) .. 0   , -(C) .. +(D), -(A*D+A-1) .. (A*C)). %DEF
div_x(-(A) .. 0   , 0    .. 0   , -(A-1) .. 0). %E
div_x(-(A) .. 0   , 0    .. +(D), -(A*D+A-1) .. (A-1)).
div_x(-(A) .. 0   , +(_) .. +(D), -(A*D+A-1) .. 0). %DE
div_x(-(A) .. +(B), -(C) .. -(D), (-(B*C) .. (A*C)) \ ((1-D) .. (D-1))). %CF
div_x(-(A) .. +(B), -(C) .. 0   , min(1-A,-B*C) .. max(B-1,A*C)). %BCEF fixed
div_x(-(A) .. +(B), -(C) .. +(D), min(-B*C,-(A*D+A-1)) .. max(A*C,(B*D+B-1))). %ABCDEF
div_x(-(A) .. +(B), 0    .. 0   , (1-A) .. (B-1)). %BE
div_x(-(A) .. +(B), 0    .. +(D), -(A*D+A-1) .. (B*D+B-1)). %ABDE
div_x(-(A) .. +(B), +(C) .. +(D), (-(A*D+A-1) .. (B*D+B-1)) \ ((1-C) .. (C-1))). %AD
div_x(0    .. 0   , -(_) .. -(_), fail).
div_x(0    .. 0   , -(_) .. 0   , fail).
div_x(0    .. 0   , -(_) .. +(_), fail).
div_x(0    .. 0   , 0    .. 0   , fail).
div_x(0    .. 0   , 0    .. +(_), fail).
div_x(0    .. 0   , +(_) .. +(_), fail).
div_x(0    .. +(B), -(C) .. -(D), -(B*C) .. (-D)). %C
div_x(0    .. +(B), -(C) .. 0   , -(B*C) .. (B-1)). %BC
div_x(0    .. +(B), -(C) .. +(D), -(B*C) .. (B*D+B-1)). %ABC
div_x(0    .. +(B), 0    .. 0   , 0 .. (B-1)). %B
div_x(0    .. +(B), 0    .. +(D), 0 .. (B*D+B-1)). %AB
div_x(0    .. +(B), +(_) .. +(D), 0 .. (B*D+B-1)). %A
div_x(+(A) .. +(B), -(C) .. -(D), -(B*C) .. -(A*D-A+1)). %C N.B.
div_x(+(_) .. +(B), -(C) .. 0   , -(B*C) .. (B-1)). %BC
div_x(+(_) .. +(B), -(C) .. +(D), -(B*C) .. (B*D+B-1)). %ABC
div_x(+(_) .. +(B), 0    .. 0   , 0 .. (B-1)). %B
div_x(+(_) .. +(B), 0    .. +(D), 0 .. (B*D+B-1)). %AB
div_x(+(A) .. +(B), +(C) .. +(D), (A*C) .. (B*D+B-1)). %A

