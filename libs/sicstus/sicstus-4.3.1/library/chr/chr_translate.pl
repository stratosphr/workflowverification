/*  Generated by CHR bootstrap compiler
    From: chr_translate.chr
    Date: 27-11-2014 9:32:16

    DO NOT EDIT.  EDIT THE CHR FILE INSTEAD
*/

(:-module(chr_translate,[chr_translate/2])).
(:-use_module(chr_runtime)).
(:-use_module(chr_hashtable_store)).
(:-use_module(hpattvars)).
(:-use_module(b_globval)).
(:-use_module(hprolog)).
(:-current_prolog_flag(discontiguous_warnings,A),(bb_get(chr_discontiguous_stack,B)->bb_put(chr_discontiguous_stack,[A|B]);bb_put(chr_discontiguous_stack,[A])),set_prolog_flag(discontiguous_warnings,off)).
(:-use_module(hprolog)).
(:-use_module(pairlist)).
(:-use_module(a_star)).
(:-use_module(listmap)).
(:-use_module(clean_code)).
(:-use_module(builtins)).
(:-use_module(find)).
(:-use_module(guard_entailment)).
(:-use_module(chr_compiler_options)).
(:-use_module(chr_compiler_utility)).
(:-use_module(chr_compiler_errors)).
(:-include(chr_op)).
(:-op(1150,fx,chr_type)).
(:-op(1130,xfx,--->)).
(:-op(980,fx,?)).
(:-op(1150,fx,constraints)).
(:-op(1150,fx,chr_constraint)).
set_constraint_indices(A) :-
        set_constraint_indices(A, 1).
set_constraint_indices([], A) :-
        B is A-1,
        max_constraint_index(B).
set_constraint_indices([A|B], C) :-
        (   (   chr_pp_flag(debugable, on)
            ;   \+only_ground_indexed_arguments(A),
                is_stored(A)
            ;   is_stored(A),
                get_store_type(A, default)
            ) ->
            constraint_index(A, C),
            D is C+1,
            set_constraint_indices(B, D)
        ;   set_constraint_indices(B, C)
        ).
chr_translate(A, B) :-
        chr_banner,
        init_chr_pp_flags,
        time(partition_clauses, chr_translate:partition_clauses(A,C,D,E)),
        time(check_declared_constraints, chr_translate:check_declared_constraints(C)),
        time(generate_show_constraint, chr_translate:generate_show_constraint(C,F,D,G)),
        time(add_constraints, chr_translate:add_constraints(F)),
        time(add_rules, chr_translate:add_rules(G)),
        time(check_rules, chr_translate:check_rules(G,F)),
        time(add_occurrences, chr_translate:add_occurrences(G)),
        time(functional_dependency_analysis, chr_translate:functional_dependency_analysis(G)),
        time(set_semantics_rules, chr_translate:set_semantics_rules(G)),
        time(symmetry_analysis, chr_translate:symmetry_analysis(G)),
        guard_simplification,
        time(storage_analysis, chr_translate:storage_analysis(F)),
        time(observation_analysis, chr_translate:observation_analysis(F)),
        time(ai_observation_analysis, chr_translate:ai_observation_analysis(F)),
        time(late_allocation_analysis, chr_translate:late_allocation_analysis(F)),
        time(assume_constraint_stores, chr_translate:assume_constraint_stores(F)),
        time(set_constraint_indices, chr_translate:set_constraint_indices(F)),
        time(constraints_code, chr_translate:constraints_code(F,H)),
        time(validate_store_type_assumptions, chr_translate:validate_store_type_assumptions(F)),
        time(phase_end, chr_translate:phase_end(validate_store_type_assumptions)),
        time(store_management_preds, chr_translate:store_management_preds(F,I)),
        time(insert_declarations, chr_translate:insert_declarations(E,J)),
        time(chr_module_declaration, chr_translate:chr_module_declaration(K)),
        append([J,[(:-current_prolog_flag(discontiguous_warnings,L),(bb_get(chr_discontiguous_stack,M)->bb_put(chr_discontiguous_stack,[L|M]);bb_put(chr_discontiguous_stack,[L])),set_prolog_flag(discontiguous_warnings,off))],I,H,K,[(:-bb_get(chr_discontiguous_stack,[N|M]),bb_put(chr_discontiguous_stack,M),set_prolog_flag(discontiguous_warnings,N))],[end_of_file]], B).
store_management_preds(A, B) :-
        generate_attach_detach_a_constraint_all(A, C),
        generate_attach_increment(D),
        generate_attr_unify_hook(E),
        generate_extra_clauses(A, F),
        generate_insert_delete_constraints(A, G),
        generate_attach_code(A, H),
        generate_counter_code(I),
        append([C,_,D,E,F,G,H,I], B).
extra_declaration([]).
insert_declarations(A, B) :-
        extra_declaration(C),
        append(A, C, B).
generate_counter_code(A) :-
        (   chr_pp_flag(store_counter, on) ->
            A=[('$counter_init'(B):-nb_setval(B,0)),('$counter'(C,D):-nb_getval(C,D)),('$counter_inc'(E):-nb_getval(E,F),G is F+1,nb_setval(E,G)),(:-'$counter_init'('$insert_counter')),(:-'$counter_init'('$delete_counter')),('$insert_counter_inc':-'$counter_inc'('$insert_counter')),('$delete_counter_inc':-'$counter_inc'('$delete_counter')),(counter_stats(H,I):-'$counter'('$insert_counter',H),'$counter'('$delete_counter',I))]
        ;   A=[]
        ).
chr_module_declaration(A) :-
        get_target_module(B),
        (   B\==chr_translate,
            chr_pp_flag(toplevel_show_store, on) ->
            A=[(:-multifile chr:'$chr_module'/1),chr:'$chr_module'(B)]
        ;   A=[]
        ).
partition_clauses([], [], [], []).
partition_clauses([A|B], C, D, E) :-
        (   parse_rule(A, F) ->
            C=G,
            D=[F|H],
            E=I
        ;   is_declaration(A, J) ->
            append(J, G, C),
            D=H,
            E=I
        ;   is_module_declaration(A, K) ->
            target_module(K),
            C=G,
            D=H,
            E=[A|I]
        ;   is_type_definition(A) ->
            C=G,
            D=H,
            E=I
        ;   A=(handler _) ->
            chr_warning(deprecated(A), [['Backward compatibility: ignoring handler/1 declaration.'-[]]]),
            C=G,
            D=H,
            E=I
        ;   A=(rules _) ->
            chr_warning(deprecated(A), [['Backward compatibility: ignoring rules/1 declaration.'-[]]]),
            C=G,
            D=H,
            E=I
        ;   A=option(L,M) ->
            chr_warning(deprecated(A), [['Instead use :- chr_option(~w,~w).'-[L,M]]]),
            handle_option(L, M),
            C=G,
            D=H,
            E=I
        ;   A=(:-chr_option(L,M)) ->
            handle_option(L, M),
            C=G,
            D=H,
            E=I
        ;   C=G,
            D=H,
            E=[A|I]
        ),
        partition_clauses(B, G, H, I).
is_declaration(A, B) :-
        (   A=(:-C),
            C=..[D,E],
            D==(chr_constraint) ->
            conj2list(E, F)
        ;   (   A=(:-C) ->
                C=..[constraints,E]
            ;   A=..[constraints,E]
            ),
            conj2list(E, F),
            chr_warning(deprecated(A), [['Instead use :- chr_constraint ~w.'-[E]]])
        ),
        extract_type_mode(F, B).
extract_type_mode([], []).
extract_type_mode([A/B|C], [A/B|D]) :- !,
        extract_type_mode(C, D).
extract_type_mode([A|B], [C|D]) :-
        functor(A, E, F),
        C=E/F,
        A=..[_|G],
        extract_types_and_modes(G, H, I),
        constraint_type(E/F, H),
        constraint_mode(E/F, I),
        extract_type_mode(B, D).
extract_types_and_modes([], [], []).
extract_types_and_modes([+A|B], [A|C], [+|D]) :- !,
        extract_types_and_modes(B, C, D).
extract_types_and_modes([?A|B], [A|C], [?|D]) :- !,
        extract_types_and_modes(B, C, D).
extract_types_and_modes([-A|B], [A|C], [?|D]) :- !,
        extract_types_and_modes(B, C, D).
extract_types_and_modes([+|A], [any|B], [+|C]) :- !,
        extract_types_and_modes(A, B, C).
extract_types_and_modes([?|A], [any|B], [?|C]) :- !,
        extract_types_and_modes(A, B, C).
extract_types_and_modes([-|A], [any|B], [?|C]) :- !,
        extract_types_and_modes(A, B, C).
extract_types_and_modes([A|_], _, _) :-
        chr_error(syntax(A), [['Illegal mode/type declaration.'-[]],['\tCorrect syntax is +type, -type or ?type'-[]],['\tor +, - or ?.'-[]]]).
is_type_definition(A) :-
        (   A=(:-B) ->
            true
        ;   A=B
        ),
        B=..[chr_type,C],
        (   C=(D--->E) ->
            tdisj2list(E, F),
            type_definition(D, F)
        ;   C=(G==D) ->
            type_alias(G, D)
        ;   chr_warning(syntax, [['Illegal type definition "~w".'-[C]],['\tIgnoring this malformed type definition.'-[]]])
        ).
tdisj2list(A, B) :-
        tdisj2list(A, B, []).
tdisj2list(A, B, C) :-
        A=(D;E), !,
        tdisj2list(D, B, F),
        tdisj2list(E, F, C).
tdisj2list(A, [A|B], B).
parse_rule(A, B) :-
        A=(C@D), !,
        rule(D, yes(C), B).
parse_rule(A, B) :-
        rule(A, no, B).
rule(A, B, C) :-
        A=(D pragma E), !,
        (   var(E) ->
            F=[_]
        ;   conj2list(E, F)
        ),
        inc_rule_count(G),
        C=pragma(H,I,F,B,G),
        is_rule(D, H, I, C).
rule(A, B, C) :-
        inc_rule_count(D),
        C=pragma(E,F,[],B,D),
        is_rule(A, E, F, C).
is_rule(A, B, C, D) :-
        A=(E==>F), !,
        conj2list(E, G),
        get_ids(G, H, I, D),
        C=ids([],H),
        (   F=(J;K) ->
            B=rule([],I,J,K)
        ;   B=rule([],I,true,F)
        ).
is_rule(A, B, C, D) :-
        A=(E<=>F), !,
        (   F=(G;H) ->
            I=G,
            J=H
        ;   I=true,
            J=F
        ),
        (   E=(K\L) ->
            conj2list(K, M),
            conj2list(L, N),
            get_ids(M, O, P, 0, Q, D),
            get_ids(N, R, S, Q, _, D),
            C=ids(R,O)
        ;   conj2list(E, N),
            P=[],
            get_ids(N, R, S, D),
            C=ids(R,[])
        ),
        B=rule(S,P,I,J).
get_ids(A, B, C, D) :-
        get_ids(A, B, C, 0, _, D).
get_ids([], [], [], A, A, _).
get_ids([A|B], [C|D], [E|F], C, G, H) :-
        (   A=E#I ->
            (   var(I) ->
                I=C
            ;   check_direct_pragma(I, C, H)
            )
        ;   E=A
        ),
        J is C+1,
        get_ids(B, D, F, J, G, H).
direct_pragma(passive).
check_direct_pragma(passive, A, B) :-
        B=pragma(_,ids(_,_),_,_,C),
        passive(C, A).
check_direct_pragma(A, _, B) :-
        (   direct_pragma(C),
            atom_concat(A, _, C) ->
            chr_warning(problem_pragma(A,B), [['completed "~w" to "~w"'-[A,C]]])
        ;   chr_warning(unsupported_pragma(A,B), [])
        ).
is_module_declaration((:-module(A)), A).
is_module_declaration((:-module(A,_)), A).
add_constraints([]).
add_constraints([A|B]) :-
        max_occurrence(A, 0),
        A=_/C,
        length(D, C),
        set_elems(D, ?),
        constraint_mode(A, D),
        add_constraints(B).
add_rules([]).
add_rules([A|B]) :-
        A=pragma(_,_,_,_,C),
        rule(C, A),
        add_rules(B).
check_declared_constraints(A) :-
        check_declared_constraints(A, []).
check_declared_constraints([], _).
check_declared_constraints([A|B], C) :-
        (   memberchk_eq(A, C) ->
            chr_error(syntax(A), [['Constraint ~w multiply defined.'-[A]],['\tRemove redundant declaration!'-[]]])
        ;   true
        ),
        check_declared_constraints(B, [A|C]).
check_rules([], _).
check_rules([A|B], C) :-
        check_rule(A, C),
        check_rules(B, C).
check_rule(A, B) :-
        check_rule_indexing(A),
        check_trivial_propagation_rule(A),
        A=pragma(C,_,D,_,_),
        C=rule(E,F,_,_),
        append(E, F, G),
        check_head_constraints(G, B, A),
        check_pragmas(D, A).
check_trivial_propagation_rule(A) :-
        A=pragma(B,_,_,_,C),
        (   B=rule([],_,_,true) ->
            generate_format_rule(A, D, ['.'-[]]),
            chr_warning(weird_program, [['Ignoring propagation rule with empty body: '-[]|D]]),
            set_all_passive(C)
        ;   true
        ).
check_head_constraints([], _, _).
check_head_constraints([A|B], C, D) :-
        functor(A, E, F),
        (   member(E/F, C) ->
            check_head_constraints(B, C, D)
        ;   generate_format_rule(D, G, ['.'-[]]),
            chr_error(syntax(A), [['Undeclared constraint ~w in head of '-[E/F]|G],['\tConstraint should be one of ~w.'-[C]]])
        ).
check_pragmas([], _).
check_pragmas([A|B], C) :-
        check_pragma(A, C),
        check_pragmas(B, C).
check_pragma(A, B) :-
        var(A), !,
        generate_format_rule(B, C, ['.'-[]]),
        chr_error(syntax(A), [['Invalid pragma ~w in '-[A]|C],['\tPragma should not be a variable!'-[]]]).
check_pragma(passive(A), B) :- !,
        B=pragma(_,ids(C,D),_,_,E),
        (   memberchk_eq(A, C) ->
            true
        ;   memberchk_eq(A, D) ->
            true
        ;   generate_format_rule(B, F, ['.'-[]]),
            chr_error(syntax(A), [['Invalid identifier ~w in pragma passive in '-[A]|F]])
        ),
        passive(E, A).
check_pragma(A, B) :-
        A=already_in_heads, !,
        chr_warning(unsupported_pragma(A,B), [['Termination and correctness may be affected.'-[]]]).
check_pragma(A, B) :-
        A=already_in_head(_), !,
        chr_warning(unsupported_pragma(A,B), [['Termination and correctness may be affected.'-[]]]).
check_pragma(A, B) :-
        A=no_history, !,
        chr_warning(experimental, [['Experimental pragma no_history. Use with care!'-[]]]),
        B=pragma(_,_,_,_,C),
        no_history(C).
check_pragma(A, B) :-
        generate_format_rule(B, C, ['.'-[]]),
        chr_error(syntax(A), [['Invalid pragma ~w in '-[A]|C]]).
format_rule(A) :-
        A=pragma(_,_,_,B,C),
        (   B=yes(D) ->
            write('rule '),
            write(D)
        ;   write('rule number '),
            write(C)
        ).
check_rule_indexing(A) :-
        A=pragma(B,_,_,_,_),
        B=rule(C,D,E,_),
        chr_term_variables(C-D, F),
        remove_anti_monotonic_guards(E, F, G),
        check_indexing(C, G-D),
        check_indexing(D, G-C),
        (   chr_pp_flag(term_indexing, on) ->
            chr_term_variables(G, H),
            append(C, D, I),
            check_specs_indexing(I, H, _)
        ;   true
        ).
remove_anti_monotonic_guards(A, B, C) :-
        conj2list(A, D),
        remove_anti_monotonic_guard_list(D, B, E),
        list2conj(E, C).
remove_anti_monotonic_guard_list([], _, []).
remove_anti_monotonic_guard_list([A|B], C, D) :-
        (   A=var(E),
            memberchk_eq(E, C) ->
            D=F
        ;   A=functor(_,G,H),
            \+memberchk_eq(G,C),
            \+memberchk_eq(H,C) ->
            D=F
        ;   D=[A|F]
        ),
        remove_anti_monotonic_guard_list(B, C, F).
check_indexing([], _).
check_indexing([A|B], C) :-
        functor(A, D, E),
        A=..[_|F],
        chr_term_variables(B-C, G),
        check_indexing(F, 1, D/E, G),
        check_indexing(B, [A|C]).
check_indexing([], _, _, _).
check_indexing([A|B], C, D, E) :-
        (   is_indexed_argument(D, C) ->
            true
        ;   nonvar(A) ->
            indexed_argument(D, C)
        ;   chr_term_variables(B, F),
            append(F, E, G),
            (   memberchk_eq(A, G) ->
                indexed_argument(D, C)
            ;   true
            )
        ),
        H is C+1,
        chr_term_variables(A, I),
        append(I, E, J),
        check_indexing(B, H, D, J).
check_specs_indexing([], _, []).
check_specs_indexing([A|B], C, D) :-
        D=[E|F],
        chr_term_variables(B, G, C),
        check_spec_indexing(A, G, E),
        chr_term_variables(A, H, C),
        check_specs_indexing(B, H, F).
check_spec_indexing(A, B, C) :-
        functor(A, D, E),
        C=spec(D,E,F),
        A=..[_|G],
        check_args_spec_indexing(G, 1, B, F),
        indexing_spec(D/E, [F]).
check_args_spec_indexing([], _, _, []).
check_args_spec_indexing([A|B], C, D, E) :-
        chr_term_variables(B, F, D),
        (   check_arg_spec_indexing(A, C, F, G) ->
            E=[G|H]
        ;   E=H
        ),
        I is C+1,
        chr_term_variables(A, J, D),
        check_args_spec_indexing(B, I, J, H).
check_arg_spec_indexing(A, B, C, D) :-
        (   var(A) ->
            memberchk_eq(A, C),
            D=specinfo(B,any,[])
        ;   functor(A, E, F),
            D=specinfo(B,E/F,[G]),
            A=..[_|H],
            check_args_spec_indexing(H, 1, C, G)
        ).
add_occurrences([]).
add_occurrences([A|B]) :-
        A=pragma(rule(C,D,_,_),ids(E,F),_,_,G),
        add_occurrences(C, E, G),
        add_occurrences(D, F, G),
        add_occurrences(B).
add_occurrences([], [], _).
add_occurrences([A|B], [C|D], E) :-
        functor(A, F, G),
        H=F/G,
        new_occurrence(H, E, C),
        add_occurrences(B, D, E).
is_observed(A, B) :-
        is_self_observer(A),
        ai_is_observed(A, B).
observation_analysis(A) :-
        (   chr_pp_flag(observation_analysis, on) ->
            observation_analysis(A, A)
        ;   true
        ).
observation_analysis([], _).
observation_analysis([A|B], C) :-
        get_max_occurrence(A, D),
        observation_analysis_occurrences(A, 1, D, C),
        observation_analysis(B, C).
observation_analysis_occurrences(A, B, C, D) :-
        (   B>C ->
            true
        ;   observation_analysis_occurrence(A, B, D),
            E is B+1,
            observation_analysis_occurrences(A, E, C, D)
        ).
observation_analysis_occurrence(A, B, C) :-
        get_occurrence(A, B, D, E),
        (   is_passive(D, E) ->
            true
        ;   get_rule(D, F),
            F=pragma(rule(G,H,_,I),ids(J,K),_,_,_),
            (   select2(E, L, J, G, _, M) ->
                append(M, H, N)
            ;   select2(E, L, K, H, _, O) ->
                append(O, G, N)
            ),
            observe_heads(A, N),
            observe_body(A, I, C)
        ).
observe_heads(A, B) :-
        findall(C/D, (member(E,B),functor(E,C,D)), F),
        observe_all(A, F).
observe_all(A, B) :-
        (   B=[C|D] ->
            observes(A, C),
            observe_all(A, D)
        ;   true
        ).
spawn_all(A, B) :-
        (   B=[C|D] ->
            spawns_observer(A, C),
            spawn_all(A, D)
        ;   true
        ).
spawn_all_triggers(A, B) :-
        (   B=[C|D] ->
            (   may_trigger(C) ->
                spawns_observer(A, C)
            ;   true
            ),
            spawn_all_triggers(A, D)
        ;   true
        ).
observe_body(A, B, C) :-
        (   var(B) ->
            spawn_all(A, C)
        ;   B=true ->
            true
        ;   B=fail ->
            true
        ;   B=(D,E) ->
            observe_body(A, D, C),
            observe_body(A, E, C)
        ;   B=(D;E) ->
            observe_body(A, D, C),
            observe_body(A, E, C)
        ;   B=(D->E) ->
            observe_body(A, D, C),
            observe_body(A, E, C)
        ;   functor(B, F, G),
            member(F/G, C) ->
            spawns_observer(A, F/G)
        ;   B=(_=_) ->
            spawn_all_triggers(A, C)
        ;   B=(_ is _) ->
            spawn_all_triggers(A, C)
        ;   binds_b(B, H) ->
            (   H==[] ->
                true
            ;   spawn_all_triggers(A, C)
            )
        ;   spawn_all(A, C)
        ).
late_allocation_analysis(A) :-
        (   chr_pp_flag(late_allocation, on) ->
            late_allocation(A)
        ;   true
        ).
late_allocation([]).
late_allocation([A|B]) :-
        allocation_occurrence(A, 1),
        late_allocation(B).
generate_attach_detach_a_constraint_all([], []).
generate_attach_detach_a_constraint_all([A|B], C) :-
        (   (   chr_pp_flag(debugable, on)
            ;   is_stored(A),
                \+only_ground_indexed_arguments(A)
            ) ->
            generate_attach_a_constraint(A, D),
            generate_detach_a_constraint(A, E)
        ;   D=[],
            E=[]
        ),
        generate_attach_detach_a_constraint_all(B, F),
        append([D,E,F], C).
generate_attach_a_constraint(A, [B,C]) :-
        generate_attach_a_constraint_empty_list(A, B),
        get_max_constraint_index(D),
        (   D==1 ->
            generate_attach_a_constraint_1_1(A, C)
        ;   generate_attach_a_constraint_t_p(A, C)
        ).
generate_attach_a_constraint_skeleton(A, B, C, D) :-
        make_name(attach_, A, E),
        F=..[E|B],
        D=(F:-C).
generate_attach_a_constraint_empty_list(A, B) :-
        generate_attach_a_constraint_skeleton(A, [[],_], true, B).
generate_attach_a_constraint_1_1(A, B) :-
        C=[[D|E],F],
        generate_attach_a_constraint_skeleton(A, C, G, B),
        generate_attach_body_1(A, D, F, H),
        make_name(attach_, A, I),
        J=..[I,E,F],
        chr_pp_flag(solver_events, K),
        (   K\==none ->
            C=[[D|_],F],
            get_target_module(L),
            M=clp_events:subscribe(D,K,L,chr_runtime:'chr run_suspensions'([F]))
        ;   M=true
        ),
        G=(H,M,J).
generate_attach_body_1(_, A, B, C) :-
        get_target_module(D),
        attvar_call(get_attr(A,D,E), F),
        attvar_call(put_attr(A,D,[B|E]), G),
        attvar_call(put_attr(A,D,[B]), H),
        C=(F->G;H).
generate_attach_a_constraint_t_p(A, B) :-
        C=[[D|E],F],
        generate_attach_a_constraint_skeleton(A, C, G, B),
        make_name(attach_, A, H),
        I=..[H,E,F],
        generate_attach_body_n(A, D, F, J),
        chr_pp_flag(solver_events, K),
        (   K\==none ->
            C=[[D|_],F],
            get_target_module(L),
            M=clp_events:subscribe(D,K,L,chr_runtime:'chr run_suspensions'([F]))
        ;   M=true
        ),
        G=(J,M,I).
generate_attach_body_n(A/B, C, D, E) :-
        get_constraint_index(A/B, F),
        or_pattern(F, G),
        get_max_constraint_index(H),
        make_attr(H, I, J, K),
        nth(F, J, L),
        substitute(L, J, [D|L], M),
        make_attr(H, I, M, N),
        substitute(L, J, [D], O),
        make_attr(H, P, O, Q),
        copy_term(J, R),
        nth(F, R, [D]),
        chr_delete(R, [D], S),
        set_elems(S, []),
        make_attr(H, G, R, T),
        get_target_module(U),
        attvar_call(get_attr(C,U,V), W),
        attvar_call(put_attr(C,U,N), X),
        attvar_call(put_attr(C,U,Q), Y),
        attvar_call(put_attr(C,U,T), Z),
        E=(W->V=K,(I/\G=:=G->X;P is I\/G,Y);Z).
generate_detach_a_constraint(A, [B,C]) :-
        generate_detach_a_constraint_empty_list(A, B),
        get_max_constraint_index(D),
        (   D==1 ->
            generate_detach_a_constraint_1_1(A, C)
        ;   generate_detach_a_constraint_t_p(A, C)
        ).
generate_detach_a_constraint_empty_list(A, B) :-
        make_name(detach_, A, C),
        D=[[],_],
        E=..[C|D],
        B=(E:-true).
generate_detach_a_constraint_1_1(A, B) :-
        make_name(detach_, A, C),
        D=[[E|F],G],
        H=..[C|D],
        I=..[C,F,G],
        generate_detach_body_1(A, E, G, J),
        K=(J,I),
        B=(H:-K).
generate_detach_body_1(_, A, B, C) :-
        get_target_module(D),
        attvar_call(get_attr(A,D,E), F),
        attvar_call(del_attr(A,D), G),
        attvar_call(put_attr(A,D,H), I),
        chr_runtime_call('chr sbag_del_element'(E,B,H), J),
        C=(F->J,(H==[]->G;I);true).
generate_detach_a_constraint_t_p(A, B) :-
        make_name(detach_, A, C),
        D=[[E|F],G],
        H=..[C|D],
        I=..[C,F,G],
        generate_detach_body_n(A, E, G, J),
        K=(J,I),
        B=(H:-K).
generate_detach_body_n(A/B, C, D, E) :-
        get_constraint_index(A/B, F),
        or_pattern(F, G),
        and_pattern(F, H),
        get_max_constraint_index(I),
        make_attr(I, J, K, L),
        nth(F, K, M),
        substitute(M, K, [], N),
        make_attr(I, O, N, P),
        substitute(M, K, Q, R),
        make_attr(I, J, R, S),
        get_target_module(T),
        attvar_call(get_attr(C,T,U), V),
        attvar_call(del_attr(C,T), W),
        attvar_call(put_attr(C,T,P), X),
        attvar_call(put_attr(C,T,S), Y),
        chr_runtime_call('chr sbag_del_element'(M,D,Q), Z),
        E=(V->U=L,(J/\G=:=G->Z,(Q==[]->O is J/\H,(O==0->W;X);Y);true);true).
create_indexed_variables_body([], [], _, _, _, empty, 0).
create_indexed_variables_body([A|B], [C|D], E, F, G, H, I) :-
        J is F+1,
        create_indexed_variables_body(B, D, K, J, G, L, M),
        (   C\==(+),
            is_indexed_argument(G, F) ->
            (   L==empty ->
                hprolog_call(chr_term_variables(A,E), H)
            ;   hprolog_call(chr_term_variables(A,E,K), N),
                H=(N,L)
            ),
            I=M
        ;   E=K,
            H=L,
            I is M+1
        ).
spectermvars(A, B, C, D, E, F) :-
        spectermvars(B, 1, A, C, D, F, [], E).
spectermvars([], A, _, _, B, C, C, true) :-
        A>B, !.
spectermvars([A|B], C, D, E, F, G, H, I) :-
        I=(J,K),
        argspecs(D, C, L, M),
        merge_argspecs(L, N),
        arggoal(N, A, J, G, O),
        P is C+1,
        spectermvars(B, P, M, E, F, O, H, K).
argspecs([], _, [], []).
argspecs([[]|A], B, C, D) :-
        argspecs(A, B, C, D).
argspecs([[specinfo(A,B,C)|D]|E], F, G, H) :-
        (   F==A ->
            G=[specinfo(A,B,C)|I],
            (   D=[] ->
                J=H
            ;   H=[D|J]
            )
        ;   G=I,
            H=[[specinfo(A,B,C)|D]|J]
        ),
        argspecs(E, F, I, J).
merge_argspecs(A, B) :-
        sort(A, C),
        merge_argspecs_(C, B).
merge_argspecs_([], []).
merge_argspecs_([A], B) :- !,
        B=[A].
merge_argspecs_([specinfo(A,B,C),specinfo(A,D,E)|F], G) :-
        (   (   B==any
            ;   D==any
            ) ->
            merge_argspecs_([specinfo(A,any,[])|F], G)
        ;   B==D ->
            append(C, E, H),
            merge_argspecs_([specinfo(A,B,H)|F], G)
        ;   G=[specinfo(A,B,C)|I],
            merge_argspecs_([specinfo(A,D,E)|F], I)
        ).
arggoal(A, B, C, D, E) :-
        (   A==[] ->
            D=E,
            C=true
        ;   A=[specinfo(_,any,_)] ->
            hprolog_call(chr_term_variables(B,D,E), C)
        ;   C=(var(B)->D=[B|E];F),
            arggoal_cases(A, B, D, E, F)
        ).
arggoal_cases([], _, A, B, A=B).
arggoal_cases([specinfo(_,A,B)|C], D, E, F, G) :-
        (   B==[] ->
            G=H
        ;   B==[[]] ->
            G=H
        ;   A=I/J ->
            G=(K;H),
            functor(L, I, J),
            L=..[_|M],
            K=(D=L->N),
            spectermvars(M, 1, B, I, J, E, F, N)
        ),
        arggoal_cases(C, D, E, F, H).
generate_extra_clauses(A, B) :-
        generate_activate_clauses(A, B, C),
        generate_remove_clauses(A, C, D),
        generate_allocate_clauses(A, D, E),
        generate_insert_constraint_internal_clauses(A, E, F),
        generate_novel_production(F, G),
        generate_extend_history(G, H),
        generate_run_suspensions_clauses(A, H, I),
        I=[].
generate_remove_clauses([], A, A).
generate_remove_clauses([A|B], C, D) :-
        generate_remove_clause(A, C, E),
        generate_remove_clauses(B, E, D).
remove_constraint_goal(A, B, C, D, E) :-
        remove_constraint_name(A, F),
        (   chr_pp_flag(debugable, off),
            only_ground_indexed_arguments(A) ->
            E=..[F,B,D]
        ;   E=..[F,B,C,D]
        ).
remove_constraint_name(A, B) :-
        make_name('$remove_constraint_internal_', A, B).
generate_remove_clause(A, B, C) :-
        (   is_used_auxiliary_predicate(remove_constraint_internal, A) ->
            B=[D|C],
            remove_constraint_goal(A, E, F, G, H),
            static_suspension_term(A, E),
            get_static_suspension_term_field(state, A, E, I),
            (   chr_pp_flag(debugable, off),
                only_ground_indexed_arguments(A) ->
                chr_runtime_call('chr get_mutable'(J,I), K),
                chr_runtime_call('chr update_mutable'(removed,I), L),
                D=(H:-K,L,(J==not_stored_yet->G=no;G=yes))
            ;   get_static_suspension_term_field(arguments, A, E, M),
                generate_indexed_variables_body(A, M, N, F),
                (   chr_pp_flag(debugable, on) ->
                    A=O/_,
                    get_static_suspension_term_field(functor, A, E, O)
                ;   true
                ),
                chr_runtime_call('chr get_mutable'(J,I), K),
                chr_runtime_call('chr update_mutable'(removed,I), L),
                D=(H:-K,L,(J==not_stored_yet->F=[],G=no;G=yes,N))
            )
        ;   B=C
        ).
generate_activate_clauses([], A, A).
generate_activate_clauses([A|B], C, D) :-
        generate_activate_clause(A, C, E),
        generate_activate_clauses(B, E, D).
activate_constraint_goal(A, B, C, D, E, F) :-
        activate_constraint_name(A, G),
        (   chr_pp_flag(debugable, off),
            only_ground_indexed_arguments(A) ->
            F=..[G,B,D]
        ;   chr_pp_flag(debugable, off),
            may_trigger(A) ->
            F=..[G,B,C,D,E]
        ;   F=..[G,B,C,D]
        ).
activate_constraint_name(A, B) :-
        make_name('$activate_constraint_', A, B).
generate_activate_clause(A, B, C) :-
        (   is_used_auxiliary_predicate(activate_constraint, A) ->
            B=[D|C],
            get_dynamic_suspension_term_field(state, A, E, F, G),
            activate_constraint_goal(A, H, I, E, J, K),
            (   chr_pp_flag(debugable, off),
                may_trigger(A) ->
                get_dynamic_suspension_term_field(generation, A, E, L, M),
                chr_runtime_call('chr get_mutable'(N,L), O),
                chr_runtime_call('chr update_mutable'(J,L), P),
                Q=(M,O,J is N+1,P)
            ;   Q=true
            ),
            (   chr_pp_flag(debugable, off),
                only_ground_indexed_arguments(A) ->
                R=(S==not_stored_yet->H=yes;H=no)
            ;   get_dynamic_suspension_term_field(arguments, A, E, T, U),
                generate_indexed_variables_body(A, T, V, I),
                chr_runtime_call('chr none_locked'(I), W),
                R=(S==not_stored_yet->H=yes,U,V,W;I=[],H=no)
            ),
            chr_runtime_call('chr get_mutable'(S,F), X),
            chr_runtime_call('chr update_mutable'(active,F), Y),
            D=(K:-G,X,Y,Q,R)
        ;   B=C
        ).
generate_allocate_clauses([], A, A).
generate_allocate_clauses([A|B], C, D) :-
        generate_allocate_clause(A, C, E),
        generate_allocate_clauses(B, E, D).
allocate_constraint_goal(A, B, C, _, D, E) :-
        allocate_constraint_name(A, F),
        (   chr_pp_flag(debugable, off),
            may_trigger(A) ->
            E=..[F,B,C|D]
        ;   E=..[F,C|D]
        ).
allocate_constraint_name(A, B) :-
        make_name('$allocate_constraint_', A, B).
generate_allocate_clause(A, B, C) :-
        (   is_used_auxiliary_predicate(allocate_constraint, A) ->
            B=[D|C],
            A=E/F,
            length(G, F),
            allocate_constraint_goal(A, H, I, E, G, J),
            static_suspension_term(A, K),
            get_static_suspension_term_field(id, A, K, L),
            get_static_suspension_term_field(state, A, K, M),
            (   chr_pp_flag(debugable, on)
            ;   may_trigger(A) ->
                get_static_suspension_term_field(continuation, A, K, H),
                get_static_suspension_term_field(generation, A, K, N),
                chr_runtime_call('chr create_mutable'(0,N), O)
            ;   O=true
            ),
            (   chr_pp_flag(debugable, on) ->
                A=P/_,
                get_static_suspension_term_field(functor, A, K, P)
            ;   true
            ),
            (   uses_history(A) ->
                empty_ds(Q),
                get_static_suspension_term_field(history, A, K, R),
                chr_runtime_call('chr create_mutable'(Q,R), S)
            ;   S=true
            ),
            get_static_suspension_term_field(arguments, A, K, G),
            I=K,
            chr_runtime_call('chr create_mutable'(not_stored_yet,M), T),
            chr_runtime_call('chr gen_id'(L), U),
            D=(J:-O,S,T,U)
        ;   B=C
        ).
generate_insert_constraint_internal_clauses([], A, A).
generate_insert_constraint_internal_clauses([A|B], C, D) :-
        generate_insert_constraint_internal_clause(A, C, E),
        generate_insert_constraint_internal_clauses(B, E, D).
insert_constraint_internal_constraint_goal(A, B, C, D, E, _, F, G) :-
        insert_constraint_internal_constraint_name(A, H),
        (   (   chr_pp_flag(debugable, on)
            ;   may_trigger(A)
            ) ->
            G=..[H,B,C,D,E|F]
        ;   only_ground_indexed_arguments(A) ->
            G=..[H,D|F]
        ;   G=..[H,B,C,D|F]
        ).
insert_constraint_internal_constraint_name(A, B) :-
        make_name('$insert_constraint_internal_', A, B).
generate_insert_constraint_internal_clause(A, B, C) :-
        (   is_used_auxiliary_predicate(insert_constraint_internal, A) ->
            A=D/E,
            length(F, E),
            insert_constraint_internal_constraint_goal(A, yes, G, H, I, D, F, J),
            static_suspension_term(A, K),
            get_static_suspension_term_field(id, A, K, L),
            get_static_suspension_term_field(state, A, K, M),
            (   (   chr_pp_flag(debugable, on)
                ;   may_trigger(A)
                ) ->
                get_static_suspension_term_field(continuation, A, K, I),
                get_static_suspension_term_field(generation, A, K, N),
                chr_runtime_call('chr create_mutable'(0,N), O)
            ;   O=true
            ),
            (   chr_pp_flag(debugable, on) ->
                A=P/_,
                get_static_suspension_term_field(functor, A, K, P)
            ;   true
            ),
            (   uses_history(A) ->
                empty_ds(Q),
                get_static_suspension_term_field(history, A, K, R),
                chr_runtime_call('chr create_mutable'(Q,R), S)
            ;   S=true
            ),
            get_static_suspension_term_field(arguments, A, K, F),
            H=K,
            B=[T|C],
            (   chr_pp_flag(debugable, off),
                only_ground_indexed_arguments(A) ->
                I=true,
                chr_runtime_call('chr create_mutable'(active,M), U),
                chr_runtime_call('chr gen_id'(L), V),
                T=(J:-U,O,S,V)
            ;   generate_indexed_variables_body(A, F, W, G),
                chr_runtime_call('chr create_mutable'(active,M), U),
                chr_runtime_call('chr create_mutable'(0,N), X),
                chr_runtime_call('chr gen_id'(L), V),
                chr_runtime_call('chr none_locked'(G), Y),
                T=(J:-W,Y,U,X,S,V)
            )
        ;   B=C
        ).
generate_novel_production(A, B) :-
        (   is_used_auxiliary_predicate(novel_production) ->
            A=[C|B],
            chr_runtime_call('chr get_mutable'(D,E), F),
            C=('$novel_production'(G,H):-arg(3,G,E),F,(hprolog:get_ds(H,D,_)->fail;true))
        ;   A=B
        ).
generate_extend_history(A, B) :-
        (   is_used_auxiliary_predicate(extend_history) ->
            A=[C|B],
            chr_runtime_call('chr get_mutable'(D,E), F),
            chr_runtime_call('chr update_mutable'(G,E), H),
            C=('$extend_history'(I,J):-arg(3,I,E),F,hprolog:put_ds(J,D,x,G),H)
        ;   A=B
        ).
generate_run_suspensions_clauses([], A, A).
generate_run_suspensions_clauses([A|B], C, D) :-
        generate_run_suspensions_clause(A, C, E),
        generate_run_suspensions_clauses(B, E, D).
run_suspensions_goal(A, B, C) :-
        run_suspensions_name(A, D),
        C=..[D,B].
run_suspensions_name(A, B) :-
        make_name('$run_suspensions_', A, B).
generate_run_suspensions_clause(A, B, C) :-
        (   is_used_auxiliary_predicate(run_suspensions, A) ->
            B=[D,E|C],
            run_suspensions_goal(A, [], D),
            (   chr_pp_flag(debugable, on) ->
                run_suspensions_goal(A, [F|G], H),
                get_dynamic_suspension_term_field(state, A, F, I, J),
                get_dynamic_suspension_term_field(generation, A, F, K, L),
                get_dynamic_suspension_term_field(continuation, A, F, M, N),
                run_suspensions_goal(A, G, O),
                chr_runtime_call('chr get_mutable'(P,I), Q),
                chr_runtime_call('chr update_mutable'(triggered,I), R),
                chr_runtime_call('chr get_mutable'(S,K), T),
                chr_runtime_call('chr update_mutable'(U,K), V),
                chr_runtime_call('chr get_mutable'(W,I), X),
                chr_runtime_call('chr update_mutable'(active,I), Y),
                chr_runtime_call('chr debug_event'(wake(F)), Z),
                chr_runtime_call('chr debug_event'(fail(F)), A1),
                chr_runtime_call('chr debug_event'(exit(F)), B1),
                chr_runtime_call('chr debug_event'(redo(F)), C1),
                E=(H:-J,Q,(P==active->R,L,T,U is S+1,V,N,(Z,call(M);A1,!,fail),(B1;C1,fail),X,(W==triggered->Y;true);true),O)
            ;   run_suspensions_goal(A, [F|G], H),
                get_dynamic_suspension_term_field(state, A, F, I, J),
                get_dynamic_suspension_term_field(generation, A, F, K, L),
                get_dynamic_suspension_term_field(continuation, A, F, M, N),
                run_suspensions_goal(A, G, O),
                chr_runtime_call('chr get_mutable'(P,I), Q),
                chr_runtime_call('chr update_mutable'(triggered,I), R),
                chr_runtime_call('chr get_mutable'(S,K), T),
                chr_runtime_call('chr update_mutable'(U,K), V),
                chr_runtime_call('chr get_mutable'(W,I), X),
                chr_runtime_call('chr update_mutable'(active,I), Y),
                E=(H:-J,Q,(P==active->R,L,T,U is S+1,V,N,call(M),X,(W==triggered->Y;true);true),O)
            )
        ;   B=C
        ).
generate_attach_increment(A) :-
        get_max_constraint_index(B),
        (   B>0 ->
            A=[C,D],
            generate_attach_increment_empty(C),
            (   B==1 ->
                generate_attach_increment_one(D)
            ;   generate_attach_increment_many(B, D)
            )
        ;   A=[]
        ).
generate_attach_increment_empty((attach_increment([],_):-true)).
generate_attach_increment_one(A) :-
        B=attach_increment([C|D],E),
        get_target_module(F),
        attvar_call(get_attr(C,F,G), H),
        attvar_call(put_attr(C,F,I), J),
        attvar_call(put_attr(C,F,E), K),
        chr_runtime_call('chr not_locked'(C), L),
        chr_runtime_call('chr merge_attributes'(E,M,I), N),
        O=(L,(H->sort(G,M),N,J;K),attach_increment(D,E)),
        A=(B:-O).
generate_attach_increment_many(A, B) :-
        make_attr(A, C, D, E),
        make_attr(A, F, G, H),
        I=attach_increment([J|K],E),
        bagof(L, M^N^O^P^Q^(member2(D,G,M-N),chr_runtime_call('chr merge_attributes'(M,O,P),Q),L=(sort(N,O),Q)), R),
        list2conj(R, S),
        bagof(T, U^V^W^X^(chr_runtime_call('chr merge_attributes'(V,W,T),X),member((U,X),R)), Y),
        make_attr(A, Z, Y, A1),
        get_target_module(B1),
        attvar_call(get_attr(J,B1,C1), D1),
        attvar_call(put_attr(J,B1,A1), E1),
        attvar_call(put_attr(J,B1,E), F1),
        chr_runtime_call('chr not_locked'(J), G1),
        H1=(G1,(D1->C1=H,S,Z is C\/F,E1;F1),attach_increment(K,E)),
        B=(I:-H1).
generate_attr_unify_hook(A) :-
        get_max_constraint_index(B),
        (   B==0 ->
            A=[]
        ;   A=[C],
            (   B==1 ->
                generate_attr_unify_hook_one(C)
            ;   generate_attr_unify_hook_many(B, C)
            )
        ).
generate_attr_unify_hook_one(A) :-
        B=attr_unify_hook(C,D),
        get_target_module(E),
        make_run_suspensions(F, G),
        make_run_suspensions(C, H),
        attvar_call(get_attr(D,E,I), J),
        attvar_call(put_attr(D,E,F), K),
        chr_runtime_call('chr merge_attributes'(L,M,F), N),
        hprolog_call(chr_term_variables(D,O), P),
        Q=(sort(C,L),(var(D)->(J->true;I=[]),sort(I,M),N,K,G;(compound(D)->P,attach_increment(O,L);true),H)),
        A=(B:-Q).
generate_attr_unify_hook_many(A, B) :-
        make_attr(A, C, D, E),
        make_attr(A, F, G, H),
        bagof(I, J^K^(member(J,D),I=sort(J,K)), L),
        list2conj(L, M),
        bagof(K, J^member(sort(J,K),L), N),
        bagof(O, P^Q^R^S^T^(member2(N,G,P-Q),chr_runtime_call('chr merge_attributes'(P,R,S),T),O=(sort(Q,R),T)), U),
        bagof(S, P^R^V^W^(chr_runtime_call('chr merge_attributes'(P,R,S),W),member((V,W),U)), X),
        list2conj(U, Y),
        make_attr(A, Z, X, A1),
        make_attr(A, C, N, B1),
        C1=attr_unify_hook(E,D1),
        get_target_module(E1),
        make_run_suspensions_loop(X, F1),
        make_run_suspensions_loop(N, G1),
        attvar_call(get_attr(D1,E1,H1), I1),
        attvar_call(put_attr(D1,E1,A1), J1),
        attvar_call(put_attr(D1,E1,B1), K1),
        hprolog_call(chr_term_variables(D1,L1), M1),
        N1=(M,(var(D1)->(I1->H1=H,Y,Z is C\/F,J1,F1;K1,G1);(compound(D1)->M1,attach_increment(L1,B1);true),G1)),
        B=(C1:-N1).
make_run_suspensions(A, B) :-
        make_run_suspensions(1, A, B).
make_run_suspensions(A, B, C) :-
        (   get_indexed_constraint(A, D),
            may_trigger(D) ->
            use_auxiliary_predicate(run_suspensions, D),
            run_suspensions_goal(D, B, C)
        ;   C=true
        ).
make_run_suspensions_loop(A, B) :-
        make_run_suspensions_loop(A, 1, B).
make_run_suspensions_loop([], _, true).
make_run_suspensions_loop([A|B], C, (D,E)) :-
        make_run_suspensions(C, A, D),
        F is C+1,
        make_run_suspensions_loop(B, F, E).
generate_insert_delete_constraints([], []).
generate_insert_delete_constraints([A|B], C) :-
        (   is_stored(A) ->
            C=[D,E|F],
            generate_insert_delete_constraint(A, D, E)
        ;   C=F
        ),
        generate_insert_delete_constraints(B, F).
generate_insert_delete_constraint(A, B, C) :-
        get_store_type(A, D),
        generate_insert_constraint(D, A, B),
        generate_delete_constraint(D, A, C).
generate_insert_constraint(A, B, C) :-
        make_name('$insert_in_store_', B, D),
        E=..[D,F],
        generate_insert_constraint_body(A, B, F, G),
        (   chr_pp_flag(store_counter, on) ->
            H='$insert_counter_inc'
        ;   H=true
        ),
        C=(E:-H,G).
generate_insert_constraint_body(default, A, B, C) :-
        global_list_store_name(A, D),
        make_get_store_goal(D, E, F),
        make_update_store_goal(D, [B|E], G),
        C=(F,G).
generate_insert_constraint_body(multi_inthash(A), B, C, D) :-
        generate_multi_inthash_insert_constraint_bodies(A, B, C, D).
generate_insert_constraint_body(multi_hash(A), B, C, D) :-
        generate_multi_hash_insert_constraint_bodies(A, B, C, D).
generate_insert_constraint_body(global_ground, A, B, C) :-
        global_ground_store_name(A, D),
        make_get_store_goal(D, E, F),
        make_update_store_goal(D, [B|E], G),
        C=(F,G).
generate_insert_constraint_body(global_singleton, A, B, C) :-
        global_singleton_store_name(A, D),
        make_update_store_goal(D, B, E),
        C=E.
generate_insert_constraint_body(multi_store(A), B, C, D) :-
        find_with_var_identity(E, [C], (member(F,A),chr_translate:generate_insert_constraint_body(F,B,C,E)), G),
        list2conj(G, D).
generate_multi_hash_insert_constraint_bodies([], _, _, true).
generate_multi_hash_insert_constraint_bodies([A|B], C, D, (E,F)) :-
        multi_hash_store_name(C, A, G),
        multi_hash_key(C, A, D, H, I),
        make_get_store_goal(G, J, K),
        E=(H,K,chr_hashtable_store:insert_ht(J,I,D)),
        generate_multi_hash_insert_constraint_bodies(B, C, D, F).
generate_delete_constraint(A, B, C) :-
        make_name('$delete_from_store_', B, D),
        E=..[D,F],
        generate_delete_constraint_body(A, B, F, G),
        (   chr_pp_flag(store_counter, on) ->
            H='$delete_counter_inc'
        ;   H=true
        ),
        C=(E:-H,G).
generate_delete_constraint_body(default, A, B, C) :-
        global_list_store_name(A, D),
        make_get_store_goal(D, E, F),
        make_update_store_goal(D, G, H),
        chr_runtime_call('chr sbag_del_element'(E,B,G), I),
        C=(F,I,H).
generate_delete_constraint_body(multi_inthash(A), B, C, D) :-
        generate_multi_inthash_delete_constraint_bodies(A, B, C, D).
generate_delete_constraint_body(multi_hash(A), B, C, D) :-
        generate_multi_hash_delete_constraint_bodies(A, B, C, D).
generate_delete_constraint_body(global_ground, A, B, C) :-
        global_ground_store_name(A, D),
        make_get_store_goal(D, E, F),
        make_update_store_goal(D, G, H),
        chr_runtime_call('chr sbag_del_element'(E,B,G), I),
        C=(F,I,H).
generate_delete_constraint_body(global_singleton, A, _, B) :-
        global_singleton_store_name(A, C),
        make_update_store_goal(C, [], D),
        B=D.
generate_delete_constraint_body(multi_store(A), B, C, D) :-
        find_with_var_identity(E, [C], (member(F,A),chr_translate:generate_delete_constraint_body(F,B,C,E)), G),
        list2conj(G, D).
generate_multi_hash_delete_constraint_bodies([], _, _, true).
generate_multi_hash_delete_constraint_bodies([A|B], C, D, (E,F)) :-
        multi_hash_store_name(C, A, G),
        multi_hash_key(C, A, D, H, I),
        make_get_store_goal(G, J, K),
        E=(H,K,chr_hashtable_store:delete_ht(J,I,D)),
        generate_multi_hash_delete_constraint_bodies(B, C, D, F).
generate_delete_constraint_call(A, B, C) :-
        make_name('$delete_from_store_', A, D),
        C=..[D,B].
generate_insert_constraint_call(A, B, C) :-
        make_name('$insert_in_store_', A, D),
        C=..[D,B].
generate_attach_code(A, [B|C]) :-
        enumerate_stores_code(A, B),
        generate_attach_code(A, C, D),
        module_initializers(E),
        prolog_global_variables_code(F),
        D=[('$chr_initialization':-E),(:-'$chr_initialization')|F].
generate_attach_code([], A, A).
generate_attach_code([A|B], C, D) :-
        get_store_type(A, E),
        generate_attach_code(E, A, C, F),
        generate_attach_code(B, F, D).
generate_attach_code(default, A, B, C) :-
        global_list_store_initialisation(A, B, C).
generate_attach_code(multi_inthash(A), B, C, D) :-
        multi_inthash_store_initialisations(A, B, C, E),
        multi_inthash_via_lookups(A, B, E, D).
generate_attach_code(multi_hash(A), B, C, D) :-
        multi_hash_store_initialisations(A, B, C, E),
        multi_hash_via_lookups(A, B, E, D).
generate_attach_code(global_ground, A, B, C) :-
        global_ground_store_initialisation(A, B, C).
generate_attach_code(global_singleton, A, B, C) :-
        global_singleton_store_initialisation(A, B, C).
generate_attach_code(multi_store(A), B, C, D) :-
        multi_store_generate_attach_code(A, B, C, D).
multi_store_generate_attach_code([], _, A, A).
multi_store_generate_attach_code([A|B], C, D, E) :-
        generate_attach_code(A, C, D, F),
        multi_store_generate_attach_code(B, C, F, E).
multi_hash_store_initialisations([], _, A, A).
multi_hash_store_initialisations([A|B], C, D, E) :-
        multi_hash_store_name(C, A, F),
        prolog_global_variable(F),
        make_init_store_goal(F, G, H),
        module_initializer((chr_hashtable_store:new_ht(G),H)),
        I=D,
        multi_hash_store_initialisations(B, C, I, E).
global_list_store_initialisation(A, B, C) :-
        global_list_store_name(A, D),
        prolog_global_variable(D),
        make_init_store_goal(D, [], E),
        module_initializer(E),
        B=C.
global_ground_store_initialisation(A, B, C) :-
        global_ground_store_name(A, D),
        prolog_global_variable(D),
        make_init_store_goal(D, [], E),
        module_initializer(E),
        B=C.
global_singleton_store_initialisation(A, B, C) :-
        global_singleton_store_name(A, D),
        prolog_global_variable(D),
        make_init_store_goal(D, [], E),
        module_initializer(E),
        B=C.
multi_hash_via_lookups([], _, A, A).
multi_hash_via_lookups([A|B], C, D, E) :-
        multi_hash_via_lookup_name(C, A, F),
        G=..[F,H,I],
        multi_hash_store_name(C, A, J),
        make_get_store_goal(J, K, L),
        M=(L,chr_hashtable_store:lookup_ht(K,H,I)),
        D=[(G:-M)|N],
        multi_hash_via_lookups(B, C, N, E).
multi_hash_via_lookup_name(A/B, C, D) :-
        (   integer(C) ->
            E=C
        ;   is_list(C) ->
            atom_concat_list(C, E)
        ),
        atom_concat_list(['$via1_multi_hash_',A,/,B,-,E], D).
multi_hash_store_name(A/B, C, D) :-
        get_target_module(E),
        (   integer(C) ->
            F=C
        ;   is_list(C) ->
            atom_concat_list(C, F)
        ),
        atom_concat_list(['$chr_store_multi_hash_',E,:,A,/,B,-,F], D).
multi_hash_key(A/B, C, D, E, F) :-
        (   (   integer(C) ->
                G=C
            ;   C=[G]
            ) ->
            get_dynamic_suspension_term_field(argument(G), A/B, D, F, E)
        ;   is_list(C) ->
            sort(C, H),
            find_with_var_identity(I-J, [D], (member(G,H),get_dynamic_suspension_term_field(argument(G),A/B,D,J,I)), K),
            once(pairup(L,M,K)),
            F=..[k|M],
            list2conj(L, E)
        ).
multi_hash_key_args(A, B, C) :-
        (   integer(A) ->
            arg(A, B, D),
            C=[D]
        ;   is_list(A) ->
            sort(A, E),
            chr_term_variables(B, F),
            find_with_var_identity(D, F, (member(G,E),arg(G,B,D)), C)
        ).
global_list_store_name(A/B, C) :-
        get_target_module(D),
        atom_concat_list(['$chr_store_global_list_',D,:,A,/,B], C).
global_ground_store_name(A/B, C) :-
        get_target_module(D),
        atom_concat_list(['$chr_store_global_ground_',D,:,A,/,B], C).
global_singleton_store_name(A/B, C) :-
        get_target_module(D),
        atom_concat_list(['$chr_store_global_singleton_',D,:,A,/,B], C).
prolog_global_variables_code([]).
sbag_member_call(A, B, member(A,B)).
enumerate_stores_code(A, B) :-
        C='$enumerate_constraints'(D),
        enumerate_store_bodies(A, D, E),
        list2disj(E, F),
        B=(C:-F).
enumerate_store_bodies([], _, []).
enumerate_store_bodies([A|B], C, D) :-
        (   is_stored(A) ->
            get_store_type(A, E),
            enumerate_store_body(E, A, F, G),
            get_dynamic_suspension_term_field(arguments, A, F, H, I),
            A=J/_,
            K=(G,I,C=..[J|H]),
            D=[K|L]
        ;   D=L
        ),
        enumerate_store_bodies(B, C, L).
enumerate_store_body(default, A, B, C) :-
        global_list_store_name(A, D),
        sbag_member_call(B, E, F),
        make_get_store_goal(D, E, G),
        C=(G,F).
enumerate_store_body(multi_inthash([A|_]), B, C, D) :-
        multi_inthash_enumerate_store_body(A, B, C, D).
enumerate_store_body(multi_hash([A|_]), B, C, D) :-
        multi_hash_enumerate_store_body(A, B, C, D).
enumerate_store_body(global_ground, A, B, C) :-
        global_ground_store_name(A, D),
        sbag_member_call(B, E, F),
        make_get_store_goal(D, E, G),
        C=(G,F).
enumerate_store_body(global_singleton, A, B, C) :-
        global_singleton_store_name(A, D),
        make_get_store_goal(D, B, E),
        C=(E,B\==[]).
enumerate_store_body(multi_store(A), B, C, D) :-
        once((member(E,A),enumerate_store_body(E,B,C,D))).
multi_hash_enumerate_store_body(A, B, C, D) :-
        multi_hash_store_name(B, A, E),
        make_get_store_goal(E, F, G),
        D=(G,chr_hashtable_store:value_ht(F,C)).
guard_simplification :-
        (   chr_pp_flag(guard_simplification, on) ->
            multiple_occ_constraints_checked([]),
            simplify_guards(1)
        ;   true
        ).
add_type_information_(_, [], true) :- !.
add_type_information_(A, [B|C], D) :- !,
        add_type_information(A, B, E),
        D=(E,F),
        add_type_information_(A, C, F).
compute_derived_info(_, [], _, _, _, _, _, _, [], []) :- !.
compute_derived_info(A, [B|C], D, E, F, G, H, I, J, K) :- !,
        copy_term(A-F, L),
        variable_replacement(A-F, L, M),
        append(B, M, N),
        list2conj(A, O),
        negate_b(O, P),
        make_head_matchings_explicit_not_negated2(E, D, Q),
        list2conj(Q, R),
        chr_term_variables(N, S),
        chr_term_variables(A-F-Q, T),
        new_vars(T, S, U),
        append(N, U, V),
        negate_b(F, W),
        (   F==true ->
            X=P
        ;   X=(P;R,W)
        ),
        copy_with_variable_replacement(X, Y, V),
        copy_with_variable_replacement(F, Z, V),
        copy_with_variable_replacement(A, A1, V),
        list2conj(A1, B1),
        add_guard_to_head(H, Z, C1),
        add_guard_to_head(C1, B1, D1),
        compute_derived_info(A, C, D, E, F, G, H, I, E1, F1),
        append([Y], E1, J),
        append([D1], F1, K).
simplify_guard(A, B, C, D, E) :-
        conj2list(A, F),
        guard_entailment:simplify_guards(C, B, F, G, E),
        list2conj(G, D).
new_vars([], _, []).
new_vars([A|B], C, D) :-
        (   memberchk_eq(A, C) ->
            new_vars(B, C, D)
        ;   D=[A-E,E-A|F],
            new_vars(B, C, F)
        ).
head_subset(A, B, C) :-
        head_subset(A, B, C, [], _).
head_subset([], A, B, C, D) :- !,
        B=C,
        D=A.
head_subset([A|B], C, D, E, F) :- !,
        head_subset(A, C, G, E, H),
        head_subset(B, H, I, G, J),
        D=I,
        F=J.
head_subset(A, [B|C], D, E, F) :- !,
        (   head_subset(A, B, G, E, _),
            D=G,
            F=C
        ;   head_subset(A, C, H, E, I),
            D=H,
            F=[B|I]
        ).
head_subset(A, B, C, D, E) :-
        variable_replacement(A, B, D, C),
        E=[].
make_head_matchings_explicit(A, B, C) :-
        extract_variables(A, D),
        make_matchings_explicit(D, E, [], [], _, C),
        insert_variables(E, A, B).
make_head_matchings_explicit_not_negated(A, B, C) :-
        extract_variables(A, D),
        make_matchings_explicit_not_negated(D, E, [], C),
        insert_variables(E, A, B).
make_head_matchings_explicit_not_negated2(A, B, C) :-
        extract_variables(A, D),
        extract_variables(B, E),
        make_matchings_explicit_not_negated(D, E, [], C).
extract_variables([], []).
extract_variables([A|B], C) :-
        A=..[_|D],
        extract_variables(B, E),
        append(D, E, C).
insert_variables([], [], []) :- !.
insert_variables(A, [B|C], [D|E]) :-
        B=..[F|G],
        length(G, H),
        take_first_N(A, H, I, J),
        D=..[F|I],
        insert_variables(J, C, E).
take_first_N(A, 0, [], A) :- !.
take_first_N([A|B], C, [A|D], E) :-
        F is C-1,
        take_first_N(B, F, D, E).
make_matchings_explicit([], [], _, A, A, []).
make_matchings_explicit([A|B], [C|D], E, F, G, H) :-
        (   var(A) ->
            (   memberchk_eq(A, E) ->
                list2disj(F, I),
                H=[(I;C==A)|J],
                K=E
            ;   H=J,
                C=A,
                K=[A|E]
            ),
            L=F
        ;   functor(A, M, N),
            A=..[M|O],
            make_matchings_explicit(O, P, E, F, Q, R),
            S=..[M|P],
            (   R==[] ->
                H=[functor(C,M,N)|J]
            ;   list2conj(R, T),
                list2disj(F, I),
                U=(C\=S;I;T),
                H=[functor(C,M,N),U|J]
            ),
            L=[C\=S|Q],
            chr_term_variables(O, V),
            append(E, V, K)
        ),
        make_matchings_explicit(B, D, K, L, G, J).
make_matchings_explicit_not_negated([], [], _, []).
make_matchings_explicit_not_negated([A|B], [C|D], E, F) :-
        F=[C=A|G],
        H=E,
        make_matchings_explicit_not_negated(B, D, H, G).
add_guard_to_head([], _, []).
add_guard_to_head([A|B], C, [D|E]) :-
        (   var(A) ->
            find_guard_info_for_var(A, C, D)
        ;   functor(A, F, _),
            A=..[F|G],
            add_guard_to_head(G, C, H),
            D=..[F|H]
        ),
        add_guard_to_head(B, C, E).
find_guard_info_for_var(A, (B,C), D) :- !,
        find_guard_info_for_var(A, B, E),
        find_guard_info_for_var(E, C, D).
find_guard_info_for_var(A, B, C) :-
        (   B=(D=E),
            A==D ->
            C=E
        ;   B=functor(F,G,H),
            A==F,
            ground(G),
            ground(H) ->
            length(I, H),
            C=..[G|I]
        ;   C=A
        ).
replace_some_heads(A, B, _, [], A, B, _, _, []) :- !.
replace_some_heads([], [A|B], [C|D], [E|F], [], [G|H], I, J, K) :- !,
        (   C==E ->
            G=E,
            replace_some_heads([], B, D, F, [], H, I, J, K)
        ;   E=functor(L,M,N),
            C==L ->
            length(O, N),
            (   var(A) ->
                P=[],
                G=..[M|O]
            ;   A=..[M|Q],
                use_same_args(Q, O, R, I, J, P),
                G=..[M|R]
            ),
            replace_some_heads([], B, D, F, [], H, I, J, S),
            append(P, S, K)
        ;   G=A,
            replace_some_heads([], B, D, [E|F], [], H, I, J, K)
        ).
replace_some_heads([A|B], C, [D|E], [F|G], [H|I], J, K, L, M) :- !,
        (   D==F ->
            H=F,
            replace_some_heads(B, C, E, G, I, J, K, L, M)
        ;   F=functor(N,O,P),
            D==N ->
            length(Q, P),
            (   var(A) ->
                R=[],
                H=..[O|Q]
            ;   A=..[O|S],
                use_same_args(S, Q, T, K, L, R),
                H=..[O|T]
            ),
            replace_some_heads(B, C, E, G, I, J, K, L, U),
            append(R, U, M)
        ;   H=A,
            replace_some_heads(B, C, E, [F|G], I, J, K, L, M)
        ).
use_same_args([], [], [], _, _, []).
use_same_args([A|B], [_|C], [D|E], F, G, H) :-
        var(A), !,
        D=A,
        use_same_args(B, C, E, F, G, H).
use_same_args([A|B], [C|D], [E|F], G, H, I) :-
        nonvar(A), !,
        (   vars_occur_in(A, H) ->
            I=[C=A|J]
        ;   I=J
        ),
        E=C,
        use_same_args(B, D, F, G, H, J).
simplify_heads([], _, _, _, [], []).
simplify_heads([A|B], C, D, E, F, G) :-
        A=(H=I),
        (   (   nonvar(I)
            ;   vars_occur_in(I, B-C)
            ),
            guard_entailment:entails_guard(C, H=I) ->
            (   vars_occur_in(I, D-B-C) ->
                G=J,
                F=K
            ;   (   vars_occur_in(I, E) ->
                    G=[H=I|J]
                ;   G=J
                ),
                F=[H|K]
            )
        ;   nonvar(I),
            functor(I, L, M),
            guard_entailment:entails_guard([functor(H,L,M)|C], H=I) ->
            G=J,
            (   vars_occur_in(I, D-B-C) ->
                F=K
            ;   F=[functor(H,L,M)|K]
            )
        ;   F=K,
            G=J
        ),
        simplify_heads(B, [A|C], D, E, K, J).
vars_occur_in(A, B) :-
        chr_term_variables(A, C),
        chr_term_variables(B, D),
        intersect_eq(C, D, E),
        E\==[].
flatten_stuff([A|B], C) :- !,
        flatten_stuff(A, D),
        flatten_stuff(B, E),
        append(D, E, C).
flatten_stuff((A;B), C) :- !,
        flatten_stuff(A, D),
        flatten_stuff(B, E),
        append(D, E, C).
flatten_stuff((A,B), C) :- !,
        flatten_stuff(A, D),
        flatten_stuff(B, E),
        append(D, E, C).
flatten_stuff(chr_pp_not_in_store(A), [A]) :- !.
flatten_stuff(_, []).
unify_stuff(_, [], []).
unify_stuff(A, [B|C], [D|E]) :-
        B\==D,
        chr_term_variables(B, F),
        chr_term_variables(D, G),
        intersect_eq(F, G, H),
        check_safe_unif(B, D, H),
        variable_replacement(B, D, I),
        check_replacement(I),
        chr_term_variables(I, J),
        list_difference_eq(J, F, K),
        intersect_eq(A, K, L),
        L==[],
        B=D,
        unify_stuff(A, C, E), !.
unify_stuff(A, B, [_|C]) :-
        unify_stuff(A, B, C).
unify_stuff(A, [_|B], C) :-
        unify_stuff(A, B, C).
check_safe_unif(A, B, C) :-
        var(A), !,
        var(B),
        (   (   memberchk_eq(A, C)
            ;   memberchk_eq(B, C)
            ) ->
            A==B
        ;   true
        ).
check_safe_unif([], [], _) :- !.
check_safe_unif([A|B], [C|D], E) :- !,
        check_safe_unif(A, C, E), !,
        check_safe_unif(B, D, E).
check_safe_unif(A, B, C) :-
        nonvar(A), !,
        nonvar(B),
        A=..[D|E],
        B=..[D|F],
        check_safe_unif(E, F, C).
check_safe_unif2(A, _) :-
        var(A), !.
check_safe_unif2([], []) :- !.
check_safe_unif2([A|B], [C|D]) :- !,
        check_safe_unif2(A, C), !,
        check_safe_unif2(B, D).
check_safe_unif2(A, B) :-
        nonvar(A), !,
        nonvar(B),
        A=..[C|D],
        B=..[C|E],
        check_safe_unif2(D, E).
check_replacement(A) :-
        check_replacement(A, B),
        sort(B, C),
        length(C, D), !,
        length(B, D).
check_replacement([], []).
check_replacement([A-_|B], [A|C]) :-
        check_replacement(B, C).
add_failing_occ(A, B, C, D, E, F, _, G, H) :-
        A=pragma(rule(_,_,I,_),ids(J,K),_,_,_),
        append(K, J, L),
        missing_partner_cond(B, C, L, D, M, N, G),
        copy_term((N,B,C), (O,P,Q)),
        variable_replacement((N,B,C), (O,P,Q), H),
        copy_with_variable_replacement(I, R, H),
        extract_explicit_matchings(R, S),
        negate_b(S, T),
        copy_with_variable_replacement(M, U, H),
        (   check_safe_unif2(F, O),
            F=O ->
            E=[(T;U)]
        ;   E=[chr_pp_void_info]
        ).
missing_partner_cond([], [], [], _, fail, _, _).
missing_partner_cond([A|B], [_|C], [D|E], D, F, A, G) :- !,
        missing_partner_cond(B, C, E, D, F, A, G).
missing_partner_cond([A|B], [_|C], [_|D], E, F, G, H/I) :-
        F=(chr_pp_not_in_store(A);J),
        missing_partner_cond(B, C, D, E, J, G, H/I).
extract_explicit_matchings(A=B) :-
        var(A),
        var(B), !,
        A=B.
extract_explicit_matchings(A==B) :-
        var(A),
        var(B), !,
        A=B.
extract_explicit_matchings((A,B), C) :- !,
        (   extract_explicit_matchings(A) ->
            extract_explicit_matchings(B, C)
        ;   C=(A,D),
            extract_explicit_matchings(B, D)
        ).
extract_explicit_matchings(A, B) :- !,
        (   extract_explicit_matchings(A) ->
            B=true
        ;   B=A
        ).
oneway_unification(A, B) :-
        chr_term_variables(A, C),
        chr_runtime:lockv(C),
        A=B,
        chr_runtime:unlockv(C).
add_mode_info([], [], true).
add_mode_info([+|A], [B|C], D) :- !,
        D=(ground(B),E),
        add_mode_info(A, C, E).
add_mode_info([_|A], [_|B], C) :-
        add_mode_info(A, B, C).
types2condition([], [], [], [], []).
types2condition([A|B], [C|D], [E|F], [G|H], I) :-
        (   get_type_definition(A, J) ->
            type2condition(J, C, E, K),
            (   G\==(+) ->
                L=[\+ground(C)|K]
            ;   L=K
            ),
            list2disj(L, M),
            I=[M|N],
            types2condition(B, D, F, H, N)
        ;   chr_error(internal, 'Undefined type ~w.\n', [A])
        ).
type2condition([], _, _, []).
type2condition([A|B], C, D, E) :-
        (   builtin_type(A, C, F) ->
            true
        ;   real_type(A, C, D, F)
        ),
        item2list(F, G),
        type2condition(B, C, D, H),
        append(G, H, E).
item2list([], []) :- !.
item2list([A|B], [A|B]) :- !.
item2list(A, B) :-
        B=[A].
builtin_type(A, _, true) :-
        var(A), !.
builtin_type(any, _, true).
builtin_type(int, A, integer(A)).
builtin_type(number, A, number(A)).
builtin_type(float, A, float(A)).
builtin_type(natural, A, (integer(A),A>=0)).
real_type(A, B, C, D) :-
        (   nonvar(A) ->
            functor(A, E, F),
            (   F==0 ->
                D=(B=E)
            ;   A=..[_|G],
                length(H, F),
                I=..[E|H],
                (   var(C) ->
                    D=functor(B,E,F)
                ;   functor(C, E, F) ->
                    C=..[_|J],
                    nested_types(G, H, J, K),
                    D=(functor(B,E,F),B=I,K)
                ;   D=functor(B,E,F)
                )
            )
        ;   chr_error(internal, [['Illegal type definition (must be nonvar).'-[]]])
        ).
nested_types([], [], [], true).
nested_types([A|B], [C|D], [E|F], G) :-
        (   get_type_definition(A, H) ->
            type2condition(H, C, E, I),
            list2disj(I, J),
            G=(J,K),
            nested_types(B, D, F, K)
        ;   chr_error(internal, 'Undefined type ~w inside type definition.\n', [A])
        ).
storage_analysis(A) :-
        (   chr_pp_flag(storage_analysis, on) ->
            check_constraint_storages(A)
        ;   true
        ).
check_constraint_storages([]).
check_constraint_storages([A|B]) :-
        check_constraint_storage(A),
        check_constraint_storages(B).
check_constraint_storage(A) :-
        get_max_occurrence(A, B),
        check_occurrences_storage(A, 1, B).
check_occurrences_storage(A, B, C) :-
        (   B>C ->
            stored_completing(A, 1, 0)
        ;   check_occurrence_storage(A, B),
            D is B+1,
            check_occurrences_storage(A, D, C)
        ).
check_occurrence_storage(A, B) :-
        get_occurrence(A, B, C, D),
        (   is_passive(C, D) ->
            stored(A, B, maybe)
        ;   get_rule(C, E),
            E=pragma(rule(F,G,H,I),ids(J,K),_,_,_),
            (   select2(D, L, J, F, _, _) ->
                check_storage_head1(L, B, F, G, H)
            ;   select2(D, M, K, G, _, _) ->
                check_storage_head2(M, B, F, I)
            )
        ).
check_storage_head1(A, B, C, D, E) :-
        functor(A, F, G),
        H=F/G,
        (   C==[A],
            D==[],
            guard_entailment:entails_guard([chr_pp_headvariables(A)], E),
            A=..[_|I],
            no_matching(I, []) ->
            stored(H, B, no)
        ;   stored(H, B, maybe)
        ).
no_matching([], _).
no_matching([A|B], C) :-
        var(A),
        \+memberchk_eq(A,C),
        no_matching(B, [A|C]).
check_storage_head2(A, B, C, D) :-
        functor(A, E, F),
        G=E/F,
        (   (   C\==[],
                D==true
            ;   \+is_observed(E/F,B)
            ) ->
            stored(G, B, maybe)
        ;   stored(G, B, yes)
        ).
constraints_code(A, B) :-
        (   chr_pp_flag(reduced_indexing, on),
            \+forsome(C,A,\+chr_translate:only_ground_indexed_arguments(C)) ->
            none_suspended_on_variables
        ;   true
        ),
        constraints_code1(A, D, []),
        clean_clauses(D, B).
constraint_prelude(A/B, C) :-
        vars_susp(B, D, E, F),
        G=..[A|D],
        make_suspension_continuation_goal(A/B, F, H),
        build_head(A, B, [0], F, I),
        _=..[A|D],
        (   chr_pp_flag(debugable, on) ->
            use_auxiliary_predicate(insert_constraint_internal, A/B),
            generate_insert_constraint_call(A/B, E, J),
            make_name(attach_, A/B, K),
            L=..[K,M,E],
            chr_runtime_call('chr update_mutable'(inactive,N), O),
            P=(arg(2,E,N),O),
            insert_constraint_internal_constraint_goal(A/B, _, M, E, H, A, D, Q),
            chr_runtime_call('chr debug_event'(call(E)), R),
            chr_runtime_call('chr debug_event'(fail(E)), S),
            chr_runtime_call('chr debug_event'(exit(E)), T),
            chr_runtime_call('chr debug_event'(redo(E)), U),
            C=(G:-Q,J,L,P,(R,I;S,!,fail),(T;U,fail))
        ;   get_allocation_occurrence(A/B, 0) ->
            gen_insert_constraint_internal_goal(A/B, V, F, D, E),
            chr_runtime_call('chr update_mutable'(inactive,N), O),
            P=(arg(2,E,N),O),
            C=(G:-V,P,I)
        ;   C=(G:-I)
        ).
make_suspension_continuation_goal(A/B, C, D) :-
        (   may_trigger(A/B) ->
            get_target_module(E),
            build_head(A, B, [0], C, F),
            D=E:F
        ;   D=true
        ).
gen_cond_attach_clause(A/B, C, D, E) :-
        (   is_finally_stored(A/B) ->
            get_allocation_occurrence(A/B, F),
            get_max_occurrence(A/B, G),
            (   chr_pp_flag(debugable, off),
                G<F ->
                (   only_ground_indexed_arguments(A/B) ->
                    gen_insert_constraint_internal_goal(A/B, H, I, J, K)
                ;   gen_cond_attach_goal(A/B, H, I, J, K)
                )
            ;   vars_susp(B, J, K, I),
                gen_uncond_attach_goal(A/B, K, H, _)
            ),
            (   chr_pp_flag(debugable, on) ->
                L=..[A|J],
                chr_runtime_call('chr debug_event'(insert(L#K)), M)
            ;   M=true
            ),
            build_head(A, B, C, I, N),
            O=(N:-M,H),
            D=[O|E]
        ;   D=E
        ).
gen_cond_attach_goal(A/B, C, D, E, F) :-
        vars_susp(B, E, F, D),
        make_suspension_continuation_goal(A/B, D, G),
        make_name(attach_, A/B, H),
        I=..[H,J,F],
        _=..[A|E],
        generate_insert_constraint_call(A/B, F, K),
        use_auxiliary_predicate(insert_constraint_internal, A/B),
        insert_constraint_internal_constraint_goal(A/B, L, J, F, G, A, E, M),
        use_auxiliary_predicate(activate_constraint, A/B),
        (   may_trigger(A/B) ->
            activate_constraint_goal(A/B, L, J, F, _, N),
            C=((var(F)->M;N),(L==yes->K,I;true))
        ;   C=(M,K,I)
        ).
gen_insert_constraint_internal_goal(A/B, C, D, E, F) :-
        vars_susp(B, E, F, D),
        make_suspension_continuation_goal(A/B, D, G),
        (   \+only_ground_indexed_arguments(A/B) ->
            make_name(attach_, A/B, H),
            I=..[H,J,F]
        ;   I=true
        ),
        _=..[A|E],
        generate_insert_constraint_call(A/B, F, K),
        use_auxiliary_predicate(insert_constraint_internal, A/B),
        insert_constraint_internal_constraint_goal(A/B, _, J, F, G, A, E, L),
        (   only_ground_indexed_arguments(A/B),
            chr_pp_flag(debugable, off) ->
            C=(L,K)
        ;   C=(L,K,I)
        ).
gen_uncond_attach_goal(A, B, C, D) :-
        (   \+only_ground_indexed_arguments(A) ->
            make_name(attach_, A, E),
            F=..[E,G,B]
        ;   F=true
        ),
        generate_insert_constraint_call(A, B, H),
        (   chr_pp_flag(late_allocation, on) ->
            use_auxiliary_predicate(activate_constraint, A),
            activate_constraint_goal(A, I, G, B, D, J),
            C=(J,(I==yes->H,F;true))
        ;   use_auxiliary_predicate(activate_constraint, A),
            activate_constraint_goal(A, I, G, B, D, C)
        ).
head1_code(A, B, C, D, E, F, G, H, I) :-
        D=pragma(J,_,_,_,K),
        J=rule(_,L,_,_),
        (   L==[] ->
            reorder_heads(K, A, B, C, M, N),
            simplification_code(A, M, N, D, E, F, G, H, I)
        ;   simpagation_head1_code(A, B, C, D, E, G, H, I)
        ).
head2_code(A, B, C, D, E, F, G, H, I) :-
        D=pragma(J,_,_,_,K),
        J=rule(L,_,_,_),
        (   L==[] ->
            reorder_heads(K, A, B, C, M, N),
            propagation_code(A, M, N, J, K, E, F, G, H, I)
        ;   simpagation_head2_code(A, B, C, D, E, F, G, H, I)
        ).
gen_alloc_inc_clause(A/B, C, D, E, F) :-
        vars_susp(B, G, H, I),
        build_head(A, B, D, I, J),
        inc_id(D, K),
        build_head(A, B, K, I, L),
        gen_occ_allocation(A/B, C, G, H, I, M),
        N=(J:-M,L),
        E=[N|F].
gen_cond_allocation(A, B, C, D, E) :-
        gen_allocation(A, B, C, D, F),
        E=(var(B)->F;true).
gen_allocation(A, B, C/D, E, F) :-
        (   may_trigger(C/D) ->
            build_head(C, D, [0], E, G),
            get_target_module(H),
            I=H:G
        ;   I=true
        ),
        _=..[C|A],
        use_auxiliary_predicate(allocate_constraint, C/D),
        allocate_constraint_goal(C/D, I, B, C, A, F).
gen_occ_allocation(A, B, C, D, E, F) :-
        get_allocation_occurrence(A, G),
        (   chr_pp_flag(debugable, off),
            B==G ->
            (   may_trigger(A) ->
                gen_cond_allocation(C, D, A, E, F)
            ;   gen_allocation(C, D, A, E, F)
            )
        ;   F=true
        ).
guard_via_reschedule_new(A, B, C, D, E, F) :-
        (   chr_pp_flag(guard_via_reschedule, on) ->
            guard_via_reschedule_main_new(A, B, C, D, E, G),
            list2conj(G, F)
        ;   length(A, H),
            length(E, H),
            length(B, I),
            length(D, I),
            append(E, D, J),
            list2conj(J, F)
        ).
guard_via_reschedule_main_new(A, B, C, D, E, F) :-
        initialize_unit_dictionary(C, G),
        maplist(wrap_in_functor(lookup), A, H),
        maplist(wrap_in_functor(guard), B, I),
        build_units(H, I, G, J),
        dependency_reorder(J, K),
        wrappedunits2lists(K, L, E, F),
        sort(L, M),
        snd_of_pairs(M, D).
wrap_in_functor(A, B, C) :-
        C=..[A,B].
wrappedunits2lists([], [], [], []).
wrappedunits2lists([unit(A,B,_,_)|C], D, E, F) :-
        F=[G|H],
        (   B=lookup(I) ->
            E=[G|J],
            D=K
        ;   B=guard(I) ->
            D=[A-G|K],
            E=J
        ),
        wrappedunits2lists(C, K, J, H).
guard_splitting(A, B) :-
        A=rule(C,D,E,_),
        append(C, D, F),
        conj2list(E, G),
        chr_term_variables(F, H),
        split_off_simple_guard_new(G, H, I, J),
        append(I, [K], B),
        chr_term_variables(J, L),
        ground_vars(F, M),
        list_difference_eq(H, M, N),
        intersect_eq(N, L, O),
        (   chr_pp_flag(guard_locks, on),
            bagof((chr_runtime:'chr lock'(P))-(chr_runtime:'chr unlock'(P)), lists:member(P,O), Q) ->
            once(pairup(R,S,Q))
        ;   R=[],
            S=[]
        ),
        list2conj(R, T),
        list2conj(S, U),
        list2conj(J, V),
        K=(T,V,U).
guard_body_copies3(A, B, C, D, E) :-
        A=rule(_,_,_,F),
        my_term_copy(B, C, G, D),
        my_term_copy(F, G, E).
split_off_simple_guard_new([], _, [], []).
split_off_simple_guard_new([A|B], C, D, E) :-
        (   simple_guard_new(A, C) ->
            D=[A|F],
            split_off_simple_guard_new(B, C, F, E)
        ;   D=[],
            E=[A|B]
        ).
simple_guard_new(A, B) :-
        binds_b(A, C),
        \+ (member(D,C),memberchk_eq(D,B)).
dependency_reorder(A, B) :-
        dependency_reorder(A, [], B).
dependency_reorder([], A, B) :-
        reverse(A, B).
dependency_reorder([A|B], C, D) :-
        A=unit(_,_,E,F),
        (   E==fixed ->
            G=[A|C]
        ;   dependency_insert(C, A, F, G)
        ),
        dependency_reorder(B, G, D).
dependency_insert([], A, _, [A]).
dependency_insert([A|B], C, D, E) :-
        A=unit(F,_,_,_),
        (   memberchk(F, D) ->
            E=[C,A|B]
        ;   E=[A|G],
            dependency_insert(B, C, D, G)
        ).
build_units(A, B, C, D) :-
        build_retrieval_units(A, 1, E, C, F, D, G),
        build_guard_units(B, E, F, G).
build_retrieval_units([], A, A, B, B, C, C).
build_retrieval_units([A|B], C, D, E, F, G, H) :-
        chr_term_variables(A, I),
        update_unit_dictionary(I, C, E, J, [], K),
        G=[unit(C,A,fixed,K)|L],
        M is C+1,
        build_retrieval_units(B, M, D, J, F, L, H).
initialize_unit_dictionary(A, B) :-
        chr_term_variables(A, C),
        pair_all_with(C, 0, B).
update_unit_dictionary([], _, A, A, B, B).
update_unit_dictionary([A|B], C, D, E, F, G) :-
        (   lookup_eq(D, A, H) ->
            (   (   H==C
                ;   memberchk(H, F)
                ) ->
                I=F
            ;   I=[H|F]
            ),
            J=D
        ;   J=[A-C|D],
            I=F
        ),
        update_unit_dictionary(B, C, J, E, I, G).
build_guard_units(A, B, C, D) :-
        (   A=[E] ->
            D=[unit(B,E,fixed,[])]
        ;   A=[E|F] ->
            chr_term_variables(E, G),
            update_unit_dictionary2(G, B, C, H, [], I),
            D=[unit(B,E,movable,I)|J],
            K is B+1,
            build_guard_units(F, K, H, J)
        ).
update_unit_dictionary2([], _, A, A, B, B).
update_unit_dictionary2([A|B], C, D, E, F, G) :-
        (   lookup_eq(D, A, H) ->
            (   (   H==C
                ;   memberchk(H, F)
                ) ->
                I=F
            ;   I=[H|F]
            ),
            J=[A-C|D]
        ;   J=[A-C|D],
            I=F
        ),
        update_unit_dictionary2(B, C, J, E, I, G).
functional_dependency_analysis(A) :-
        (   chr_pp_flag(functional_dependency_analysis, on) ->
            functional_dependency_analysis_main(A)
        ;   true
        ).
functional_dependency_analysis_main([]).
functional_dependency_analysis_main([A|B]) :-
        (   discover_unique_pattern(A, C, D, E, F) ->
            functional_dependency(C, D, E, F)
        ;   true
        ),
        functional_dependency_analysis_main(B).
discover_unique_pattern(A, B/C, D, E, F) :-
        A=pragma(G,_,_,_,D),
        G=rule(H,I,J,_),
        (   H=[K],
            I=[L] ->
            true
        ;   H=[K,L],
            I==[] ->
            true
        ),
        check_unique_constraints(K, L, J, D, M),
        chr_term_variables(K, N),
        \+ (member(O,N),lookup_eq(M,O,P),memberchk_eq(P,N)),
        select_pragma_unique_variables(N, M, Q),
        copy_term_nat(K-Q, E-F),
        functor(K, B, C).
select_pragma_unique_variables([], _, []).
select_pragma_unique_variables([A|B], C, D) :-
        (   lookup_eq(C, A, _) ->
            D=E
        ;   D=[A|E]
        ),
        select_pragma_unique_variables(B, C, E).
set_semantics_rules(A) :-
        (   chr_pp_flag(set_semantics_rule, on) ->
            set_semantics_rules_main(A)
        ;   true
        ).
set_semantics_rules_main([]).
set_semantics_rules_main([A|B]) :-
        set_semantics_rule_main(A),
        set_semantics_rules_main(B).
set_semantics_rule_main(A) :-
        A=pragma(B,C,_,_,D),
        (   B=rule([E],[F],true,_),
            C=ids([G],[H]),
            \+is_passive(D,G),
            functor(E, I, J),
            get_functional_dependency(I/J, D, K, L),
            copy_term_nat(K-L, E-M),
            copy_term_nat(K-L, F-N),
            M==N ->
            passive(D, H)
        ;   true
        ).
check_unique_constraints(A, B, C, D, E) :-
        \+any_passive_head(D),
        variable_replacement(A-B, B-A, E),
        copy_with_variable_replacement(C, F, E),
        negate_b(C, G),
        once(entails_b(G,F)).
symmetry_analysis(A) :-
        (   chr_pp_flag(check_unnecessary_active, off) ->
            true
        ;   symmetry_analysis_main(A)
        ).
symmetry_analysis_main([]).
symmetry_analysis_main([A|B]) :-
        A=pragma(C,ids(D,E),_,_,F),
        C=rule(G,H,_,_),
        (   (   \+chr_pp_flag(check_unnecessary_active,simplification)
            ;   H==[]
            ),
            G\==[] ->
            symmetry_analysis_heads(G, D, [], [], C, F),
            symmetry_analysis_heads(H, E, [], [], C, F)
        ;   true
        ),
        symmetry_analysis_main(B).
symmetry_analysis_heads([], [], _, _, _, _).
symmetry_analysis_heads([A|B], [C|D], E, F, G, H) :-
        (   \+is_passive(H,C),
            member2(E, F, I-J),
            \+is_passive(H,J),
            variable_replacement(I, A, K),
            copy_with_variable_replacement(G, L, K),
            identical_rules(G, L) ->
            passive(H, C)
        ;   true
        ),
        symmetry_analysis_heads(B, D, [A|E], [C|F], G, H).
simplification_code(A, B, C, D, E/F, G, H, I, J) :-
        D=pragma(K,_,_,_,_),
        head_info(A, F, _, L, M, N),
        build_head(E, F, H, M, O),
        get_constraint_mode(E/F, P),
        head_arg_matches(N, P, [], Q, R, [], S),
        guard_splitting(K, T),
        guard_via_reschedule_new(B, T, A, U, V, W),
        rest_heads_retrieval_and_matching(B, C, A, V, X, R, Y, [], [], [], S, _),
        guard_body_copies3(K, T, Y, U, Z),
        gen_uncond_susps_detachments(X, B, A1),
        gen_cond_susp_detachment(H, L, E/F, B1),
        (   chr_pp_flag(debugable, on) ->
            K=rule(_,_,C1,D1),
            my_term_copy(C1-D1, Y, E1-F1),
            chr_runtime_call('chr debug_event'(try([L|G1],[],E1,F1)), H1),
            chr_runtime_call('chr debug_event'(apply([L|G1],[],E1,F1)), I1),
            instrument_goal(J1, H1, I1, K1)
        ;   K1=J1
        ),
        (   unconditional_occurrence(E/F, G),
            chr_pp_flag(late_allocation, on) ->
            J1=true
        ;   J1=!
        ),
        L1=(O:-Q,W,K1,A1,B1,Z),
        I=[L1|J].
head_arg_matches(A, B, C, D, E) :-
        head_arg_matches(A, B, C, D, E, [], _).
head_arg_matches(A, B, C, D, E, F, G) :-
        head_arg_matches_(A, B, C, F, H, E, G),
        list2conj(H, D).
head_arg_matches_([], [], A, B, [], A, B).
head_arg_matches_([A-B|C], [D|E], F, G, H, I, J) :-
        (   var(A) ->
            (   lookup_eq(F, A, K) ->
                (   D=(+) ->
                    (   memberchk_eq(A, G) ->
                        H=[B=K|L],
                        M=G
                    ;   H=[B==K|L],
                        M=[A|G]
                    )
                ;   H=[B==K|L],
                    M=G
                ),
                N=F
            ;   N=[A-B|F],
                H=L,
                (   D=(+) ->
                    M=[A|G]
                ;   M=G
                )
            ),
            O=C,
            P=E
        ;   atomic(A) ->
            (   D=(+) ->
                H=[B=A|L]
            ;   H=[B==A|L]
            ),
            F=N,
            M=G,
            O=C,
            P=E
        ;   D==(+),
            is_ground(G, A) ->
            copy_with_variable_replacement(A, Q, F),
            H=[B=Q|L],
            F=N,
            M=G,
            O=C,
            P=E
        ;   A=..[_|R],
            functor(A, S, T),
            functor(U, S, T),
            U=..[_|V],
            (   D=(+) ->
                H=[B=U|L]
            ;   H=[nonvar(B),B=U|L]
            ),
            pairup(R, V, W),
            append(W, C, O),
            replicate(T, D, X),
            append(X, E, P),
            N=F,
            M=G
        ),
        head_arg_matches_(O, P, N, M, L, I, J).
is_ground(A, B) :-
        (   ground(B) ->
            true
        ;   compound(B) ->
            B=..[_|C],
            maplist(is_ground(A), C)
        ;   memberchk_eq(B, A)
        ).
rest_heads_retrieval_and_matching(A, B, C, D, E, F, G, H, I, J) :-
        rest_heads_retrieval_and_matching(A, B, C, D, E, F, G, H, I, J, [], _).
rest_heads_retrieval_and_matching(A, B, C, D, E, F, G, H, I, J, K, L) :-
        (   A=[_|_] ->
            rest_heads_retrieval_and_matching_n(A, B, H, I, C, D, E, F, G, J, K, L)
        ;   D=[],
            E=[],
            F=G,
            K=L
        ).
rest_heads_retrieval_and_matching_n([], _, _, _, _, [], [], A, A, _, B, B).
rest_heads_retrieval_and_matching_n([A|B], [_|C], D, E, F, [G|H], [I|J], K, L, _, M, N) :-
        functor(A, O, P),
        head_info(A, P, Q, _, _, R),
        get_store_type(O/P, S),
        (   S==default ->
            passive_head_via(A, [F|D], K, T, U),
            create_get_mutable_ref(active, V, W),
            get_constraint_mode(O/P, X),
            head_arg_matches(R, X, K, Y, Z, M, A1),
            B1=R,
            sbag_member_call(I, U, C1),
            D1=(T,C1,I=E1,W)
        ;   existential_lookup(S, A, [F|D], K, E1, V, D1, I, R, B1),
            get_constraint_mode(O/P, X),
            filter_mode(B1, R, X, F1),
            head_arg_matches(B1, F1, K, Y, Z, M, A1)
        ),
        delay_phase_end(validate_store_type_assumptions, (static_suspension_term(O/P,E1),get_static_suspension_term_field(state,O/P,E1,V),get_static_suspension_term_field(arguments,O/P,E1,Q))),
        different_from_other_susps(A, I, D, E, G1),
        append(B1, Z, H1),
        translate(A1, H1, I1),
        translate(A1, Z, J1),
        inline_matching_goal(Y, K1, I1, J1),
        G=(D1,G1,K1),
        rest_heads_retrieval_and_matching_n(B, C, [A|D], [I|E], F, H, J, Z, L, _, A1, N).
inline_matching_goal(A==B, true, C, D) :-
        memberchk_eq(A, C),
        memberchk_eq(B, D),
        A=B, !.
inline_matching_goal(A=B, true, _, _) :-
        A=B, !.
inline_matching_goal((A,B), (C,D), E, F) :- !,
        inline_matching_goal(A, C, E, F),
        inline_matching_goal(B, D, E, F).
inline_matching_goal(A, A, _, _).
filter_mode([], _, _, []).
filter_mode([A-B|C], [_-D|E], [F|G], H) :-
        (   B==D ->
            H=[F|I],
            filter_mode(C, E, G, I)
        ;   filter_mode([A-B|C], E, G, H)
        ).
check_unique_keys([], _).
check_unique_keys([A|B], C) :-
        lookup_eq(C, A, _),
        check_unique_keys(B, C).
different_from_other_susps(A, B, C, D, E) :-
        different_from_other_susps_(C, D, A, B, F),
        list2conj(F, E).
different_from_other_susps_(_, [], _, _, []) :- !.
different_from_other_susps_([A|B], [C|D], E, F, G) :-
        (   functor(E, H, I),
            functor(A, H, I),
            copy_term_nat(A-E, J-K),
            \+ \+J=K ->
            G=[F\==C|L]
        ;   G=L
        ),
        different_from_other_susps_(B, D, E, F, L).
passive_head_via(A, B, C, D, E) :-
        functor(A, F, G),
        get_constraint_index(F/G, _),
        common_variables(A, B, H),
        translate(H, C, I),
        global_list_store_name(F/G, J),
        make_get_store_goal(J, E, K),
        (   I==[] ->
            D=K
        ;   gen_get_mod_constraints(F/G, I, L, M, E),
            D=(L->M;K)
        ).
common_variables(A, B, C) :-
        chr_term_variables(A, D),
        chr_term_variables(B, E),
        intersect_eq(D, E, C).
gen_get_mod_constraints(A, B, C, D, E) :-
        get_target_module(F),
        (   B=[G] ->
            chr_runtime_call('chr newvia_1'(G,H), C)
        ;   B=[G,I] ->
            chr_runtime_call('chr newvia_2'(G,I,H), C)
        ;   chr_runtime_call('chr newvia'(B,H), C)
        ),
        attvar_call(get_attr(H,F,J), K),
        D=(K,L),
        get_max_constraint_index(M),
        (   M==1 ->
            L=true,
            E=J
        ;   L=(J=N),
            get_constraint_index(A, O),
            make_attr(M, _, P, N),
            nth(O, P, E)
        ).
guard_body_copies(A, B, C, D) :-
        guard_body_copies2(A, B, E, D),
        list2conj(E, C).
guard_body_copies2(A, B, C, D) :-
        A=rule(E,_,F,G),
        conj2list(F, H),
        split_off_simple_guard(H, B, I, J),
        my_term_copy(I-J, B, K, L-M),
        append(L, [N], C),
        chr_term_variables(J, O),
        chr_term_variables(M, P),
        ground_vars(E, Q),
        list_difference_eq(O, Q, _),
        (   chr_pp_flag(guard_locks, on),
            bagof((chr_runtime:'chr lock'(R))-(chr_runtime:'chr unlock'(R)), S^(lists:member(S,O),pairlist:lookup_eq(B,S,R),memberchk_eq(R,P)), T) ->
            once(pairup(U,V,T))
        ;   U=[],
            V=[]
        ),
        list2conj(U, W),
        list2conj(V, X),
        list2conj(M, Y),
        N=(W,Y,X),
        my_term_copy(G, K, D).
split_off_simple_guard([], _, [], []).
split_off_simple_guard([A|B], C, D, E) :-
        (   simple_guard(A, C) ->
            D=[A|F],
            split_off_simple_guard(B, C, F, E)
        ;   D=[],
            E=[A|B]
        ).
simple_guard(A, B) :-
        binds_b(A, C),
        \+ (member(D,C),lookup_eq(B,D,_)).
gen_cond_susp_detachment(A, B, C, D) :-
        (   is_stored(C) ->
            (   (   A==[0]
                ;   get_allocation_occurrence(C, E),
                    get_max_occurrence(C, F),
                    F<E
                ),
                only_ground_indexed_arguments(C),
                chr_pp_flag(late_allocation, on) ->
                D=true
            ;   gen_uncond_susp_detachment(B, C, G),
                (   chr_pp_flag(late_allocation, on) ->
                    D=(var(B)->true;G)
                ;   D=G
                )
            )
        ;   D=true
        ).
gen_uncond_susp_detachment(A, B, C) :-
        (   is_stored(B) ->
            (   \+only_ground_indexed_arguments(B) ->
                make_name(detach_, B, D),
                E=..[D,F,A]
            ;   E=true
            ),
            (   chr_pp_flag(debugable, on) ->
                chr_runtime_call('chr debug_event'(remove(A)), G)
            ;   G=true
            ),
            generate_delete_constraint_call(B, A, H),
            use_auxiliary_predicate(remove_constraint_internal, B),
            remove_constraint_goal(B, A, F, I, J),
            (   only_ground_indexed_arguments(B) ->
                C=(G,J,(I=yes->H,E;true))
            ;   C=(G,J,(I==yes->H,E;true))
            )
        ;   C=true
        ).
gen_uncond_susps_detachments([], [], true).
gen_uncond_susps_detachments([A|B], [C|D], (E,F)) :-
        functor(C, G, H),
        gen_uncond_susp_detachment(A, G/H, E),
        gen_uncond_susps_detachments(B, D, F).
simpagation_head1_code(A, B, C, D, E/F, G, H, I) :-
        D=pragma(J,ids(_,K),_,_,_),
        J=rule(_,L,M,N),
        head_info(A, F, _, O, P, Q),
        get_constraint_mode(E/F, R),
        head_arg_matches(Q, R, [], S, T, [], U),
        build_head(E, F, G, P, V),
        append(B, L, W),
        append(C, K, X),
        reorder_heads(_, A, W, X, Y, Z),
        guard_splitting(J, A1),
        guard_via_reschedule_new(Y, A1, A, B1, C1, D1),
        rest_heads_retrieval_and_matching(Y, Z, A, C1, E1, T, F1, [], [], [], U, _),
        split_by_ids(Z, E1, C, G1, H1),
        guard_body_copies3(J, A1, F1, B1, I1),
        gen_uncond_susps_detachments(G1, B, J1),
        gen_cond_susp_detachment(G, O, E/F, K1),
        (   chr_pp_flag(debugable, on) ->
            my_term_copy(M-N, F1, L1-M1),
            chr_runtime_call('chr debug_event'(try([O|G1],H1,L1,M1)), N1),
            chr_runtime_call('chr debug_event'(apply([O|G1],H1,L1,M1)), O1),
            instrument_goal(!, N1, O1, P1)
        ;   P1=!
        ),
        Q1=(V:-S,D1,P1,J1,K1,I1),
        H=[Q1|I].
split_by_ids([], [], _, [], []).
split_by_ids([A|B], [C|D], E, F, G) :-
        (   memberchk_eq(A, E) ->
            F=[C|H],
            G=I
        ;   F=H,
            G=[C|I]
        ),
        split_by_ids(B, D, E, H, I).
simpagation_head2_code(A, B, C, D, E, F, G, H, I) :-
        D=pragma(J,ids(K,L),_,_,M),
        J=rule(N,_,O,P),
        append(N, B, Q),
        append(K, C, R),
        reorder_heads(M, A, Q, R, [S|T], [U|V]),
        simpagation_head2_prelude(A, S, [T,O,P], E, F, G, H, W),
        extend_id(G, X),
        (   memberchk_eq(U, L) ->
            simpagation_universal_searches(T, V, L, [S,A], J, E, Y, Z, A1, X, B1, W, C1)
        ;   W=C1,
            X=B1,
            Y=T,
            Z=[S,A],
            A1=V
        ),
        universal_search_iterator_end(Z, Y, J, E, B1, C1, D1),
        simpagation_head2_new_worker(Z, Y, A1, D, E, F, B1, D1, I).
simpagation_universal_searches([], [], _, A, _, _, [], A, [], B, B, C, C).
simpagation_universal_searches(A, [B|C], D, E, F, G, H, I, J, K, L, M, N) :-
        A=[O|P],
        inc_id(K, Q),
        universal_search_iterator_end(E, A, F, G, K, M, R),
        universal_search_iterator(A, E, F, G, K, R, S),
        (   memberchk_eq(B, D) ->
            simpagation_universal_searches(P, C, D, [O|E], F, G, H, I, J, Q, L, S, N)
        ;   L=Q,
            S=N,
            H=P,
            I=[O|E],
            C=J
        ).
simpagation_head2_prelude(A, B, C, D/E, F, G, H, I) :-
        head_info(A, E, J, K, L, M),
        build_head(D, E, G, L, N),
        get_constraint_mode(D/E, O),
        head_arg_matches(M, O, [], P, Q),
        lookup_passive_head(B, [A], Q, R, S),
        gen_occ_allocation(D/E, F, J, K, L, T),
        extend_id(G, U),
        extra_active_delegate_variables(A, [B|C], Q, V),
        append([S|L], V, W),
        build_head(D, E, U, W, X),
        Y=(N:-P,R,!,T,X),
        H=[Y|I].
extra_active_delegate_variables(A, B, C, D) :-
        A=..[_|E],
        delegate_variables(A, B, C, E, D).
passive_delegate_variables(A, B, C, D, E) :-
        chr_term_variables(B, F),
        delegate_variables(A, C, D, F, E).
delegate_variables(A, B, C, D, E) :-
        chr_term_variables(A, F),
        chr_term_variables(B, G),
        intersect_eq(F, G, H),
        list_difference_eq(H, D, I),
        translate(I, C, E).
simpagation_head2_new_worker([A|B], C, D, E, F/G, H, I, J, K) :-
        E=pragma(L,ids(M,_),N,_,_),
        L=rule(_,_,O,P),
        get_prop_inner_loop_vars(B, [A,C,O,P], Q, R, S, T),
        gen_var(U),
        gen_var(V),
        functor(A, W, X),
        gen_vars(X, Y),
        head_info(A, X, Y, U, _, Z),
        get_constraint_mode(W/X, A1),
        head_arg_matches(Z, A1, R, B1, C1, [], _),
        delay_phase_end(validate_store_type_assumptions, (static_suspension_term(W/X,D1),get_static_suspension_term_field(state,W/X,D1,E1),get_static_suspension_term_field(arguments,W/X,D1,Y))),
        different_from_other_susps(A, U, B, T, F1),
        create_get_mutable_ref(active, E1, G1),
        H1=(U=D1,G1,F1,B1),
        I1=[[U|V]|Q],
        build_head(F, G, I, I1, J1),
        guard_splitting(L, K1),
        guard_via_reschedule_new(C, K1, [A|B], L1, M1, N1),
        rest_heads_retrieval_and_matching(C, D, [A|B], M1, O1, C1, P1, [A|B], [U|T], []),
        split_by_ids(D, O1, M, Q1, R1),
        split_by_ids(D, C, M, S1, _),
        gen_uncond_susps_detachments([U|Q1], [A|S1], T1),
        U1=[V|Q],
        build_head(F, G, I, U1, V1),
        W1=[[]|Q],
        build_head(F, G, I, W1, X1),
        guard_body_copies3(L, K1, P1, L1, Y1),
        (   Y1\==true,
            is_observed(F/G, H) ->
            gen_uncond_attach_goal(F/G, S, Z1, A2),
            gen_state_cond_call(S, F/G, V1, A2, B2),
            gen_state_cond_call(S, F/G, X1, A2, C2)
        ;   Z1=true,
            B2=V1,
            C2=X1
        ),
        (   chr_pp_flag(debugable, on) ->
            my_term_copy(O-P, R, D2-E2),
            chr_runtime_call('chr debug_event'(try([U|Q1],[S|R1],D2,E2)), F2),
            chr_runtime_call('chr debug_event'(apply([U|Q1],[S|R1],D2,E2)), G2)
        ;   F2=true,
            G2=true
        ),
        (   member(unique(_,H2), N),
            check_unique_keys(H2, R) ->
            I2=(J1:-H1->(N1,F2->G2,T1,Z1,Y1,C2;X1);V1)
        ;   I2=(J1:-H1,N1,F2->G2,T1,Z1,Y1,B2;V1)
        ),
        J=[I2|K].
gen_state_cond_call(A, B, C, D, E) :-
        (   may_trigger(B) ->
            delay_phase_end(validate_store_type_assumptions, (static_suspension_term(B,F),get_static_suspension_term_field(state,B,F,G),get_static_suspension_term_field(generation,B,F,H),get_static_suspension_term_field(arguments,B,F,I))),
            create_get_mutable_ref(D, H, J)
        ;   delay_phase_end(validate_store_type_assumptions, (static_suspension_term(B,F),get_static_suspension_term_field(state,B,F,G),get_static_suspension_term_field(arguments,B,F,I))),
            J=true
        ),
        create_get_mutable_ref(active, G, K),
        chr_runtime_call('chr update_mutable'(inactive,G), L),
        E=(A=F,K,J->L,C;true).
propagation_code(A, B, C, D, E, F, G, H, I, J) :-
        (   B==[] ->
            propagation_single_headed(A, D, E, F, G, H, I, J)
        ;   propagation_multi_headed(A, B, C, D, E, F, G, H, I, J)
        ).
propagation_single_headed(A, B, C, D/E, F, G, H, I) :-
        head_info(A, E, J, K, L, M),
        build_head(D, E, G, L, N),
        inc_id(G, O),
        build_head(D, E, O, L, P),
        get_constraint_mode(D/E, Q),
        head_arg_matches(M, Q, [], R, S, [], _),
        guard_body_copies(B, S, T, U),
        gen_occ_allocation(D/E, F, J, K, L, V),
        W=P,
        (   X\==true,
            is_observed(D/E, F) ->
            gen_uncond_attach_goal(D/E, K, Y, Z),
            gen_state_cond_call(K, D/E, W, Z, A1)
        ;   Y=true,
            A1=W
        ),
        (   unconditional_occurrence(D/E, F),
            chr_pp_flag(late_allocation, on) ->
            B1=true
        ;   B1=!
        ),
        (   chr_pp_flag(debugable, on) ->
            B=rule(_,_,C1,X),
            my_term_copy(C1-X, S, D1-E1),
            chr_runtime_call('chr debug_event'(try([],[K],D1,E1)), F1),
            chr_runtime_call('chr debug_event'(apply([],[K],D1,E1)), G1),
            instrument_goal(B1, F1, G1, H1)
        ;   H1=B1
        ),
        (   may_trigger(D/E),
            \+has_no_history(C) ->
            use_auxiliary_predicate(novel_production),
            use_auxiliary_predicate(extend_history),
            does_use_history(D/E),
            I1='$novel_production'(K,C),
            J1='$extend_history'(K,C)
        ;   I1=true,
            J1=true
        ),
        K1=(N:-R,V,I1,T,H1,J1,Y,U,A1),
        H=[K1|I].
propagation_multi_headed(A, B, C, D, E, F, G, H, I, J) :-
        B=[K|L],
        propagation_prelude(A, B, D, F, G, H, I, M),
        extend_id(H, N),
        propagation_nested_code(L, [K,A], C, D, E, F, G, N, M, J).
propagation_prelude(A, [B|C], D, E/F, G, H, I, J) :-
        head_info(A, F, K, L, M, N),
        build_head(E, F, H, M, O),
        get_constraint_mode(E/F, P),
        head_arg_matches(N, P, [], Q, R),
        D=rule(_,_,S,T),
        extra_active_delegate_variables(A, [B,C,S,T], R, U),
        lookup_passive_head(B, [A], R, V, W),
        gen_occ_allocation(E/F, G, K, L, M, X),
        extend_id(H, Y),
        append([W|M], U, Z),
        build_head(E, F, Y, Z, A1),
        B1=A1,
        C1=(O:-Q,V,!,X,B1),
        I=[C1|J].
propagation_nested_code([], [A|B], C, D, E, F, G, H, I, J) :-
        universal_search_iterator_end([A|B], [], D, F, H, I, K),
        propagation_body(A, B, C, D, E, F, G, H, K, J).
propagation_nested_code([A|B], C, D, E, F, G, H, I, J, K) :-
        universal_search_iterator_end(C, [A|B], E, G, I, J, L),
        universal_search_iterator([A|B], C, E, G, I, L, M),
        inc_id(I, N),
        propagation_nested_code(B, [A|C], D, E, F, G, H, N, M, K).
check_fd_lookup_condition(_, _, _, _) :-
        fail.
propagation_body(A, B, C, D, E, F/G, H, I, J, K) :-
        D=rule(_,L,M,N),
        gen_var_susp_list_for_b(B, [A,M,N], O, P, Q, R, S),
        flatten(P, T),
        init(R, U),
        last(R, V),
        gen_var(W),
        gen_var(X),
        functor(A, Y, Z),
        gen_vars(Z, A1),
        delay_phase_end(validate_store_type_assumptions, (static_suspension_term(Y/Z,B1),get_static_suspension_term_field(state,Y/Z,B1,C1),get_static_suspension_term_field(arguments,Y/Z,B1,A1))),
        create_get_mutable_ref(active, C1, D1),
        E1=(W=B1,D1),
        F1=[[W|X]|T],
        build_head(F, G, I, F1, G1),
        (   check_fd_lookup_condition(Y, Z, A, B) ->
            universal_search_iterator_failure_vars(B, I, P, Q, S, H1, I1),
            J1=H1
        ;   J1=[X|T],
            I1=I
        ),
        build_head(F, G, I1, J1, K1),
        L1=K1,
        A=..[_|M1],
        pairup(M1, A1, N1),
        get_constraint_mode(Y/Z, O1),
        head_arg_matches(N1, O1, O, P1, Q1),
        different_from_other_susps(A, W, B, U, R1),
        guard_body_copies(D, Q1, S1, T1),
        (   T1\==true,
            is_observed(F/G, H) ->
            gen_uncond_attach_goal(F/G, V, U1, V1),
            gen_state_cond_call(V, F/G, L1, V1, W1)
        ;   U1=true,
            W1=L1
        ),
        (   (   is_least_occurrence(E)
            ;   has_no_history(E)
            ) ->
            X1=true,
            Y1=true
        ;   get_occurrence(F/G, H, _, Z1),
            history_susps(C, [W|U], V, Z1, A2),
            B2=..[t,E|A2],
            use_auxiliary_predicate(novel_production),
            use_auxiliary_predicate(extend_history),
            does_use_history(F/G),
            findall(C2/D2, (member(E2,L),functor(E2,C2,D2)), F2),
            novel_production_calls(F2, A2, G2, H2),
            X1=(G2=B2,H2),
            Y1='$extend_history'(V,G2)
        ),
        (   chr_pp_flag(debugable, on) ->
            D=rule(_,_,M,N),
            my_term_copy(M-N, Q1, I2-J2),
            chr_runtime_call('chr debug_event'(try([],[V,W|U],I2,J2)), K2),
            chr_runtime_call('chr debug_event'(apply([],[V,W|U],I2,J2)), L2)
        ;   K2=true,
            L2=true
        ),
        M2=(G1:-E1,R1,P1,X1,S1,K2->L2,Y1,U1,T1,W1;L1),
        J=[M2|K].
novel_production_calls([], [], _, true).
novel_production_calls([A|B], [C|D], E, (F,G)) :-
        delay_phase_end(validate_store_type_assumptions, novel_production_call(A,'$novel_production'(C,E),F)),
        novel_production_calls(B, D, E, G).
history_susps(A, B, C, D, E) :-
        reverse(B, F),
        pairup([D|A], [C|F], G),
        sort(G, H),
        pairup(_, E, H).
gen_var_susp_list_for([A], B, C, D, E, F) :- !,
        functor(A, G, H),
        head_info(A, H, _, F, E, I),
        get_constraint_mode(G/H, J),
        head_arg_matches(I, J, [], _, C),
        extra_active_delegate_variables(A, B, C, K),
        append(E, K, D).
gen_var_susp_list_for([A|B], C, D, E, F, G) :-
        gen_var_susp_list_for(B, [A|C], H, F, _, _),
        functor(A, I, J),
        gen_var(G),
        head_info(A, J, _, K, _, L),
        get_constraint_mode(I/J, M),
        head_arg_matches(L, M, H, _, D),
        passive_delegate_variables(A, B, C, D, N),
        append(N, [K,G|F], E).
gen_var_susp_list_for_b([A], B, C, [D], E, [F], []) :- !,
        functor(A, G, H),
        head_info(A, H, _, F, E, I),
        get_constraint_mode(G/H, J),
        head_arg_matches(I, J, [], _, C),
        extra_active_delegate_variables(A, B, C, K),
        append(E, K, D).
gen_var_susp_list_for_b([A|B], C, D, [E|F], G, [H|I], [J|K]) :-
        gen_var_susp_list_for_b(B, [A|C], L, F, G, I, K),
        functor(A, M, N),
        gen_var(J),
        head_info(A, N, _, H, _, O),
        get_constraint_mode(M/N, P),
        head_arg_matches(O, P, L, _, D),
        passive_delegate_variables(A, B, C, D, Q),
        append(Q, [H,J], E).
get_prop_inner_loop_vars([A], B, C, D, E, []) :- !,
        functor(A, F, G),
        head_info(A, G, _, E, H, I),
        get_constraint_mode(F/G, J),
        head_arg_matches(I, J, [], _, D),
        extra_active_delegate_variables(A, B, D, K),
        append(H, K, C).
get_prop_inner_loop_vars([A|B], C, D, E, F, [G|H]) :-
        get_prop_inner_loop_vars(B, [A|C], I, J, F, H),
        functor(A, K, L),
        gen_var(M),
        head_info(A, L, _, G, _, N),
        get_constraint_mode(K/L, O),
        head_arg_matches(N, O, J, _, E),
        passive_delegate_variables(A, B, C, E, P),
        append(P, [G,M|I], D).
reorder_heads(A, B, C, D, E, F) :-
        (   chr_pp_flag(reorder_heads, on),
            length(C, G),
            G=<6 ->
            reorder_heads_main(A, B, C, D, E, F)
        ;   E=C,
            F=D
        ).
reorder_heads_main(A, B, C, D, E, F) :-
        chr_term_variables(B, G),
        H=entry([],[],G,C,D,A),
        copy_term_nat(H, I),
        a_star(I, J^(chr_translate:final_data(J)), K^L^M^(chr_translate:expand_data(K,L,M)), N),
        I=H,
        N=entry(O,P,_,_,_,_),
        reverse(O, E),
        reverse(P, F).
final_data(A) :-
        A=entry(_,_,_,_,[],_).
expand_data(A, B, C) :-
        A=entry(D,E,F,G,H,I),
        select2(J, K, G, H, L, M),
        chr_term_variables([J|F], N),
        B=entry([J|D],[K|E],N,L,M,I),
        order_score(J, K, F, L, I, C).
order_score(A, B, C, D, E, F) :-
        functor(A, G, H),
        get_store_type(G/H, I),
        order_score(I, A, B, C, D, E, F).
order_score(default, A, _, B, C, _, D) :-
        chr_term_variables(A, E),
        chr_term_variables(C, F),
        order_score_vars(E, B, F, D).
order_score(multi_hash(A), B, _, C, _, _, D) :-
        order_score_indexes(A, B, C, 0, D).
order_score(global_ground, A, _, B, C, _, D) :-
        chr_term_variables(A, E),
        chr_term_variables(C, F),
        order_score_vars(E, B, F, G),
        D is G*2.
order_score(global_singleton, _, _, _, _, _, A) :-
        A=1.
order_score(multi_store(A), B, C, D, E, F, G) :-
        find_with_var_identity(H, t(B,D,E), (lists:member(I,A),chr_translate:order_score(I,B,C,D,E,F,H)), J),
        min_list(J, G).
order_score_indexes([], _, _, A, B) :-
        A>0,
        B=100.
order_score_indexes([A|B], C, D, E, F) :-
        multi_hash_key_args(A, C, G),
        (   forall(H, G, memberchk_eq(H,D)) ->
            I is E+1
        ;   I=E
        ),
        order_score_indexes(B, C, D, I, F).
order_score_vars(A, B, C, D) :-
        order_score_count_vars(A, B, C, E-F-G),
        (   E-F-G==0-0-0 ->
            D=0
        ;   E>0 ->
            D is max(10-E,0)
        ;   F>0 ->
            D is max(10-F,1)*10
        ;   D is max(10-G,1)*100
        ).
order_score_count_vars([], _, _, 0-0-0).
order_score_count_vars([A|B], C, D, E-F-G) :-
        order_score_count_vars(B, C, D, H-I-J),
        (   memberchk_eq(A, C) ->
            E is H+1,
            F=I,
            G=J
        ;   memberchk_eq(A, D) ->
            F is I+1,
            E=H,
            G=J
        ;   G is J+1,
            E=H,
            F=I
        ).
create_get_mutable_ref(A, B, get_mutable(A,B)).
gen_var(_).
gen_vars(A, B) :-
        length(B, A).
head_info(A, B, C, D, E, F) :-
        vars_susp(B, C, D, E),
        A=..[_|G],
        pairup(G, C, F).
inc_id([A|B], [C|B]) :-
        C is A+1.
dec_id([A|B], [C|B]) :-
        C is A-1.
extend_id(A, [0|A]).
next_id([_,A|B], [C|B]) :-
        C is A+1.
build_head(A, B, C, D, E) :-
        buildName(A, B, C, F),
        (   (   chr_pp_flag(debugable, on)
            ;   is_stored(A/B),
                (   has_active_occurrence(A/B)
                ;   chr_pp_flag(late_allocation, off)
                ),
                (   may_trigger(A/B)
                ;   get_allocation_occurrence(A/B, G),
                    get_max_occurrence(A/B, H),
                    H>=G
                )
            ) ->
            E=..[F|D]
        ;   init(D, I),
            E=..[F|I]
        ).
buildName(A, B, C, D) :-
        (   (   chr_pp_flag(debugable, on)
            ;   once((is_stored(A/B),(has_active_occurrence(A/B);chr_pp_flag(late_allocation,off)),(may_trigger(A/B);get_allocation_occurrence(A/B,E),get_max_occurrence(A/B,F),F>=E);C\=[0]))
            ) ->
            atom_concat(A, /, G),
            atomic_concat(G, B, H),
            buildName_(C, H, D)
        ;   D=A
        ).
buildName_([], A, A).
buildName_([A|B], C, D) :-
        buildName_(B, C, E),
        atom_concat(E, '__', F),
        atomic_concat(F, A, D).
vars_susp(A, B, C, D) :-
        length(B, A),
        append(B, [C], D).
make_attr(A, B, C, D) :-
        length(C, A),
        D=..[v,B|C].
or_pattern(A, B) :-
        C is A-1,
        B is 1<<C.
and_pattern(A, B) :-
        C is A-1,
        D is 1<<C,
        B is-1*(D+1).
make_name(A, B/C, D) :-
        atom_concat_list([A,B,/,C], D).
lookup_passive_head(A, B, C, D, E) :-
        functor(A, F, G),
        get_store_type(F/G, H),
        lookup_passive_head(H, A, B, C, D, E).
lookup_passive_head(default, A, B, C, D, E) :-
        functor(A, _, _),
        passive_head_via(A, B, C, D, E).
lookup_passive_head(multi_inthash(A), B, _, C, D, E) :-
        once((member(F,A),multi_hash_key_args(F,B,G),(translate(G,C,H);ground(G),H=G))),
        (   H=[I] ->
            true
        ;   I=..[k|H]
        ),
        functor(B, J, K),
        multi_hash_via_lookup_name(J/K, F, L),
        D=..[L,I,E],
        update_store_type(J/K, multi_inthash([F])).
lookup_passive_head(multi_hash(A), B, _, C, D, E) :-
        once((member(F,A),multi_hash_key_args(F,B,G),(translate(G,C,H);ground(G),H=G))),
        (   H=[I] ->
            true
        ;   I=..[k|H]
        ),
        functor(B, J, K),
        multi_hash_via_lookup_name(J/K, F, L),
        D=..[L,I,E],
        update_store_type(J/K, multi_hash([F])).
lookup_passive_head(global_ground, A, _, _, B, C) :-
        functor(A, D, E),
        global_ground_store_name(D/E, F),
        make_get_store_goal(F, C, B),
        update_store_type(D/E, global_ground).
lookup_passive_head(global_singleton, A, _, _, B, C) :-
        functor(A, D, E),
        global_singleton_store_name(D/E, F),
        make_get_store_goal(F, G, H),
        B=(H,G\==[],C=[G]),
        update_store_type(D/E, global_singleton).
lookup_passive_head(multi_store(A), B, C, D, E, F) :-
        once((member(G,A),lookup_passive_head(G,B,C,D,E,F))).
existential_lookup(global_singleton, A, _, _, B, _, C, D, E, E) :- !,
        functor(A, F, G),
        global_singleton_store_name(F/G, H),
        make_get_store_goal(H, D, I),
        C=(I,D\==[],D=B),
        update_store_type(F/G, global_singleton).
existential_lookup(multi_store(A), B, C, D, E, F, G, H, I, J) :- !,
        once((member(K,A),existential_lookup(K,B,C,D,E,F,G,H,I,J))).
existential_lookup(multi_hash(A), B, _, C, D, E, F, G, H, I) :- !,
        once((member(J,A),multi_hash_key_args(J,B,K),(translate(K,C,L);ground(K),L=K))),
        (   L=[M] ->
            true
        ;   M=..[k|L]
        ),
        functor(B, N, O),
        multi_hash_via_lookup_name(N/O, J, P),
        Q=..[P,M,R],
        sbag_member_call(G, R, S),
        create_get_mutable_ref(active, E, T),
        F=(Q,S,G=D,T),
        hash_index_filter(H, J, I),
        update_store_type(N/O, multi_hash([J])).
existential_lookup(A, B, C, D, E, F, G, H, I, I) :-
        lookup_passive_head(A, B, C, D, J, K),
        sbag_member_call(H, K, L),
        create_get_mutable_ref(active, F, M),
        G=(J,L,H=E,M).
hash_index_filter(A, B, C) :-
        (   integer(B) ->
            D=[B]
        ;   D=B
        ),
        hash_index_filter(A, D, 1, C).
hash_index_filter([], _, _, []).
hash_index_filter([A|B], C, D, E) :-
        (   C=[F|G] ->
            H is D+1,
            (   F>D ->
                E=[A|I],
                hash_index_filter(B, [F|G], H, I)
            ;   F==D ->
                E=I,
                hash_index_filter(B, G, H, I)
            )
        ;   E=[A|B]
        ).
assume_constraint_stores([]).
assume_constraint_stores([A|B]) :-
        (   only_ground_indexed_arguments(A),
            is_stored(A),
            get_store_type(A, default) ->
            get_indexed_arguments(A, C),
            length(C, D),
            (   D>10 ->
                findall([E], member(E,C), F)
            ;   findall(E, (sublist(E,C),E\==[]), G),
                predsort(longer_list, G, F)
            ),
            (   get_functional_dependency(A, 1, H, I),
                all_distinct_var_args(H),
                I==[] ->
                assumed_store_type(A, global_singleton)
            ;   get_constraint_type(A, J),
                findall(E, (member(E,F),E=[K],nth(K,J,dense_int)), L),
                L\==[] ->
                list_difference_eq(F, L, M),
                (   M\==[] ->
                    assumed_store_type(A, multi_store([multi_inthash(L),multi_hash(M),global_ground]))
                ;   assumed_store_type(A, multi_store([multi_inthash(L),global_ground]))
                )
            ;   assumed_store_type(A, multi_store([multi_hash(F),global_ground]))
            )
        ;   true
        ),
        assume_constraint_stores(B).
longer_list(A, B, C) :-
        length(B, D),
        length(C, E),
        compare(F, E, D),
        (   F==(=) ->
            compare(A, B, C)
        ;   A=F
        ).
all_distinct_var_args(A) :-
        A=..[_|B],
        copy_term_nat(B, C),
        all_distinct_var_args_(C).
all_distinct_var_args_([]).
all_distinct_var_args_([A|B]) :-
        var(A),
        A=t,
        all_distinct_var_args_(B).
get_indexed_arguments(A, B) :-
        A=_/C,
        get_indexed_arguments(1, C, A, B).
get_indexed_arguments(A, B, C, D) :-
        (   A>B ->
            D=[]
        ;   (   is_indexed_argument(C, A) ->
                D=[A|E]
            ;   D=E
            ),
            F is A+1,
            get_indexed_arguments(F, B, C, E)
        ).
validate_store_type_assumptions([]).
validate_store_type_assumptions([A|B]) :-
        validate_store_type_assumption(A),
        validate_store_type_assumptions(B).
universal_search_iterator_end([A|B], C, D, E/F, G, H, I) :-
        D=rule(J,_,K,L),
        (   J==[],
            functor(A, M, N),
            check_fd_lookup_condition(M, N, A, B) ->
            H=I
        ;   gen_var_susp_list_for_b(B, [A,C,K,L], _, O, P, _, Q),
            universal_search_iterator_failure_vars(B, G, O, P, Q, R, S),
            flatten(O, T),
            U=[[]|T],
            build_head(E, F, G, U, V),
            build_head(E, F, S, R, W),
            X=(V:-W),
            H=[X|I]
        ).
universal_search_iterator_failure_vars(A, B, C, D, E, F, G) :-
        (   B=[0|_] ->
            next_id(B, G),
            F=D
        ;   C=[_|H],
            dec_id(B, I),
            (   A=[J|K],
                functor(J, L, M),
                check_fd_lookup_condition(L, M, J, K) ->
                E=[_|N],
                universal_search_iterator_failure_vars(K, I, H, D, N, F, G)
            ;   G=I,
                flatten(H, O),
                E=[P|_],
                F=[P|O]
            )
        ).
universal_search_iterator([A|B], [C|D], E, F/G, H, I, J) :-
        E=rule(_,_,K,L),
        gen_var_susp_list_for_b(D, [C,A,B,K,L], M, N, O, P, Q),
        init(P, R),
        flatten(N, S),
        gen_var(T),
        functor(C, U, V),
        gen_vars(V, W),
        head_info(C, V, W, X, _, Y),
        get_constraint_mode(U/V, Z),
        head_arg_matches(Y, Z, M, A1, B1),
        delay_phase_end(validate_store_type_assumptions, (static_suspension_term(U/V,C1),get_static_suspension_term_field(state,U/V,C1,D1),get_static_suspension_term_field(arguments,U/V,C1,W))),
        different_from_other_susps(C, X, D, R, E1),
        create_get_mutable_ref(active, D1, F1),
        G1=(X=C1,F1,E1,A1),
        lookup_passive_head(A, [C|D], B1, H1, I1),
        inc_id(H, J1),
        K1=[[X|T]|S],
        build_head(F, G, H, K1, L1),
        passive_delegate_variables(C, D, [A,B,K,L], B1, M1),
        append([I1|M1], [X,T|S], N1),
        build_head(F, G, J1, N1, O1),
        (   check_fd_lookup_condition(U, V, C, D) ->
            universal_search_iterator_failure_vars(D, H, N, O, Q, P1, Q1),
            R1=P1
        ;   R1=[T|S],
            Q1=H
        ),
        build_head(F, G, Q1, R1, S1),
        T1=(L1:-G1,H1->O1;S1),
        I=[T1|J].
ai_observation_analysis(A) :-
        (   chr_pp_flag(ai_observation_analysis, on),
            get_target_module(B),
            B\==chr_translate ->
            list_to_ord_set(A, _),
            abstract_constraints(A),
            ai_observation_schedule_initial_calls(A),
            ai_observation_gather_results
        ;   true
        ).
ai_observation_schedule_initial_calls([]).
ai_observation_schedule_initial_calls([A|B]) :-
        ai_observation_schedule_initial_call(A),
        ai_observation_schedule_initial_calls(B).
ai_observation_schedule_initial_call(A) :-
        ai_observation_top(A, B),
        initial_call_pattern(B).
ai_observation_schedule_new_calls([], _).
ai_observation_schedule_new_calls([A|B], C) :-
        C=odom(_,D),
        initial_call_pattern(odom(A,D)),
        ai_observation_schedule_new_calls(B, C).
ai_observation_lub(odom(A,B), odom(A,C), odom(A,D)) :-
        ord_intersection(B, C, D).
ai_observation_top(A, odom(A,B)) :-
        ord_empty(B).
ai_observation_leq(odom(A,B), odom(A,C)) :-
        ord_subset(C, B).
ai_observation_observe_list(odom(A,B), C, odom(A,D)) :-
        list_to_ord_set(C, E),
        ord_subtract(B, E, D).
ai_observation_abstract_constraint(A, B, C) :-
        functor(A, D, E),
        C=D/E,
        member(C, B).
ai_observation_abstract_constraints(A, B, C) :-
        findall(D, (member(E,A),ai_observation_abstract_constraint(E,B,D)), C).
ai_observation_abstract_goal_(A, B, C, D, E, F) :-
        chr_term_variables((A,B,C), G),
        append(A, B, H),
        ground_vars(H, I),
        list_difference_eq(G, I, J),
        ai_observation_abstract_goal(D, E, F, [], J), !.
ground_vars([], []).
ground_vars([A|B], C) :-
        functor(A, D, E),
        get_constraint_mode(D/E, F),
        head_info(A, E, _, _, _, G),
        head_arg_matches(G, F, [], _, _, [], H),
        ground_vars(B, I),
        append(H, I, C).
ai_observation_abstract_goal((A,B), C, D, E, F) :- !,
        ai_observation_abstract_goal(A, C, D, G, F),
        ai_observation_abstract_goal(B, C, G, E, F).
ai_observation_abstract_goal((A;B), C, D, E, F) :- !,
        ai_observation_abstract_goal(A, C, D, G, F),
        ai_observation_abstract_goal(B, C, G, E, F).
ai_observation_abstract_goal((A->B), C, D, E, F) :- !,
        ai_observation_abstract_goal(A, C, D, G, F),
        ai_observation_abstract_goal(B, C, G, E, F).
ai_observation_abstract_goal(A, B, [C|D], D, _) :-
        ai_observation_abstract_constraint(A, B, C), !.
ai_observation_abstract_goal(true, _, A, A, _) :- !.
ai_observation_abstract_goal(writeln(_), _, A, A, _) :- !.
ai_observation_abstract_goal(A, _, B, B, C) :-
        binds_b(A, D),
        intersect_eq(D, C, []), !.
ai_observation_abstract_goal(_, _, [A|B], B, _) :-
        A=builtin.
ai_observation_is_observed(odom(_,A), B) :-
        \+ord_memberchk(B,A).
unconditional_occurrence(A, B) :-
        get_occurrence(A, B, C, _),
        get_rule(C, D),
        D=pragma(E,_,_,_,_),
        copy_term_nat(E, F),
        F=rule(G,H,I,_),
        guard_entailment:entails_guard([chr_pp_headvariables(G,H)], I),
        once((G=[J],H==[];H=[J],G==[],\+may_trigger(A))),
        functor(J, _, _),
        J=..[_|K],
        unconditional_occurrence_args(K).
unconditional_occurrence_args([]).
unconditional_occurrence_args([A|B]) :-
        var(A),
        A=x,
        unconditional_occurrence_args(B).
generate_show_constraint(A, B, C, D) :-
        (   chr_pp_flag(show, on) ->
            B=['$show'/0|A],
            generate_show_rules(A, D, [E|C]),
            inc_rule_count(F),
            E=pragma(rule(['$show'],[],true,true),ids([0],[]),[],no,F)
        ;   B=A,
            D=C
        ).
generate_show_rules([], A, A).
generate_show_rules([A/B|C], [D|E], F) :-
        functor(G, A, B),
        inc_rule_count(H),
        D=pragma(rule([],['$show',G],true,writeln(G)),ids([],[0,1]),[passive(1)],no,H),
        generate_show_rules(C, E, F).
static_suspension_term(A/B, C) :-
        suspension_term_base(A/B, D),
        E is D+B,
        functor(C, suspension, E).
suspension_term_base(A, B) :-
        suspension_term_base_fields(A, C),
        length(C, B).
suspension_term_base_fields(A, B) :-
        B=[id,state|C],
        (   chr_pp_flag(debugable, on) ->
            C=[history,generation,continuation,functor]
        ;   (   uses_history(A) ->
                C=[history|D]
            ;   C=D
            ),
            (   only_ground_indexed_arguments(A) ->
                get_store_type(A, E),
                basic_store_types(E, F),
                (   memberchk(global_ground, F) ->
                    D=[global_list_prev]
                ;   D=[]
                )
            ;   may_trigger(A) ->
                D=[generation,continuation,global_list_prev]
            ;   D=[global_list_prev]
            )
        ).
get_static_suspension_term_field(A, B, C, D) :-
        suspension_term_base_fields(B, E),
        nth(F, E, A), !,
        arg(F, C, D).
get_static_suspension_term_field(arguments, A, B, C) :- !,
        suspension_term_base(A, D),
        B=..[_|E],
        drop(D, E, C).
get_static_suspension_term_field(A, B, _, _) :-
        chr_error(internal, 'Trying to obtain field ~w of ~w, wich does not have it!', [A,B]).
get_dynamic_suspension_term_field(A, B, C, D, E) :-
        suspension_term_base_fields(B, F),
        nth(G, F, A), !,
        E=arg(G,C,D).
get_dynamic_suspension_term_field(arguments, A, B, C, D) :- !,
        static_suspension_term(A, E),
        get_static_suspension_term_field(arguments, A, E, C),
        D=(B=E).
get_dynamic_suspension_term_field(argument(A), B, C, D, E) :- !,
        suspension_term_base(B, F),
        G is A+F,
        E=arg(G,C,D).
get_dynamic_suspension_term_field(A, B, _, _, _) :-
        chr_error(internal, 'Dynamic goal to get ~w of ~w, which does not have this field!', [A,B]).
set_dynamic_suspension_term_field(A, B, C, D, E) :-
        suspension_term_base_fields(B, F),
        nth(G, F, A), !,
        E=setarg(G,C,D).
set_dynamic_suspension_term_field(A, B, _, _, _) :-
        chr_error(internal, 'Dynamic goal to set ~w of ~w, which does not have this field!', [A,B]).
basic_store_types(multi_store(A), A) :- !.
basic_store_types(A, [A]).
chr_runtime_call(A, chr_runtime:A).
attvar_call(A, hpattvars:A).
hprolog_call(A, hprolog:A).
(:-current_prolog_flag(discontiguous_warnings,A),(bb_get(chr_discontiguous_stack,B)->bb_put(chr_discontiguous_stack,[A|B]);bb_put(chr_discontiguous_stack,[A])),set_prolog_flag(discontiguous_warnings,off)).
'attach_type_definition/2'([], _).
'attach_type_definition/2'([A|B], C) :-
        (   hpattvars:get_attr(A, chr_translate, D) ->
            D=v(E,F,G,H),
            (   E/\1=:=1 ->
                hpattvars:put_attr(A, chr_translate, v(E,[C|F],G,H))
            ;   I is E\/1,
                hpattvars:put_attr(A, chr_translate, v(I,[C],G,H))
            )
        ;   hpattvars:put_attr(A, chr_translate, v(1,[C],[],[]))
        ),
        true,
        'attach_type_definition/2'(B, C).
'detach_type_definition/2'([], _).
'detach_type_definition/2'([A|B], C) :-
        (   hpattvars:get_attr(A, chr_translate, D) ->
            D=v(E,F,G,H),
            (   E/\1=:=1 ->
                chr_runtime:'chr sbag_del_element'(F, C, I),
                (   I==[] ->
                    J is E/\ -2,
                    (   J==0 ->
                        hpattvars:del_attr(A, chr_translate)
                    ;   hpattvars:put_attr(A, chr_translate, v(J,[],G,H))
                    )
                ;   hpattvars:put_attr(A, chr_translate, v(E,I,G,H))
                )
            ;   true
            )
        ;   true
        ),
        'detach_type_definition/2'(B, C).
'attach_type_alias/2'([], _).
'attach_type_alias/2'([A|B], C) :-
        (   hpattvars:get_attr(A, chr_translate, D) ->
            D=v(E,F,G,H),
            (   E/\2=:=2 ->
                hpattvars:put_attr(A, chr_translate, v(E,F,[C|G],H))
            ;   I is E\/2,
                hpattvars:put_attr(A, chr_translate, v(I,F,[C],H))
            )
        ;   hpattvars:put_attr(A, chr_translate, v(2,[],[C],[]))
        ),
        true,
        'attach_type_alias/2'(B, C).
'detach_type_alias/2'([], _).
'detach_type_alias/2'([A|B], C) :-
        (   hpattvars:get_attr(A, chr_translate, D) ->
            D=v(E,F,G,H),
            (   E/\2=:=2 ->
                chr_runtime:'chr sbag_del_element'(G, C, I),
                (   I==[] ->
                    J is E/\ -3,
                    (   J==0 ->
                        hpattvars:del_attr(A, chr_translate)
                    ;   hpattvars:put_attr(A, chr_translate, v(J,F,[],H))
                    )
                ;   hpattvars:put_attr(A, chr_translate, v(E,F,I,H))
                )
            ;   true
            )
        ;   true
        ),
        'detach_type_alias/2'(B, C).
'attach_does_use_history/1'([], _).
'attach_does_use_history/1'([A|B], C) :-
        (   hpattvars:get_attr(A, chr_translate, D) ->
            D=v(E,F,G,H),
            (   E/\4=:=4 ->
                hpattvars:put_attr(A, chr_translate, v(E,F,G,[C|H]))
            ;   I is E\/4,
                hpattvars:put_attr(A, chr_translate, v(I,F,G,[C]))
            )
        ;   hpattvars:put_attr(A, chr_translate, v(4,[],[],[C]))
        ),
        true,
        'attach_does_use_history/1'(B, C).
'detach_does_use_history/1'([], _).
'detach_does_use_history/1'([A|B], C) :-
        (   hpattvars:get_attr(A, chr_translate, D) ->
            D=v(E,F,G,H),
            (   E/\4=:=4 ->
                chr_runtime:'chr sbag_del_element'(H, C, I),
                (   I==[] ->
                    J is E/\ -5,
                    (   J==0 ->
                        hpattvars:del_attr(A, chr_translate)
                    ;   hpattvars:put_attr(A, chr_translate, v(J,F,G,[]))
                    )
                ;   hpattvars:put_attr(A, chr_translate, v(E,F,G,I))
                )
            ;   true
            )
        ;   true
        ),
        'detach_does_use_history/1'(B, C).
attach_increment([], _).
attach_increment([A|B], v(C,D,E,F)) :-
        chr_runtime:'chr not_locked'(A),
        (   hpattvars:get_attr(A, chr_translate, G) ->
            G=v(H,I,J,K),
            sort(I, L),
            chr_runtime:'chr merge_attributes'(D, L, M),
            sort(J, N),
            chr_runtime:'chr merge_attributes'(E, N, O),
            sort(K, P),
            chr_runtime:'chr merge_attributes'(F, P, Q),
            R is C\/H,
            hpattvars:put_attr(A, chr_translate, v(R,M,O,Q))
        ;   hpattvars:put_attr(A, chr_translate, v(C,D,E,F))
        ),
        attach_increment(B, v(C,D,E,F)).
attr_unify_hook(v(A,B,C,D), E) :-
        sort(B, F),
        sort(C, G),
        sort(D, H),
        (   var(E) ->
            (   hpattvars:get_attr(E, chr_translate, I) ->
                I=v(J,K,L,M),
                sort(K, N),
                chr_runtime:'chr merge_attributes'(F, N, O),
                sort(L, P),
                chr_runtime:'chr merge_attributes'(G, P, Q),
                sort(M, R),
                chr_runtime:'chr merge_attributes'(H, R, S),
                T is A\/J,
                hpattvars:put_attr(E, chr_translate, v(T,O,Q,S)),
                true,
                '$run_suspensions_type_alias/2'(Q),
                '$run_suspensions_does_use_history/1'(S),
                true
            ;   hpattvars:put_attr(E, chr_translate, v(A,F,G,H)),
                true,
                '$run_suspensions_type_alias/2'(G),
                '$run_suspensions_does_use_history/1'(H),
                true
            )
        ;   (   compound(E) ->
                hprolog:chr_term_variables(E, U),
                attach_increment(U, v(A,F,G,H))
            ;   true
            ),
            true,
            '$run_suspensions_type_alias/2'(G),
            '$run_suspensions_does_use_history/1'(H),
            true
        ).
'$activate_constraint_constraint_mode/2'(A, B) :-
        arg(2, B, C),
        chr_runtime:'chr get_mutable'(D, C),
        chr_runtime:'chr update_mutable'(active, C),
        true,
        (   D==not_stored_yet ->
            A=yes
        ;   A=no
        ).
'$activate_constraint_passive/2'(A, B) :-
        arg(2, B, C),
        chr_runtime:'chr get_mutable'(D, C),
        chr_runtime:'chr update_mutable'(active, C),
        true,
        (   D==not_stored_yet ->
            A=yes
        ;   A=no
        ).
'$activate_constraint_occurrence/4'(A, B) :-
        arg(2, B, C),
        chr_runtime:'chr get_mutable'(D, C),
        chr_runtime:'chr update_mutable'(active, C),
        true,
        (   D==not_stored_yet ->
            A=yes
        ;   A=no
        ).
'$activate_constraint_max_occurrence/2'(A, B) :-
        arg(2, B, C),
        chr_runtime:'chr get_mutable'(D, C),
        chr_runtime:'chr update_mutable'(active, C),
        true,
        (   D==not_stored_yet ->
            A=yes
        ;   A=no
        ).
'$activate_constraint_allocation_occurrence/2'(A, B) :-
        arg(2, B, C),
        chr_runtime:'chr get_mutable'(D, C),
        chr_runtime:'chr update_mutable'(active, C),
        true,
        (   D==not_stored_yet ->
            A=yes
        ;   A=no
        ).
'$activate_constraint_rule/2'(A, B) :-
        arg(2, B, C),
        chr_runtime:'chr get_mutable'(D, C),
        chr_runtime:'chr update_mutable'(active, C),
        true,
        (   D==not_stored_yet ->
            A=yes
        ;   A=no
        ).
'$activate_constraint_least_occurrence/2'(A, B) :-
        arg(2, B, C),
        chr_runtime:'chr get_mutable'(D, C),
        chr_runtime:'chr update_mutable'(active, C),
        true,
        (   D==not_stored_yet ->
            A=yes
        ;   A=no
        ).
'$activate_constraint_observes/2'(A, B) :-
        arg(2, B, C),
        chr_runtime:'chr get_mutable'(D, C),
        chr_runtime:'chr update_mutable'(active, C),
        true,
        (   D==not_stored_yet ->
            A=yes
        ;   A=no
        ).
'$activate_constraint_spawns_observer/2'(A, B) :-
        arg(2, B, C),
        chr_runtime:'chr get_mutable'(D, C),
        chr_runtime:'chr update_mutable'(active, C),
        true,
        (   D==not_stored_yet ->
            A=yes
        ;   A=no
        ).
'$activate_constraint_observes_indirectly/2'(A, B) :-
        arg(2, B, C),
        chr_runtime:'chr get_mutable'(D, C),
        chr_runtime:'chr update_mutable'(active, C),
        true,
        (   D==not_stored_yet ->
            A=yes
        ;   A=no
        ).
'$activate_constraint_prev_guard_list/7'(A, B) :-
        arg(2, B, C),
        chr_runtime:'chr get_mutable'(D, C),
        chr_runtime:'chr update_mutable'(active, C),
        true,
        (   D==not_stored_yet ->
            A=yes
        ;   A=no
        ).
'$activate_constraint_set_all_passive/1'(A, B) :-
        arg(2, B, C),
        chr_runtime:'chr get_mutable'(D, C),
        chr_runtime:'chr update_mutable'(active, C),
        true,
        (   D==not_stored_yet ->
            A=yes
        ;   A=no
        ).
'$activate_constraint_type_definition/2'(A, B, C) :-
        arg(2, C, D),
        chr_runtime:'chr get_mutable'(E, D),
        chr_runtime:'chr update_mutable'(active, D),
        true,
        (   E==not_stored_yet ->
            A=yes,
            C=suspension(_,_,_,F,G),
            hprolog:chr_term_variables([F,G], B),
            chr_runtime:'chr none_locked'(B)
        ;   B=[],
            A=no
        ).
'$activate_constraint_type_alias/2'(A, B, C, D) :-
        arg(2, C, E),
        chr_runtime:'chr get_mutable'(F, E),
        chr_runtime:'chr update_mutable'(active, E),
        arg(3, C, G),
        chr_runtime:'chr get_mutable'(H, G),
        D is H+1,
        chr_runtime:'chr update_mutable'(D, G),
        (   F==not_stored_yet ->
            A=yes,
            C=suspension(_,_,_,_,_,I,J),
            hprolog:chr_term_variables([I,J], B),
            chr_runtime:'chr none_locked'(B)
        ;   B=[],
            A=no
        ).
'$activate_constraint_stored_complete/3'(A, B) :-
        arg(2, B, C),
        chr_runtime:'chr get_mutable'(D, C),
        chr_runtime:'chr update_mutable'(active, C),
        true,
        (   D==not_stored_yet ->
            A=yes
        ;   A=no
        ).
'$activate_constraint_initial_call_pattern/1'(A, B) :-
        arg(2, B, C),
        chr_runtime:'chr get_mutable'(D, C),
        chr_runtime:'chr update_mutable'(active, C),
        true,
        (   D==not_stored_yet ->
            A=yes
        ;   A=no
        ).
'$activate_constraint_call_pattern/1'(A, B) :-
        arg(2, B, C),
        chr_runtime:'chr get_mutable'(D, C),
        chr_runtime:'chr update_mutable'(active, C),
        true,
        (   D==not_stored_yet ->
            A=yes
        ;   A=no
        ).
'$activate_constraint_final_answer_pattern/2'(A, B) :-
        arg(2, B, C),
        chr_runtime:'chr get_mutable'(D, C),
        chr_runtime:'chr update_mutable'(active, C),
        true,
        (   D==not_stored_yet ->
            A=yes
        ;   A=no
        ).
'$activate_constraint_abstract_constraints/1'(A, B) :-
        arg(2, B, C),
        chr_runtime:'chr get_mutable'(D, C),
        chr_runtime:'chr update_mutable'(active, C),
        true,
        (   D==not_stored_yet ->
            A=yes
        ;   A=no
        ).
'$activate_constraint_depends_on/2'(A, B) :-
        arg(2, B, C),
        chr_runtime:'chr get_mutable'(D, C),
        chr_runtime:'chr update_mutable'(active, C),
        true,
        (   D==not_stored_yet ->
            A=yes
        ;   A=no
        ).
'$activate_constraint_depends_on_ap/4'(A, B) :-
        arg(2, B, C),
        chr_runtime:'chr get_mutable'(D, C),
        chr_runtime:'chr update_mutable'(active, C),
        true,
        (   D==not_stored_yet ->
            A=yes
        ;   A=no
        ).
'$activate_constraint_depends_on_goal/2'(A, B) :-
        arg(2, B, C),
        chr_runtime:'chr get_mutable'(D, C),
        chr_runtime:'chr update_mutable'(active, C),
        true,
        (   D==not_stored_yet ->
            A=yes
        ;   A=no
        ).
'$activate_constraint_ai_not_observed/2'(A, B) :-
        arg(2, B, C),
        chr_runtime:'chr get_mutable'(D, C),
        chr_runtime:'chr update_mutable'(active, C),
        true,
        (   D==not_stored_yet ->
            A=yes
        ;   A=no
        ).
'$activate_constraint_depends_on_as/3'(A, B) :-
        arg(2, B, C),
        chr_runtime:'chr get_mutable'(D, C),
        chr_runtime:'chr update_mutable'(active, C),
        true,
        (   D==not_stored_yet ->
            A=yes
        ;   A=no
        ).
'$activate_constraint_ai_observation_gather_results/0'(A, B) :-
        arg(2, B, C),
        chr_runtime:'chr get_mutable'(D, C),
        chr_runtime:'chr update_mutable'(active, C),
        true,
        (   D==not_stored_yet ->
            A=yes
        ;   A=no
        ).
'$activate_constraint_phase_end/1'(A, B) :-
        arg(2, B, C),
        chr_runtime:'chr get_mutable'(D, C),
        chr_runtime:'chr update_mutable'(active, C),
        true,
        (   D==not_stored_yet ->
            A=yes
        ;   A=no
        ).
'$activate_constraint_does_use_history/1'(A, B, C, D) :-
        arg(2, C, E),
        chr_runtime:'chr get_mutable'(F, E),
        chr_runtime:'chr update_mutable'(active, E),
        arg(3, C, G),
        chr_runtime:'chr get_mutable'(H, G),
        D is H+1,
        chr_runtime:'chr update_mutable'(D, G),
        (   F==not_stored_yet ->
            A=yes,
            C=suspension(_,_,_,_,_,I),
            hprolog:chr_term_variables([I], B),
            chr_runtime:'chr none_locked'(B)
        ;   B=[],
            A=no
        ).
'$remove_constraint_internal_store_type/2'(suspension(_,A,_,_), B) :-
        chr_runtime:'chr get_mutable'(C, A),
        chr_runtime:'chr update_mutable'(removed, A),
        (   C==not_stored_yet ->
            B=no
        ;   B=yes
        ).
'$remove_constraint_internal_actual_store_types/2'(suspension(_,A,_,_), B) :-
        chr_runtime:'chr get_mutable'(C, A),
        chr_runtime:'chr update_mutable'(removed, A),
        (   C==not_stored_yet ->
            B=no
        ;   B=yes
        ).
'$remove_constraint_internal_assumed_store_type/2'(suspension(_,A,_,_), B) :-
        chr_runtime:'chr get_mutable'(C, A),
        chr_runtime:'chr update_mutable'(removed, A),
        (   C==not_stored_yet ->
            B=no
        ;   B=yes
        ).
'$remove_constraint_internal_rule_count/1'(suspension(_,A,_,_), B) :-
        chr_runtime:'chr get_mutable'(C, A),
        chr_runtime:'chr update_mutable'(removed, A),
        (   C==not_stored_yet ->
            B=no
        ;   B=yes
        ).
'$remove_constraint_internal_max_occurrence/2'(suspension(_,A,_,_,_), B) :-
        chr_runtime:'chr get_mutable'(C, A),
        chr_runtime:'chr update_mutable'(removed, A),
        (   C==not_stored_yet ->
            B=no
        ;   B=yes
        ).
'$remove_constraint_internal_allocation_occurrence/2'(suspension(_,A,_,_), B) :-
        chr_runtime:'chr get_mutable'(C, A),
        chr_runtime:'chr update_mutable'(removed, A),
        (   C==not_stored_yet ->
            B=no
        ;   B=yes
        ).
'$remove_constraint_internal_rule/2'(suspension(_,A,_,_,_), B) :-
        chr_runtime:'chr get_mutable'(C, A),
        chr_runtime:'chr update_mutable'(removed, A),
        (   C==not_stored_yet ->
            B=no
        ;   B=yes
        ).
'$remove_constraint_internal_least_occurrence/2'(suspension(_,A,_,_), B) :-
        chr_runtime:'chr get_mutable'(C, A),
        chr_runtime:'chr update_mutable'(removed, A),
        (   C==not_stored_yet ->
            B=no
        ;   B=yes
        ).
'$remove_constraint_internal_indexing_spec/2'(suspension(_,A,_,_), B) :-
        chr_runtime:'chr get_mutable'(C, A),
        chr_runtime:'chr update_mutable'(removed, A),
        (   C==not_stored_yet ->
            B=no
        ;   B=yes
        ).
'$remove_constraint_internal_module_initializer/1'(suspension(_,A,_,_), B) :-
        chr_runtime:'chr get_mutable'(C, A),
        chr_runtime:'chr update_mutable'(removed, A),
        (   C==not_stored_yet ->
            B=no
        ;   B=yes
        ).
'$remove_constraint_internal_prolog_global_variable/1'(suspension(_,A,_,_), B) :-
        chr_runtime:'chr get_mutable'(C, A),
        chr_runtime:'chr update_mutable'(removed, A),
        (   C==not_stored_yet ->
            B=no
        ;   B=yes
        ).
'$remove_constraint_internal_prev_guard_list/7'(suspension(_,A,_,_,_,_,_,_,_,_), B) :-
        chr_runtime:'chr get_mutable'(C, A),
        chr_runtime:'chr update_mutable'(removed, A),
        (   C==not_stored_yet ->
            B=no
        ;   B=yes
        ).
'$remove_constraint_internal_set_all_passive/1'(suspension(_,A,_,_), B) :-
        chr_runtime:'chr get_mutable'(C, A),
        chr_runtime:'chr update_mutable'(removed, A),
        (   C==not_stored_yet ->
            B=no
        ;   B=yes
        ).
'$remove_constraint_internal_multiple_occ_constraints_checked/1'(suspension(_,A,_,_), B) :-
        chr_runtime:'chr get_mutable'(C, A),
        chr_runtime:'chr update_mutable'(removed, A),
        (   C==not_stored_yet ->
            B=no
        ;   B=yes
        ).
'$remove_constraint_internal_type_alias/2'(suspension(_,A,_,_,_,B,C), D, E) :-
        chr_runtime:'chr get_mutable'(F, A),
        chr_runtime:'chr update_mutable'(removed, A),
        (   F==not_stored_yet ->
            D=[],
            E=no
        ;   E=yes,
            hprolog:chr_term_variables([B,C], D)
        ).
'$remove_constraint_internal_add_type_information/3'(suspension(_,A,_,_,_,_), B) :-
        chr_runtime:'chr get_mutable'(C, A),
        chr_runtime:'chr update_mutable'(removed, A),
        (   C==not_stored_yet ->
            B=no
        ;   B=yes
        ).
'$remove_constraint_internal_stored/3'(suspension(_,A,_,_,_), B) :-
        chr_runtime:'chr get_mutable'(C, A),
        chr_runtime:'chr update_mutable'(removed, A),
        (   C==not_stored_yet ->
            B=no
        ;   B=yes
        ).
'$remove_constraint_internal_stored_complete/3'(suspension(_,A,_,_,_,_), B) :-
        chr_runtime:'chr get_mutable'(C, A),
        chr_runtime:'chr update_mutable'(removed, A),
        (   C==not_stored_yet ->
            B=no
        ;   B=yes
        ).
'$remove_constraint_internal_check_all_passive/2'(suspension(_,A,_,_), B) :-
        chr_runtime:'chr get_mutable'(C, A),
        chr_runtime:'chr update_mutable'(removed, A),
        (   C==not_stored_yet ->
            B=no
        ;   B=yes
        ).
'$remove_constraint_internal_functional_dependency/4'(suspension(_,A,_,_,_,_), B) :-
        chr_runtime:'chr get_mutable'(C, A),
        chr_runtime:'chr update_mutable'(removed, A),
        (   C==not_stored_yet ->
            B=no
        ;   B=yes
        ).
'$remove_constraint_internal_final_answer_pattern/2'(suspension(_,A,_,_,_), B) :-
        chr_runtime:'chr get_mutable'(C, A),
        chr_runtime:'chr update_mutable'(removed, A),
        (   C==not_stored_yet ->
            B=no
        ;   B=yes
        ).
'$remove_constraint_internal_depends_on/2'(suspension(_,A,_,_,_), B) :-
        chr_runtime:'chr get_mutable'(C, A),
        chr_runtime:'chr update_mutable'(removed, A),
        (   C==not_stored_yet ->
            B=no
        ;   B=yes
        ).
'$remove_constraint_internal_ai_observed_internal/2'(suspension(_,A,_,_,_), B) :-
        chr_runtime:'chr get_mutable'(C, A),
        chr_runtime:'chr update_mutable'(removed, A),
        (   C==not_stored_yet ->
            B=no
        ;   B=yes
        ).
'$remove_constraint_internal_ai_not_observed_internal/2'(suspension(_,A,_,_,_), B) :-
        chr_runtime:'chr get_mutable'(C, A),
        chr_runtime:'chr update_mutable'(removed, A),
        (   C==not_stored_yet ->
            B=no
        ;   B=yes
        ).
'$remove_constraint_internal_ai_observation_gather_results/0'(suspension(_,A,_), B) :-
        chr_runtime:'chr get_mutable'(C, A),
        chr_runtime:'chr update_mutable'(removed, A),
        (   C==not_stored_yet ->
            B=no
        ;   B=yes
        ).
'$remove_constraint_internal_phase_end/1'(suspension(_,A,_), B) :-
        chr_runtime:'chr get_mutable'(C, A),
        chr_runtime:'chr update_mutable'(removed, A),
        (   C==not_stored_yet ->
            B=no
        ;   B=yes
        ).
'$remove_constraint_internal_delay_phase_end/2'(suspension(_,A,_,_), B) :-
        chr_runtime:'chr get_mutable'(C, A),
        chr_runtime:'chr update_mutable'(removed, A),
        (   C==not_stored_yet ->
            B=no
        ;   B=yes
        ).
'$remove_constraint_internal_does_use_history/1'(suspension(_,A,_,_,_,B), C, D) :-
        chr_runtime:'chr get_mutable'(E, A),
        chr_runtime:'chr update_mutable'(removed, A),
        (   E==not_stored_yet ->
            C=[],
            D=no
        ;   D=yes,
            hprolog:chr_term_variables([B], C)
        ).
'$allocate_constraint_constraint_mode/2'(suspension(A,B,_,C,D), C, D) :-
        true,
        true,
        chr_runtime:'chr create_mutable'(not_stored_yet, B),
        chr_runtime:'chr gen_id'(A).
'$allocate_constraint_passive/2'(suspension(A,B,C,D,E), D, E) :-
        true,
        chr_runtime:'chr create_mutable'(empty, C),
        chr_runtime:'chr create_mutable'(not_stored_yet, B),
        chr_runtime:'chr gen_id'(A).
'$allocate_constraint_occurrence/4'(suspension(A,B,C,_,D,E,F,G), D, E, F, G) :-
        true,
        chr_runtime:'chr create_mutable'(empty, C),
        chr_runtime:'chr create_mutable'(not_stored_yet, B),
        chr_runtime:'chr gen_id'(A).
'$allocate_constraint_max_occurrence/2'(suspension(A,B,C,D,E), D, E) :-
        true,
        chr_runtime:'chr create_mutable'(empty, C),
        chr_runtime:'chr create_mutable'(not_stored_yet, B),
        chr_runtime:'chr gen_id'(A).
'$allocate_constraint_allocation_occurrence/2'(suspension(A,B,C,D), C, D) :-
        true,
        true,
        chr_runtime:'chr create_mutable'(not_stored_yet, B),
        chr_runtime:'chr gen_id'(A).
'$allocate_constraint_rule/2'(suspension(A,B,C,D,E), D, E) :-
        true,
        chr_runtime:'chr create_mutable'(empty, C),
        chr_runtime:'chr create_mutable'(not_stored_yet, B),
        chr_runtime:'chr gen_id'(A).
'$allocate_constraint_least_occurrence/2'(suspension(A,B,C,D), C, D) :-
        true,
        true,
        chr_runtime:'chr create_mutable'(not_stored_yet, B),
        chr_runtime:'chr gen_id'(A).
'$allocate_constraint_observes/2'(suspension(A,B,C,D), C, D) :-
        true,
        true,
        chr_runtime:'chr create_mutable'(not_stored_yet, B),
        chr_runtime:'chr gen_id'(A).
'$allocate_constraint_spawns_observer/2'(suspension(A,B,C,D,E), D, E) :-
        true,
        chr_runtime:'chr create_mutable'(empty, C),
        chr_runtime:'chr create_mutable'(not_stored_yet, B),
        chr_runtime:'chr gen_id'(A).
'$allocate_constraint_observes_indirectly/2'(suspension(A,B,C,D,E), D, E) :-
        true,
        chr_runtime:'chr create_mutable'(empty, C),
        chr_runtime:'chr create_mutable'(not_stored_yet, B),
        chr_runtime:'chr gen_id'(A).
'$allocate_constraint_prev_guard_list/7'(suspension(A,B,C,D,E,F,G,H,I,J), D, E, F, G, H, I, J) :-
        true,
        chr_runtime:'chr create_mutable'(empty, C),
        chr_runtime:'chr create_mutable'(not_stored_yet, B),
        chr_runtime:'chr gen_id'(A).
'$allocate_constraint_set_all_passive/1'(suspension(A,B,C,D), D) :-
        true,
        chr_runtime:'chr create_mutable'(empty, C),
        chr_runtime:'chr create_mutable'(not_stored_yet, B),
        chr_runtime:'chr gen_id'(A).
'$allocate_constraint_type_alias/2'(A, suspension(B,C,D,A,_,E,F), E, F) :-
        chr_runtime:'chr create_mutable'(0, D),
        true,
        chr_runtime:'chr create_mutable'(not_stored_yet, C),
        chr_runtime:'chr gen_id'(B).
'$allocate_constraint_stored_complete/3'(suspension(A,B,C,D,E,F), D, E, F) :-
        true,
        chr_runtime:'chr create_mutable'(empty, C),
        chr_runtime:'chr create_mutable'(not_stored_yet, B),
        chr_runtime:'chr gen_id'(A).
'$allocate_constraint_initial_call_pattern/1'(suspension(A,B,C,_,D), D) :-
        true,
        chr_runtime:'chr create_mutable'(empty, C),
        chr_runtime:'chr create_mutable'(not_stored_yet, B),
        chr_runtime:'chr gen_id'(A).
'$allocate_constraint_call_pattern/1'(suspension(A,B,C,_,D), D) :-
        true,
        chr_runtime:'chr create_mutable'(empty, C),
        chr_runtime:'chr create_mutable'(not_stored_yet, B),
        chr_runtime:'chr gen_id'(A).
'$allocate_constraint_final_answer_pattern/2'(suspension(A,B,C,D,E), D, E) :-
        true,
        chr_runtime:'chr create_mutable'(empty, C),
        chr_runtime:'chr create_mutable'(not_stored_yet, B),
        chr_runtime:'chr gen_id'(A).
'$allocate_constraint_abstract_constraints/1'(suspension(A,B,C,_,D), D) :-
        true,
        chr_runtime:'chr create_mutable'(empty, C),
        chr_runtime:'chr create_mutable'(not_stored_yet, B),
        chr_runtime:'chr gen_id'(A).
'$allocate_constraint_depends_on/2'(suspension(A,B,C,D,E), D, E) :-
        true,
        chr_runtime:'chr create_mutable'(empty, C),
        chr_runtime:'chr create_mutable'(not_stored_yet, B),
        chr_runtime:'chr gen_id'(A).
'$allocate_constraint_depends_on_ap/4'(suspension(A,B,C,D,E,F,G), D, E, F, G) :-
        true,
        chr_runtime:'chr create_mutable'(empty, C),
        chr_runtime:'chr create_mutable'(not_stored_yet, B),
        chr_runtime:'chr gen_id'(A).
'$allocate_constraint_depends_on_goal/2'(suspension(A,B,C,D,E), D, E) :-
        true,
        chr_runtime:'chr create_mutable'(empty, C),
        chr_runtime:'chr create_mutable'(not_stored_yet, B),
        chr_runtime:'chr gen_id'(A).
'$allocate_constraint_ai_not_observed/2'(suspension(A,B,C,D), C, D) :-
        true,
        true,
        chr_runtime:'chr create_mutable'(not_stored_yet, B),
        chr_runtime:'chr gen_id'(A).
'$allocate_constraint_depends_on_as/3'(suspension(A,B,C,D,E,F), D, E, F) :-
        true,
        chr_runtime:'chr create_mutable'(empty, C),
        chr_runtime:'chr create_mutable'(not_stored_yet, B),
        chr_runtime:'chr gen_id'(A).
'$allocate_constraint_ai_observation_gather_results/0'(suspension(A,B,_)) :-
        true,
        true,
        chr_runtime:'chr create_mutable'(not_stored_yet, B),
        chr_runtime:'chr gen_id'(A).
'$allocate_constraint_phase_end/1'(suspension(A,B,C), C) :-
        true,
        true,
        chr_runtime:'chr create_mutable'(not_stored_yet, B),
        chr_runtime:'chr gen_id'(A).
'$insert_constraint_internal_target_module/1'(suspension(A,B,C), C) :-
        chr_runtime:'chr create_mutable'(active, B),
        true,
        true,
        chr_runtime:'chr gen_id'(A).
'$insert_constraint_internal_indexed_argument/2'(suspension(A,B,C,D), C, D) :-
        chr_runtime:'chr create_mutable'(active, B),
        true,
        true,
        chr_runtime:'chr gen_id'(A).
'$insert_constraint_internal_none_suspended_on_variables/0'(suspension(A,B)) :-
        chr_runtime:'chr create_mutable'(active, B),
        true,
        true,
        chr_runtime:'chr gen_id'(A).
'$insert_constraint_internal_store_type/2'(suspension(A,B,C,D), C, D) :-
        chr_runtime:'chr create_mutable'(active, B),
        true,
        true,
        chr_runtime:'chr gen_id'(A).
'$insert_constraint_internal_actual_store_types/2'(suspension(A,B,C,D), C, D) :-
        chr_runtime:'chr create_mutable'(active, B),
        true,
        true,
        chr_runtime:'chr gen_id'(A).
'$insert_constraint_internal_assumed_store_type/2'(suspension(A,B,C,D), C, D) :-
        chr_runtime:'chr create_mutable'(active, B),
        true,
        true,
        chr_runtime:'chr gen_id'(A).
'$insert_constraint_internal_rule_count/1'(suspension(A,B,_,C), C) :-
        chr_runtime:'chr create_mutable'(active, B),
        true,
        true,
        chr_runtime:'chr gen_id'(A).
'$insert_constraint_internal_constraint_index/2'(suspension(A,B,C,D), C, D) :-
        chr_runtime:'chr create_mutable'(active, B),
        true,
        true,
        chr_runtime:'chr gen_id'(A).
'$insert_constraint_internal_max_constraint_index/1'(suspension(A,B,_,C), C) :-
        chr_runtime:'chr create_mutable'(active, B),
        true,
        true,
        chr_runtime:'chr gen_id'(A).
'$insert_constraint_internal_no_history/1'(suspension(A,B,C), C) :-
        chr_runtime:'chr create_mutable'(active, B),
        true,
        true,
        chr_runtime:'chr gen_id'(A).
'$insert_constraint_internal_indexing_spec/2'(suspension(A,B,C,D), C, D) :-
        chr_runtime:'chr create_mutable'(active, B),
        true,
        true,
        chr_runtime:'chr gen_id'(A).
'$insert_constraint_internal_module_initializer/1'(suspension(A,B,_,C), C) :-
        chr_runtime:'chr create_mutable'(active, B),
        true,
        true,
        chr_runtime:'chr gen_id'(A).
'$insert_constraint_internal_prolog_global_variable/1'(suspension(A,B,_,C), C) :-
        chr_runtime:'chr create_mutable'(active, B),
        true,
        true,
        chr_runtime:'chr gen_id'(A).
'$insert_constraint_internal_multiple_occ_constraints_checked/1'(suspension(A,B,_,C), C) :-
        chr_runtime:'chr create_mutable'(active, B),
        true,
        true,
        chr_runtime:'chr gen_id'(A).
'$insert_constraint_internal_type_definition/2'(yes, A, suspension(B,C,_,D,E), D, E) :-
        hprolog:chr_term_variables([D,E], A),
        chr_runtime:'chr none_locked'(A),
        chr_runtime:'chr create_mutable'(active, C),
        chr_runtime:'chr create_mutable'(0, _),
        true,
        chr_runtime:'chr gen_id'(B).
'$insert_constraint_internal_constraint_type/2'(suspension(A,B,C,D), C, D) :-
        chr_runtime:'chr create_mutable'(active, B),
        true,
        true,
        chr_runtime:'chr gen_id'(A).
'$insert_constraint_internal_add_type_information/3'(suspension(A,B,_,C,D,E), C, D, E) :-
        chr_runtime:'chr create_mutable'(active, B),
        true,
        true,
        chr_runtime:'chr gen_id'(A).
'$insert_constraint_internal_stored/3'(suspension(A,B,C,D,E), C, D, E) :-
        chr_runtime:'chr create_mutable'(active, B),
        true,
        true,
        chr_runtime:'chr gen_id'(A).
'$insert_constraint_internal_check_all_passive/2'(suspension(A,B,C,D), C, D) :-
        chr_runtime:'chr create_mutable'(active, B),
        true,
        true,
        chr_runtime:'chr gen_id'(A).
'$insert_constraint_internal_constraints_code1/3'(suspension(A,B,_,C,D,E), C, D, E) :-
        chr_runtime:'chr create_mutable'(active, B),
        true,
        true,
        chr_runtime:'chr gen_id'(A).
'$insert_constraint_internal_use_auxiliary_predicate/1'(suspension(A,B,C), C) :-
        chr_runtime:'chr create_mutable'(active, B),
        true,
        true,
        chr_runtime:'chr gen_id'(A).
'$insert_constraint_internal_use_auxiliary_predicate/2'(suspension(A,B,C,D), C, D) :-
        chr_runtime:'chr create_mutable'(active, B),
        true,
        true,
        chr_runtime:'chr gen_id'(A).
'$insert_constraint_internal_functional_dependency/4'(suspension(A,B,C,D,E,F), C, D, E, F) :-
        chr_runtime:'chr create_mutable'(active, B),
        true,
        true,
        chr_runtime:'chr gen_id'(A).
'$insert_constraint_internal_ai_observed_internal/2'(suspension(A,B,_,C,D), C, D) :-
        chr_runtime:'chr create_mutable'(active, B),
        true,
        true,
        chr_runtime:'chr gen_id'(A).
'$insert_constraint_internal_ai_observed/2'(suspension(A,B,_,C,D), C, D) :-
        chr_runtime:'chr create_mutable'(active, B),
        true,
        true,
        chr_runtime:'chr gen_id'(A).
'$insert_constraint_internal_ai_not_observed_internal/2'(suspension(A,B,_,C,D), C, D) :-
        chr_runtime:'chr create_mutable'(active, B),
        true,
        true,
        chr_runtime:'chr gen_id'(A).
'$insert_constraint_internal_delay_phase_end/2'(suspension(A,B,C,D), C, D) :-
        chr_runtime:'chr create_mutable'(active, B),
        true,
        true,
        chr_runtime:'chr gen_id'(A).
'$insert_constraint_internal_does_use_history/1'(yes, A, suspension(B,C,D,E,_,F), E, F) :-
        hprolog:chr_term_variables([F], A),
        chr_runtime:'chr none_locked'(A),
        chr_runtime:'chr create_mutable'(active, C),
        chr_runtime:'chr create_mutable'(0, D),
        true,
        chr_runtime:'chr gen_id'(B).
'$novel_production'(A, B) :-
        arg(3, A, C),
        chr_runtime:'chr get_mutable'(D, C),
        (   hprolog:get_ds(B, D, _) ->
            fail
        ;   true
        ).
'$extend_history'(A, B) :-
        arg(3, A, C),
        chr_runtime:'chr get_mutable'(D, C),
        hprolog:put_ds(B, D, x, E),
        chr_runtime:'chr update_mutable'(E, C).
'$run_suspensions_type_alias/2'([]).
'$run_suspensions_type_alias/2'([A|B]) :-
        arg(2, A, C),
        chr_runtime:'chr get_mutable'(D, C),
        (   D==active ->
            chr_runtime:'chr update_mutable'(triggered, C),
            arg(3, A, E),
            chr_runtime:'chr get_mutable'(F, E),
            G is F+1,
            chr_runtime:'chr update_mutable'(G, E),
            arg(4, A, H),
            call(H),
            chr_runtime:'chr get_mutable'(I, C),
            (   I==triggered ->
                chr_runtime:'chr update_mutable'(active, C)
            ;   true
            )
        ;   true
        ),
        '$run_suspensions_type_alias/2'(B).
'$run_suspensions_does_use_history/1'([]).
'$run_suspensions_does_use_history/1'([A|B]) :-
        arg(2, A, C),
        chr_runtime:'chr get_mutable'(D, C),
        (   D==active ->
            chr_runtime:'chr update_mutable'(triggered, C),
            arg(3, A, E),
            chr_runtime:'chr get_mutable'(F, E),
            G is F+1,
            chr_runtime:'chr update_mutable'(G, E),
            arg(4, A, H),
            call(H),
            chr_runtime:'chr get_mutable'(I, C),
            (   I==triggered ->
                chr_runtime:'chr update_mutable'(active, C)
            ;   true
            )
        ;   true
        ),
        '$run_suspensions_does_use_history/1'(B).
'$insert_in_store_target_module/1'(A) :-
        true,
        hprolog:update_store('$chr_store_global_singleton_chr_translate:target_module/1', A).
'$delete_from_store_target_module/1'(_) :-
        true,
        hprolog:update_store('$chr_store_global_singleton_chr_translate:target_module/1', []).
'$insert_in_store_indexed_argument/2'(A) :-
        true,
        arg(3, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:indexed_argument/2-1', C),
        chr_hashtable_store:insert_ht(C, B, A),
        true,
        arg(3, A, D),
        arg(4, A, E),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:indexed_argument/2-12', F),
        chr_hashtable_store:insert_ht(F, k(D,E), A),
        true.
'$delete_from_store_indexed_argument/2'(A) :-
        true,
        arg(3, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:indexed_argument/2-1', C),
        chr_hashtable_store:delete_ht(C, B, A),
        true,
        arg(3, A, D),
        arg(4, A, E),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:indexed_argument/2-12', F),
        chr_hashtable_store:delete_ht(F, k(D,E), A),
        true.
'$insert_in_store_constraint_mode/2'(A) :-
        true,
        hprolog:get_store('$chr_store_global_ground_chr_translate:constraint_mode/2', B),
        hprolog:update_store('$chr_store_global_ground_chr_translate:constraint_mode/2', [A|B]),
        arg(4, A, C),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:constraint_mode/2-1', D),
        chr_hashtable_store:insert_ht(D, C, A),
        true.
'$delete_from_store_constraint_mode/2'(A) :-
        true,
        hprolog:get_store('$chr_store_global_ground_chr_translate:constraint_mode/2', B),
        chr_runtime:'chr sbag_del_element'(B, A, C),
        hprolog:update_store('$chr_store_global_ground_chr_translate:constraint_mode/2', C),
        arg(4, A, D),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:constraint_mode/2-1', E),
        chr_hashtable_store:delete_ht(E, D, A),
        true.
'$insert_in_store_none_suspended_on_variables/0'(A) :-
        true,
        hprolog:update_store('$chr_store_global_singleton_chr_translate:none_suspended_on_variables/0', A).
'$delete_from_store_none_suspended_on_variables/0'(_) :-
        true,
        hprolog:update_store('$chr_store_global_singleton_chr_translate:none_suspended_on_variables/0', []).
'$insert_in_store_store_type/2'(A) :-
        true,
        arg(3, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:store_type/2-1', C),
        chr_hashtable_store:insert_ht(C, B, A),
        true.
'$delete_from_store_store_type/2'(A) :-
        true,
        arg(3, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:store_type/2-1', C),
        chr_hashtable_store:delete_ht(C, B, A),
        true.
'$insert_in_store_actual_store_types/2'(A) :-
        true,
        arg(3, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:actual_store_types/2-1', C),
        chr_hashtable_store:insert_ht(C, B, A),
        true.
'$delete_from_store_actual_store_types/2'(A) :-
        true,
        arg(3, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:actual_store_types/2-1', C),
        chr_hashtable_store:delete_ht(C, B, A),
        true.
'$insert_in_store_assumed_store_type/2'(A) :-
        true,
        arg(3, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:assumed_store_type/2-1', C),
        chr_hashtable_store:insert_ht(C, B, A),
        true.
'$delete_from_store_assumed_store_type/2'(A) :-
        true,
        arg(3, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:assumed_store_type/2-1', C),
        chr_hashtable_store:delete_ht(C, B, A),
        true.
'$insert_in_store_rule_count/1'(A) :-
        true,
        hprolog:get_store('$chr_store_global_ground_chr_translate:rule_count/1', B),
        hprolog:update_store('$chr_store_global_ground_chr_translate:rule_count/1', [A|B]).
'$delete_from_store_rule_count/1'(A) :-
        true,
        hprolog:get_store('$chr_store_global_ground_chr_translate:rule_count/1', B),
        chr_runtime:'chr sbag_del_element'(B, A, C),
        hprolog:update_store('$chr_store_global_ground_chr_translate:rule_count/1', C).
'$insert_in_store_passive/2'(A) :-
        true,
        arg(4, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:passive/2-1', C),
        chr_hashtable_store:insert_ht(C, B, A),
        true,
        arg(4, A, D),
        arg(5, A, E),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:passive/2-12', F),
        chr_hashtable_store:insert_ht(F, k(D,E), A),
        true.
'$delete_from_store_passive/2'(A) :-
        true,
        arg(4, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:passive/2-1', C),
        chr_hashtable_store:delete_ht(C, B, A),
        true,
        arg(4, A, D),
        arg(5, A, E),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:passive/2-12', F),
        chr_hashtable_store:delete_ht(F, k(D,E), A),
        true.
'$insert_in_store_occurrence/4'(A) :-
        true,
        hprolog:get_store('$chr_store_global_ground_chr_translate:occurrence/4', B),
        hprolog:update_store('$chr_store_global_ground_chr_translate:occurrence/4', [A|B]),
        arg(5, A, C),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:occurrence/4-1', D),
        chr_hashtable_store:insert_ht(D, C, A),
        true,
        arg(5, A, E),
        arg(6, A, F),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:occurrence/4-12', G),
        chr_hashtable_store:insert_ht(G, k(E,F), A),
        true,
        arg(7, A, H),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:occurrence/4-3', I),
        chr_hashtable_store:insert_ht(I, H, A),
        true,
        arg(5, A, J),
        arg(7, A, K),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:occurrence/4-13', L),
        chr_hashtable_store:insert_ht(L, k(J,K), A),
        true,
        arg(7, A, M),
        arg(8, A, N),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:occurrence/4-34', O),
        chr_hashtable_store:insert_ht(O, k(M,N), A),
        true.
'$delete_from_store_occurrence/4'(A) :-
        true,
        hprolog:get_store('$chr_store_global_ground_chr_translate:occurrence/4', B),
        chr_runtime:'chr sbag_del_element'(B, A, C),
        hprolog:update_store('$chr_store_global_ground_chr_translate:occurrence/4', C),
        arg(5, A, D),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:occurrence/4-1', E),
        chr_hashtable_store:delete_ht(E, D, A),
        true,
        arg(5, A, F),
        arg(6, A, G),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:occurrence/4-12', H),
        chr_hashtable_store:delete_ht(H, k(F,G), A),
        true,
        arg(7, A, I),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:occurrence/4-3', J),
        chr_hashtable_store:delete_ht(J, I, A),
        true,
        arg(5, A, K),
        arg(7, A, L),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:occurrence/4-13', M),
        chr_hashtable_store:delete_ht(M, k(K,L), A),
        true,
        arg(7, A, N),
        arg(8, A, O),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:occurrence/4-34', P),
        chr_hashtable_store:delete_ht(P, k(N,O), A),
        true.
'$insert_in_store_max_occurrence/2'(A) :-
        true,
        arg(4, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:max_occurrence/2-1', C),
        chr_hashtable_store:insert_ht(C, B, A),
        true.
'$delete_from_store_max_occurrence/2'(A) :-
        true,
        arg(4, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:max_occurrence/2-1', C),
        chr_hashtable_store:delete_ht(C, B, A),
        true.
'$insert_in_store_allocation_occurrence/2'(A) :-
        true,
        arg(3, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:allocation_occurrence/2-1', C),
        chr_hashtable_store:insert_ht(C, B, A),
        true,
        arg(3, A, D),
        arg(4, A, E),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:allocation_occurrence/2-12', F),
        chr_hashtable_store:insert_ht(F, k(D,E), A),
        true.
'$delete_from_store_allocation_occurrence/2'(A) :-
        true,
        arg(3, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:allocation_occurrence/2-1', C),
        chr_hashtable_store:delete_ht(C, B, A),
        true,
        arg(3, A, D),
        arg(4, A, E),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:allocation_occurrence/2-12', F),
        chr_hashtable_store:delete_ht(F, k(D,E), A),
        true.
'$insert_in_store_rule/2'(A) :-
        true,
        arg(4, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:rule/2-1', C),
        chr_hashtable_store:insert_ht(C, B, A),
        true.
'$delete_from_store_rule/2'(A) :-
        true,
        arg(4, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:rule/2-1', C),
        chr_hashtable_store:delete_ht(C, B, A),
        true.
'$insert_in_store_least_occurrence/2'(A) :-
        true,
        arg(3, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:least_occurrence/2-1', C),
        chr_hashtable_store:insert_ht(C, B, A),
        true.
'$delete_from_store_least_occurrence/2'(A) :-
        true,
        arg(3, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:least_occurrence/2-1', C),
        chr_hashtable_store:delete_ht(C, B, A),
        true.
'$insert_in_store_constraint_index/2'(A) :-
        true,
        arg(4, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:constraint_index/2-2', C),
        chr_hashtable_store:insert_ht(C, B, A),
        true,
        arg(3, A, D),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:constraint_index/2-1', E),
        chr_hashtable_store:insert_ht(E, D, A),
        true.
'$delete_from_store_constraint_index/2'(A) :-
        true,
        arg(4, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:constraint_index/2-2', C),
        chr_hashtable_store:delete_ht(C, B, A),
        true,
        arg(3, A, D),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:constraint_index/2-1', E),
        chr_hashtable_store:delete_ht(E, D, A),
        true.
'$insert_in_store_max_constraint_index/1'(A) :-
        true,
        hprolog:get_store('$chr_store_global_ground_chr_translate:max_constraint_index/1', B),
        hprolog:update_store('$chr_store_global_ground_chr_translate:max_constraint_index/1', [A|B]).
'$delete_from_store_max_constraint_index/1'(A) :-
        true,
        hprolog:get_store('$chr_store_global_ground_chr_translate:max_constraint_index/1', B),
        chr_runtime:'chr sbag_del_element'(B, A, C),
        hprolog:update_store('$chr_store_global_ground_chr_translate:max_constraint_index/1', C).
'$insert_in_store_no_history/1'(A) :-
        true,
        arg(3, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:no_history/1-1', C),
        chr_hashtable_store:insert_ht(C, B, A),
        true.
'$delete_from_store_no_history/1'(A) :-
        true,
        arg(3, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:no_history/1-1', C),
        chr_hashtable_store:delete_ht(C, B, A),
        true.
'$insert_in_store_indexing_spec/2'(A) :-
        true,
        arg(3, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:indexing_spec/2-1', C),
        chr_hashtable_store:insert_ht(C, B, A),
        true.
'$delete_from_store_indexing_spec/2'(A) :-
        true,
        arg(3, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:indexing_spec/2-1', C),
        chr_hashtable_store:delete_ht(C, B, A),
        true.
'$insert_in_store_observes/2'(A) :-
        true,
        arg(3, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:observes/2-1', C),
        chr_hashtable_store:insert_ht(C, B, A),
        true,
        arg(3, A, D),
        arg(4, A, E),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:observes/2-12', F),
        chr_hashtable_store:insert_ht(F, k(D,E), A),
        true.
'$delete_from_store_observes/2'(A) :-
        true,
        arg(3, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:observes/2-1', C),
        chr_hashtable_store:delete_ht(C, B, A),
        true,
        arg(3, A, D),
        arg(4, A, E),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:observes/2-12', F),
        chr_hashtable_store:delete_ht(F, k(D,E), A),
        true.
'$insert_in_store_spawns_observer/2'(A) :-
        true,
        arg(4, A, B),
        arg(5, A, C),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:spawns_observer/2-12', D),
        chr_hashtable_store:insert_ht(D, k(B,C), A),
        true,
        arg(5, A, E),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:spawns_observer/2-2', F),
        chr_hashtable_store:insert_ht(F, E, A),
        true.
'$delete_from_store_spawns_observer/2'(A) :-
        true,
        arg(4, A, B),
        arg(5, A, C),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:spawns_observer/2-12', D),
        chr_hashtable_store:delete_ht(D, k(B,C), A),
        true,
        arg(5, A, E),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:spawns_observer/2-2', F),
        chr_hashtable_store:delete_ht(F, E, A),
        true.
'$insert_in_store_observes_indirectly/2'(A) :-
        true,
        arg(4, A, B),
        arg(5, A, C),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:observes_indirectly/2-12', D),
        chr_hashtable_store:insert_ht(D, k(B,C), A),
        true,
        arg(4, A, E),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:observes_indirectly/2-1', F),
        chr_hashtable_store:insert_ht(F, E, A),
        true.
'$delete_from_store_observes_indirectly/2'(A) :-
        true,
        arg(4, A, B),
        arg(5, A, C),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:observes_indirectly/2-12', D),
        chr_hashtable_store:delete_ht(D, k(B,C), A),
        true,
        arg(4, A, E),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:observes_indirectly/2-1', F),
        chr_hashtable_store:delete_ht(F, E, A),
        true.
'$insert_in_store_module_initializer/1'(A) :-
        true,
        hprolog:get_store('$chr_store_global_ground_chr_translate:module_initializer/1', B),
        hprolog:update_store('$chr_store_global_ground_chr_translate:module_initializer/1', [A|B]).
'$delete_from_store_module_initializer/1'(A) :-
        true,
        hprolog:get_store('$chr_store_global_ground_chr_translate:module_initializer/1', B),
        chr_runtime:'chr sbag_del_element'(B, A, C),
        hprolog:update_store('$chr_store_global_ground_chr_translate:module_initializer/1', C).
'$insert_in_store_prolog_global_variable/1'(A) :-
        true,
        hprolog:get_store('$chr_store_global_ground_chr_translate:prolog_global_variable/1', B),
        hprolog:update_store('$chr_store_global_ground_chr_translate:prolog_global_variable/1', [A|B]),
        arg(4, A, C),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:prolog_global_variable/1-1', D),
        chr_hashtable_store:insert_ht(D, C, A),
        true.
'$delete_from_store_prolog_global_variable/1'(A) :-
        true,
        hprolog:get_store('$chr_store_global_ground_chr_translate:prolog_global_variable/1', B),
        chr_runtime:'chr sbag_del_element'(B, A, C),
        hprolog:update_store('$chr_store_global_ground_chr_translate:prolog_global_variable/1', C),
        arg(4, A, D),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:prolog_global_variable/1-1', E),
        chr_hashtable_store:delete_ht(E, D, A),
        true.
'$insert_in_store_prev_guard_list/7'(A) :-
        true,
        arg(5, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:prev_guard_list/7-2', C),
        chr_hashtable_store:insert_ht(C, B, A),
        true,
        arg(4, A, D),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:prev_guard_list/7-1', E),
        chr_hashtable_store:insert_ht(E, D, A),
        true.
'$delete_from_store_prev_guard_list/7'(A) :-
        true,
        arg(5, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:prev_guard_list/7-2', C),
        chr_hashtable_store:delete_ht(C, B, A),
        true,
        arg(4, A, D),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:prev_guard_list/7-1', E),
        chr_hashtable_store:delete_ht(E, D, A),
        true.
'$insert_in_store_set_all_passive/1'(A) :-
        true,
        arg(4, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:set_all_passive/1-1', C),
        chr_hashtable_store:insert_ht(C, B, A),
        true.
'$delete_from_store_set_all_passive/1'(A) :-
        true,
        arg(4, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:set_all_passive/1-1', C),
        chr_hashtable_store:delete_ht(C, B, A),
        true.
'$insert_in_store_multiple_occ_constraints_checked/1'(A) :-
        true,
        hprolog:get_store('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', B),
        hprolog:update_store('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', [A|B]).
'$delete_from_store_multiple_occ_constraints_checked/1'(A) :-
        true,
        hprolog:get_store('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', B),
        chr_runtime:'chr sbag_del_element'(B, A, C),
        hprolog:update_store('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', C).
'$insert_in_store_type_definition/2'(A) :-
        true,
        hprolog:get_store('$chr_store_global_list_chr_translate:type_definition/2', B),
        hprolog:update_store('$chr_store_global_list_chr_translate:type_definition/2', [A|B]).
'$delete_from_store_type_definition/2'(A) :-
        true,
        hprolog:get_store('$chr_store_global_list_chr_translate:type_definition/2', B),
        chr_runtime:'chr sbag_del_element'(B, A, C),
        hprolog:update_store('$chr_store_global_list_chr_translate:type_definition/2', C).
'$insert_in_store_type_alias/2'(A) :-
        true,
        hprolog:get_store('$chr_store_global_list_chr_translate:type_alias/2', B),
        hprolog:update_store('$chr_store_global_list_chr_translate:type_alias/2', [A|B]).
'$delete_from_store_type_alias/2'(A) :-
        true,
        hprolog:get_store('$chr_store_global_list_chr_translate:type_alias/2', B),
        chr_runtime:'chr sbag_del_element'(B, A, C),
        hprolog:update_store('$chr_store_global_list_chr_translate:type_alias/2', C).
'$insert_in_store_constraint_type/2'(A) :-
        true,
        arg(3, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:constraint_type/2-1', C),
        chr_hashtable_store:insert_ht(C, B, A),
        true.
'$delete_from_store_constraint_type/2'(A) :-
        true,
        arg(3, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:constraint_type/2-1', C),
        chr_hashtable_store:delete_ht(C, B, A),
        true.
'$insert_in_store_add_type_information/3'(A) :-
        true,
        hprolog:get_store('$chr_store_global_ground_chr_translate:add_type_information/3', B),
        hprolog:update_store('$chr_store_global_ground_chr_translate:add_type_information/3', [A|B]).
'$delete_from_store_add_type_information/3'(A) :-
        true,
        hprolog:get_store('$chr_store_global_ground_chr_translate:add_type_information/3', B),
        chr_runtime:'chr sbag_del_element'(B, A, C),
        hprolog:update_store('$chr_store_global_ground_chr_translate:add_type_information/3', C).
'$insert_in_store_stored/3'(A) :-
        true,
        arg(3, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:stored/3-1', C),
        chr_hashtable_store:insert_ht(C, B, A),
        true,
        arg(3, A, D),
        arg(4, A, E),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:stored/3-12', F),
        chr_hashtable_store:insert_ht(F, k(D,E), A),
        true.
'$delete_from_store_stored/3'(A) :-
        true,
        arg(3, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:stored/3-1', C),
        chr_hashtable_store:delete_ht(C, B, A),
        true,
        arg(3, A, D),
        arg(4, A, E),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:stored/3-12', F),
        chr_hashtable_store:delete_ht(F, k(D,E), A),
        true.
'$insert_in_store_stored_complete/3'(A) :-
        true,
        arg(4, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:stored_complete/3-1', C),
        chr_hashtable_store:insert_ht(C, B, A),
        true.
'$delete_from_store_stored_complete/3'(A) :-
        true,
        arg(4, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:stored_complete/3-1', C),
        chr_hashtable_store:delete_ht(C, B, A),
        true.
'$insert_in_store_check_all_passive/2'(A) :-
        true,
        arg(3, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:check_all_passive/2-1', C),
        chr_hashtable_store:insert_ht(C, B, A),
        true.
'$delete_from_store_check_all_passive/2'(A) :-
        true,
        arg(3, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:check_all_passive/2-1', C),
        chr_hashtable_store:delete_ht(C, B, A),
        true.
'$insert_in_store_constraints_code1/3'(A) :-
        true,
        hprolog:get_store('$chr_store_global_ground_chr_translate:constraints_code1/3', B),
        hprolog:update_store('$chr_store_global_ground_chr_translate:constraints_code1/3', [A|B]).
'$delete_from_store_constraints_code1/3'(A) :-
        true,
        hprolog:get_store('$chr_store_global_ground_chr_translate:constraints_code1/3', B),
        chr_runtime:'chr sbag_del_element'(B, A, C),
        hprolog:update_store('$chr_store_global_ground_chr_translate:constraints_code1/3', C).
'$insert_in_store_use_auxiliary_predicate/1'(A) :-
        true,
        arg(3, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/1-1', C),
        chr_hashtable_store:insert_ht(C, B, A),
        true.
'$delete_from_store_use_auxiliary_predicate/1'(A) :-
        true,
        arg(3, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/1-1', C),
        chr_hashtable_store:delete_ht(C, B, A),
        true.
'$insert_in_store_use_auxiliary_predicate/2'(A) :-
        true,
        arg(3, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/2-1', C),
        chr_hashtable_store:insert_ht(C, B, A),
        true,
        arg(3, A, D),
        arg(4, A, E),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/2-12', F),
        chr_hashtable_store:insert_ht(F, k(D,E), A),
        true.
'$delete_from_store_use_auxiliary_predicate/2'(A) :-
        true,
        arg(3, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/2-1', C),
        chr_hashtable_store:delete_ht(C, B, A),
        true,
        arg(3, A, D),
        arg(4, A, E),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/2-12', F),
        chr_hashtable_store:delete_ht(F, k(D,E), A),
        true.
'$insert_in_store_functional_dependency/4'(A) :-
        true,
        arg(3, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:functional_dependency/4-1', C),
        chr_hashtable_store:insert_ht(C, B, A),
        true,
        arg(3, A, D),
        arg(4, A, E),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:functional_dependency/4-12', F),
        chr_hashtable_store:insert_ht(F, k(D,E), A),
        true.
'$delete_from_store_functional_dependency/4'(A) :-
        true,
        arg(3, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:functional_dependency/4-1', C),
        chr_hashtable_store:delete_ht(C, B, A),
        true,
        arg(3, A, D),
        arg(4, A, E),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:functional_dependency/4-12', F),
        chr_hashtable_store:delete_ht(F, k(D,E), A),
        true.
'$insert_in_store_initial_call_pattern/1'(A) :-
        true,
        hprolog:get_store('$chr_store_global_ground_chr_translate:initial_call_pattern/1', B),
        hprolog:update_store('$chr_store_global_ground_chr_translate:initial_call_pattern/1', [A|B]),
        arg(5, A, C),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:initial_call_pattern/1-1', D),
        chr_hashtable_store:insert_ht(D, C, A),
        true.
'$delete_from_store_initial_call_pattern/1'(A) :-
        true,
        hprolog:get_store('$chr_store_global_ground_chr_translate:initial_call_pattern/1', B),
        chr_runtime:'chr sbag_del_element'(B, A, C),
        hprolog:update_store('$chr_store_global_ground_chr_translate:initial_call_pattern/1', C),
        arg(5, A, D),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:initial_call_pattern/1-1', E),
        chr_hashtable_store:delete_ht(E, D, A),
        true.
'$insert_in_store_call_pattern/1'(A) :-
        true,
        arg(5, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:call_pattern/1-1', C),
        chr_hashtable_store:insert_ht(C, B, A),
        true,
        hprolog:get_store('$chr_store_global_ground_chr_translate:call_pattern/1', D),
        hprolog:update_store('$chr_store_global_ground_chr_translate:call_pattern/1', [A|D]).
'$delete_from_store_call_pattern/1'(A) :-
        true,
        arg(5, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:call_pattern/1-1', C),
        chr_hashtable_store:delete_ht(C, B, A),
        true,
        hprolog:get_store('$chr_store_global_ground_chr_translate:call_pattern/1', D),
        chr_runtime:'chr sbag_del_element'(D, A, E),
        hprolog:update_store('$chr_store_global_ground_chr_translate:call_pattern/1', E).
'$insert_in_store_final_answer_pattern/2'(A) :-
        true,
        arg(4, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:final_answer_pattern/2-1', C),
        chr_hashtable_store:insert_ht(C, B, A),
        true.
'$delete_from_store_final_answer_pattern/2'(A) :-
        true,
        arg(4, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:final_answer_pattern/2-1', C),
        chr_hashtable_store:delete_ht(C, B, A),
        true.
'$insert_in_store_abstract_constraints/1'(A) :-
        true,
        hprolog:get_store('$chr_store_global_ground_chr_translate:abstract_constraints/1', B),
        hprolog:update_store('$chr_store_global_ground_chr_translate:abstract_constraints/1', [A|B]).
'$delete_from_store_abstract_constraints/1'(A) :-
        true,
        hprolog:get_store('$chr_store_global_ground_chr_translate:abstract_constraints/1', B),
        chr_runtime:'chr sbag_del_element'(B, A, C),
        hprolog:update_store('$chr_store_global_ground_chr_translate:abstract_constraints/1', C).
'$insert_in_store_depends_on/2'(A) :-
        true,
        arg(4, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:depends_on/2-1', C),
        chr_hashtable_store:insert_ht(C, B, A),
        true,
        arg(5, A, D),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:depends_on/2-2', E),
        chr_hashtable_store:insert_ht(E, D, A),
        true.
'$delete_from_store_depends_on/2'(A) :-
        true,
        arg(4, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:depends_on/2-1', C),
        chr_hashtable_store:delete_ht(C, B, A),
        true,
        arg(5, A, D),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:depends_on/2-2', E),
        chr_hashtable_store:delete_ht(E, D, A),
        true.
'$insert_in_store_depends_on_ap/4'(A) :-
        true,
        arg(5, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:depends_on_ap/4-2', C),
        chr_hashtable_store:insert_ht(C, B, A),
        true,
        arg(6, A, D),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:depends_on_ap/4-3', E),
        chr_hashtable_store:insert_ht(E, D, A),
        true.
'$delete_from_store_depends_on_ap/4'(A) :-
        true,
        arg(5, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:depends_on_ap/4-2', C),
        chr_hashtable_store:delete_ht(C, B, A),
        true,
        arg(6, A, D),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:depends_on_ap/4-3', E),
        chr_hashtable_store:delete_ht(E, D, A),
        true.
'$insert_in_store_depends_on_goal/2'(A) :-
        true,
        arg(5, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:depends_on_goal/2-2', C),
        chr_hashtable_store:insert_ht(C, B, A),
        true.
'$delete_from_store_depends_on_goal/2'(A) :-
        true,
        arg(5, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:depends_on_goal/2-2', C),
        chr_hashtable_store:delete_ht(C, B, A),
        true.
'$insert_in_store_ai_observed_internal/2'(A) :-
        true,
        hprolog:get_store('$chr_store_global_ground_chr_translate:ai_observed_internal/2', B),
        hprolog:update_store('$chr_store_global_ground_chr_translate:ai_observed_internal/2', [A|B]),
        arg(4, A, C),
        arg(5, A, D),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:ai_observed_internal/2-12', E),
        chr_hashtable_store:insert_ht(E, k(C,D), A),
        true.
'$delete_from_store_ai_observed_internal/2'(A) :-
        true,
        hprolog:get_store('$chr_store_global_ground_chr_translate:ai_observed_internal/2', B),
        chr_runtime:'chr sbag_del_element'(B, A, C),
        hprolog:update_store('$chr_store_global_ground_chr_translate:ai_observed_internal/2', C),
        arg(4, A, D),
        arg(5, A, E),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:ai_observed_internal/2-12', F),
        chr_hashtable_store:delete_ht(F, k(D,E), A),
        true.
'$insert_in_store_ai_observed/2'(A) :-
        true,
        hprolog:get_store('$chr_store_global_ground_chr_translate:ai_observed/2', B),
        hprolog:update_store('$chr_store_global_ground_chr_translate:ai_observed/2', [A|B]).
'$delete_from_store_ai_observed/2'(A) :-
        true,
        hprolog:get_store('$chr_store_global_ground_chr_translate:ai_observed/2', B),
        chr_runtime:'chr sbag_del_element'(B, A, C),
        hprolog:update_store('$chr_store_global_ground_chr_translate:ai_observed/2', C).
'$insert_in_store_ai_not_observed_internal/2'(A) :-
        true,
        hprolog:get_store('$chr_store_global_ground_chr_translate:ai_not_observed_internal/2', B),
        hprolog:update_store('$chr_store_global_ground_chr_translate:ai_not_observed_internal/2', [A|B]),
        arg(4, A, C),
        arg(5, A, D),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:ai_not_observed_internal/2-12', E),
        chr_hashtable_store:insert_ht(E, k(C,D), A),
        true.
'$delete_from_store_ai_not_observed_internal/2'(A) :-
        true,
        hprolog:get_store('$chr_store_global_ground_chr_translate:ai_not_observed_internal/2', B),
        chr_runtime:'chr sbag_del_element'(B, A, C),
        hprolog:update_store('$chr_store_global_ground_chr_translate:ai_not_observed_internal/2', C),
        arg(4, A, D),
        arg(5, A, E),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:ai_not_observed_internal/2-12', F),
        chr_hashtable_store:delete_ht(F, k(D,E), A),
        true.
'$insert_in_store_ai_not_observed/2'(A) :-
        true,
        arg(3, A, B),
        arg(4, A, C),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:ai_not_observed/2-12', D),
        chr_hashtable_store:insert_ht(D, k(B,C), A),
        true.
'$delete_from_store_ai_not_observed/2'(A) :-
        true,
        arg(3, A, B),
        arg(4, A, C),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:ai_not_observed/2-12', D),
        chr_hashtable_store:delete_ht(D, k(B,C), A),
        true.
'$insert_in_store_depends_on_as/3'(A) :-
        true,
        arg(6, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:depends_on_as/3-3', C),
        chr_hashtable_store:insert_ht(C, B, A),
        true,
        arg(5, A, D),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:depends_on_as/3-2', E),
        chr_hashtable_store:insert_ht(E, D, A),
        true.
'$delete_from_store_depends_on_as/3'(A) :-
        true,
        arg(6, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:depends_on_as/3-3', C),
        chr_hashtable_store:delete_ht(C, B, A),
        true,
        arg(5, A, D),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:depends_on_as/3-2', E),
        chr_hashtable_store:delete_ht(E, D, A),
        true.
'$insert_in_store_ai_observation_gather_results/0'(A) :-
        true,
        hprolog:get_store('$chr_store_global_ground_chr_translate:ai_observation_gather_results/0', B),
        hprolog:update_store('$chr_store_global_ground_chr_translate:ai_observation_gather_results/0', [A|B]).
'$delete_from_store_ai_observation_gather_results/0'(A) :-
        true,
        hprolog:get_store('$chr_store_global_ground_chr_translate:ai_observation_gather_results/0', B),
        chr_runtime:'chr sbag_del_element'(B, A, C),
        hprolog:update_store('$chr_store_global_ground_chr_translate:ai_observation_gather_results/0', C).
'$insert_in_store_phase_end/1'(A) :-
        true,
        arg(3, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:phase_end/1-1', C),
        chr_hashtable_store:insert_ht(C, B, A),
        true.
'$delete_from_store_phase_end/1'(A) :-
        true,
        arg(3, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:phase_end/1-1', C),
        chr_hashtable_store:delete_ht(C, B, A),
        true.
'$insert_in_store_delay_phase_end/2'(A) :-
        true,
        arg(3, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:delay_phase_end/2-1', C),
        chr_hashtable_store:insert_ht(C, B, A),
        true.
'$delete_from_store_delay_phase_end/2'(A) :-
        true,
        arg(3, A, B),
        hprolog:get_store('$chr_store_multi_hash_chr_translate:delay_phase_end/2-1', C),
        chr_hashtable_store:delete_ht(C, B, A),
        true.
'$insert_in_store_does_use_history/1'(A) :-
        true,
        hprolog:get_store('$chr_store_global_list_chr_translate:does_use_history/1', B),
        hprolog:update_store('$chr_store_global_list_chr_translate:does_use_history/1', [A|B]).
'$delete_from_store_does_use_history/1'(A) :-
        true,
        hprolog:get_store('$chr_store_global_list_chr_translate:does_use_history/1', B),
        chr_runtime:'chr sbag_del_element'(B, A, C),
        hprolog:update_store('$chr_store_global_list_chr_translate:does_use_history/1', C).
'$enumerate_constraints'(A) :-
        (   hprolog:get_store('$chr_store_global_singleton_chr_translate:target_module/1', B),
            B\==[],
            B=suspension(_,_,C),
            A=..[target_module,C]
        ;   hprolog:get_store('$chr_store_multi_hash_chr_translate:indexed_argument/2-1', D),
            chr_hashtable_store:value_ht(D, E),
            E=suspension(_,_,F,G),
            A=..[indexed_argument,F,G]
        ;   hprolog:get_store('$chr_store_global_ground_chr_translate:constraint_mode/2', H),
            member(I, H),
            I=suspension(_,_,_,J,K),
            A=..[constraint_mode,J,K]
        ;   hprolog:get_store('$chr_store_global_singleton_chr_translate:none_suspended_on_variables/0', L),
            L\==[],
            L=suspension(_,_),
            A=..[none_suspended_on_variables]
        ;   hprolog:get_store('$chr_store_multi_hash_chr_translate:store_type/2-1', M),
            chr_hashtable_store:value_ht(M, N),
            N=suspension(_,_,O,P),
            A=..[store_type,O,P]
        ;   hprolog:get_store('$chr_store_multi_hash_chr_translate:actual_store_types/2-1', Q),
            chr_hashtable_store:value_ht(Q, R),
            R=suspension(_,_,S,T),
            A=..[actual_store_types,S,T]
        ;   hprolog:get_store('$chr_store_multi_hash_chr_translate:assumed_store_type/2-1', U),
            chr_hashtable_store:value_ht(U, V),
            V=suspension(_,_,W,X),
            A=..[assumed_store_type,W,X]
        ;   hprolog:get_store('$chr_store_global_ground_chr_translate:rule_count/1', Y),
            member(Z, Y),
            Z=suspension(_,_,_,A1),
            A=..[rule_count,A1]
        ;   hprolog:get_store('$chr_store_multi_hash_chr_translate:passive/2-1', B1),
            chr_hashtable_store:value_ht(B1, C1),
            C1=suspension(_,_,_,D1,E1),
            A=..[passive,D1,E1]
        ;   hprolog:get_store('$chr_store_global_ground_chr_translate:occurrence/4', F1),
            member(G1, F1),
            G1=suspension(_,_,_,_,H1,I1,J1,K1),
            A=..[occurrence,H1,I1,J1,K1]
        ;   hprolog:get_store('$chr_store_multi_hash_chr_translate:max_occurrence/2-1', L1),
            chr_hashtable_store:value_ht(L1, M1),
            M1=suspension(_,_,_,N1,O1),
            A=..[max_occurrence,N1,O1]
        ;   hprolog:get_store('$chr_store_multi_hash_chr_translate:allocation_occurrence/2-1', P1),
            chr_hashtable_store:value_ht(P1, Q1),
            Q1=suspension(_,_,R1,S1),
            A=..[allocation_occurrence,R1,S1]
        ;   hprolog:get_store('$chr_store_multi_hash_chr_translate:rule/2-1', T1),
            chr_hashtable_store:value_ht(T1, U1),
            U1=suspension(_,_,_,V1,W1),
            A=..[rule,V1,W1]
        ;   hprolog:get_store('$chr_store_multi_hash_chr_translate:least_occurrence/2-1', X1),
            chr_hashtable_store:value_ht(X1, Y1),
            Y1=suspension(_,_,Z1,A2),
            A=..[least_occurrence,Z1,A2]
        ;   hprolog:get_store('$chr_store_multi_hash_chr_translate:constraint_index/2-2', B2),
            chr_hashtable_store:value_ht(B2, C2),
            C2=suspension(_,_,D2,E2),
            A=..[constraint_index,D2,E2]
        ;   hprolog:get_store('$chr_store_global_ground_chr_translate:max_constraint_index/1', F2),
            member(G2, F2),
            G2=suspension(_,_,_,H2),
            A=..[max_constraint_index,H2]
        ;   hprolog:get_store('$chr_store_multi_hash_chr_translate:no_history/1-1', I2),
            chr_hashtable_store:value_ht(I2, J2),
            J2=suspension(_,_,K2),
            A=..[no_history,K2]
        ;   hprolog:get_store('$chr_store_multi_hash_chr_translate:indexing_spec/2-1', L2),
            chr_hashtable_store:value_ht(L2, M2),
            M2=suspension(_,_,N2,O2),
            A=..[indexing_spec,N2,O2]
        ;   hprolog:get_store('$chr_store_multi_hash_chr_translate:observes/2-1', P2),
            chr_hashtable_store:value_ht(P2, Q2),
            Q2=suspension(_,_,R2,S2),
            A=..[observes,R2,S2]
        ;   hprolog:get_store('$chr_store_multi_hash_chr_translate:spawns_observer/2-12', T2),
            chr_hashtable_store:value_ht(T2, U2),
            U2=suspension(_,_,_,V2,W2),
            A=..[spawns_observer,V2,W2]
        ;   hprolog:get_store('$chr_store_multi_hash_chr_translate:observes_indirectly/2-12', X2),
            chr_hashtable_store:value_ht(X2, Y2),
            Y2=suspension(_,_,_,Z2,A3),
            A=..[observes_indirectly,Z2,A3]
        ;   hprolog:get_store('$chr_store_global_ground_chr_translate:module_initializer/1', B3),
            member(C3, B3),
            C3=suspension(_,_,_,D3),
            A=..[module_initializer,D3]
        ;   hprolog:get_store('$chr_store_global_ground_chr_translate:prolog_global_variable/1', E3),
            member(F3, E3),
            F3=suspension(_,_,_,G3),
            A=..[prolog_global_variable,G3]
        ;   hprolog:get_store('$chr_store_multi_hash_chr_translate:prev_guard_list/7-2', H3),
            chr_hashtable_store:value_ht(H3, I3),
            I3=suspension(_,_,_,J3,K3,L3,M3,N3,O3,P3),
            A=..[prev_guard_list,J3,K3,L3,M3,N3,O3,P3]
        ;   hprolog:get_store('$chr_store_multi_hash_chr_translate:set_all_passive/1-1', Q3),
            chr_hashtable_store:value_ht(Q3, R3),
            R3=suspension(_,_,_,S3),
            A=..[set_all_passive,S3]
        ;   hprolog:get_store('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', T3),
            member(U3, T3),
            U3=suspension(_,_,_,V3),
            A=..[multiple_occ_constraints_checked,V3]
        ;   hprolog:get_store('$chr_store_global_list_chr_translate:type_definition/2', W3),
            member(X3, W3),
            X3=suspension(_,_,_,Y3,Z3),
            A=..[type_definition,Y3,Z3]
        ;   hprolog:get_store('$chr_store_global_list_chr_translate:type_alias/2', A4),
            member(B4, A4),
            B4=suspension(_,_,_,_,_,C4,D4),
            A=..[type_alias,C4,D4]
        ;   hprolog:get_store('$chr_store_multi_hash_chr_translate:constraint_type/2-1', E4),
            chr_hashtable_store:value_ht(E4, F4),
            F4=suspension(_,_,G4,H4),
            A=..[constraint_type,G4,H4]
        ;   hprolog:get_store('$chr_store_global_ground_chr_translate:add_type_information/3', I4),
            member(J4, I4),
            J4=suspension(_,_,_,K4,L4,M4),
            A=..[add_type_information,K4,L4,M4]
        ;   hprolog:get_store('$chr_store_multi_hash_chr_translate:stored/3-1', N4),
            chr_hashtable_store:value_ht(N4, O4),
            O4=suspension(_,_,P4,Q4,R4),
            A=..[stored,P4,Q4,R4]
        ;   hprolog:get_store('$chr_store_multi_hash_chr_translate:stored_complete/3-1', S4),
            chr_hashtable_store:value_ht(S4, T4),
            T4=suspension(_,_,_,U4,V4,W4),
            A=..[stored_complete,U4,V4,W4]
        ;   hprolog:get_store('$chr_store_multi_hash_chr_translate:check_all_passive/2-1', X4),
            chr_hashtable_store:value_ht(X4, Y4),
            Y4=suspension(_,_,Z4,A5),
            A=..[check_all_passive,Z4,A5]
        ;   hprolog:get_store('$chr_store_global_ground_chr_translate:constraints_code1/3', B5),
            member(C5, B5),
            C5=suspension(_,_,_,D5,E5,F5),
            A=..[constraints_code1,D5,E5,F5]
        ;   hprolog:get_store('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/1-1', G5),
            chr_hashtable_store:value_ht(G5, H5),
            H5=suspension(_,_,I5),
            A=..[use_auxiliary_predicate,I5]
        ;   hprolog:get_store('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/2-1', J5),
            chr_hashtable_store:value_ht(J5, K5),
            K5=suspension(_,_,L5,M5),
            A=..[use_auxiliary_predicate,L5,M5]
        ;   hprolog:get_store('$chr_store_multi_hash_chr_translate:functional_dependency/4-1', N5),
            chr_hashtable_store:value_ht(N5, O5),
            O5=suspension(_,_,P5,Q5,R5,S5),
            A=..[functional_dependency,P5,Q5,R5,S5]
        ;   hprolog:get_store('$chr_store_global_ground_chr_translate:initial_call_pattern/1', T5),
            member(U5, T5),
            U5=suspension(_,_,_,_,V5),
            A=..[initial_call_pattern,V5]
        ;   hprolog:get_store('$chr_store_multi_hash_chr_translate:call_pattern/1-1', W5),
            chr_hashtable_store:value_ht(W5, X5),
            X5=suspension(_,_,_,_,Y5),
            A=..[call_pattern,Y5]
        ;   hprolog:get_store('$chr_store_multi_hash_chr_translate:final_answer_pattern/2-1', Z5),
            chr_hashtable_store:value_ht(Z5, A6),
            A6=suspension(_,_,_,B6,C6),
            A=..[final_answer_pattern,B6,C6]
        ;   hprolog:get_store('$chr_store_global_ground_chr_translate:abstract_constraints/1', D6),
            member(E6, D6),
            E6=suspension(_,_,_,_,F6),
            A=..[abstract_constraints,F6]
        ;   hprolog:get_store('$chr_store_multi_hash_chr_translate:depends_on/2-1', G6),
            chr_hashtable_store:value_ht(G6, H6),
            H6=suspension(_,_,_,I6,J6),
            A=..[depends_on,I6,J6]
        ;   hprolog:get_store('$chr_store_multi_hash_chr_translate:depends_on_ap/4-2', K6),
            chr_hashtable_store:value_ht(K6, L6),
            L6=suspension(_,_,_,M6,N6,O6,P6),
            A=..[depends_on_ap,M6,N6,O6,P6]
        ;   hprolog:get_store('$chr_store_multi_hash_chr_translate:depends_on_goal/2-2', Q6),
            chr_hashtable_store:value_ht(Q6, R6),
            R6=suspension(_,_,_,S6,T6),
            A=..[depends_on_goal,S6,T6]
        ;   hprolog:get_store('$chr_store_global_ground_chr_translate:ai_observed_internal/2', U6),
            member(V6, U6),
            V6=suspension(_,_,_,W6,X6),
            A=..[ai_observed_internal,W6,X6]
        ;   hprolog:get_store('$chr_store_global_ground_chr_translate:ai_observed/2', Y6),
            member(Z6, Y6),
            Z6=suspension(_,_,_,A7,B7),
            A=..[ai_observed,A7,B7]
        ;   hprolog:get_store('$chr_store_global_ground_chr_translate:ai_not_observed_internal/2', C7),
            member(D7, C7),
            D7=suspension(_,_,_,E7,F7),
            A=..[ai_not_observed_internal,E7,F7]
        ;   hprolog:get_store('$chr_store_multi_hash_chr_translate:ai_not_observed/2-12', G7),
            chr_hashtable_store:value_ht(G7, H7),
            H7=suspension(_,_,I7,J7),
            A=..[ai_not_observed,I7,J7]
        ;   hprolog:get_store('$chr_store_multi_hash_chr_translate:depends_on_as/3-3', K7),
            chr_hashtable_store:value_ht(K7, L7),
            L7=suspension(_,_,_,M7,N7,O7),
            A=..[depends_on_as,M7,N7,O7]
        ;   hprolog:get_store('$chr_store_global_ground_chr_translate:ai_observation_gather_results/0', P7),
            member(Q7, P7),
            Q7=suspension(_,_,_),
            A=..[ai_observation_gather_results]
        ;   hprolog:get_store('$chr_store_multi_hash_chr_translate:phase_end/1-1', R7),
            chr_hashtable_store:value_ht(R7, S7),
            S7=suspension(_,_,T7),
            A=..[phase_end,T7]
        ;   hprolog:get_store('$chr_store_multi_hash_chr_translate:delay_phase_end/2-1', U7),
            chr_hashtable_store:value_ht(U7, V7),
            V7=suspension(_,_,W7,X7),
            A=..[delay_phase_end,W7,X7]
        ;   hprolog:get_store('$chr_store_global_list_chr_translate:does_use_history/1', Y7),
            member(Z7, Y7),
            Z7=suspension(_,_,_,_,_,A8),
            A=..[does_use_history,A8]
        ).
'$via1_multi_hash_indexed_argument/2-1'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:indexed_argument/2-1', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_indexed_argument/2-12'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:indexed_argument/2-12', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_constraint_mode/2-1'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:constraint_mode/2-1', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_store_type/2-1'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:store_type/2-1', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_actual_store_types/2-1'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:actual_store_types/2-1', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_assumed_store_type/2-1'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:assumed_store_type/2-1', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_passive/2-1'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:passive/2-1', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_passive/2-12'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:passive/2-12', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_occurrence/4-1'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:occurrence/4-1', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_occurrence/4-12'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:occurrence/4-12', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_occurrence/4-3'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:occurrence/4-3', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_occurrence/4-13'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:occurrence/4-13', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_occurrence/4-34'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:occurrence/4-34', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_max_occurrence/2-1'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:max_occurrence/2-1', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_allocation_occurrence/2-1'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:allocation_occurrence/2-1', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_allocation_occurrence/2-12'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:allocation_occurrence/2-12', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_rule/2-1'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:rule/2-1', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_least_occurrence/2-1'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:least_occurrence/2-1', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_constraint_index/2-2'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:constraint_index/2-2', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_constraint_index/2-1'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:constraint_index/2-1', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_no_history/1-1'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:no_history/1-1', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_indexing_spec/2-1'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:indexing_spec/2-1', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_observes/2-1'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:observes/2-1', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_observes/2-12'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:observes/2-12', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_spawns_observer/2-12'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:spawns_observer/2-12', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_spawns_observer/2-2'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:spawns_observer/2-2', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_observes_indirectly/2-12'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:observes_indirectly/2-12', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_observes_indirectly/2-1'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:observes_indirectly/2-1', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_prolog_global_variable/1-1'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:prolog_global_variable/1-1', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_prev_guard_list/7-2'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:prev_guard_list/7-2', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_prev_guard_list/7-1'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:prev_guard_list/7-1', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_set_all_passive/1-1'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:set_all_passive/1-1', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_constraint_type/2-1'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:constraint_type/2-1', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_stored/3-1'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:stored/3-1', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_stored/3-12'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:stored/3-12', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_stored_complete/3-1'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:stored_complete/3-1', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_check_all_passive/2-1'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:check_all_passive/2-1', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_use_auxiliary_predicate/1-1'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/1-1', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_use_auxiliary_predicate/2-1'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/2-1', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_use_auxiliary_predicate/2-12'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/2-12', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_functional_dependency/4-1'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:functional_dependency/4-1', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_functional_dependency/4-12'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:functional_dependency/4-12', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_initial_call_pattern/1-1'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:initial_call_pattern/1-1', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_call_pattern/1-1'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:call_pattern/1-1', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_final_answer_pattern/2-1'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:final_answer_pattern/2-1', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_depends_on/2-1'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:depends_on/2-1', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_depends_on/2-2'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:depends_on/2-2', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_depends_on_ap/4-2'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:depends_on_ap/4-2', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_depends_on_ap/4-3'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:depends_on_ap/4-3', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_depends_on_goal/2-2'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:depends_on_goal/2-2', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_ai_observed_internal/2-12'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:ai_observed_internal/2-12', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_ai_not_observed_internal/2-12'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:ai_not_observed_internal/2-12', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_ai_not_observed/2-12'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:ai_not_observed/2-12', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_depends_on_as/3-3'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:depends_on_as/3-3', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_depends_on_as/3-2'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:depends_on_as/3-2', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_phase_end/1-1'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:phase_end/1-1', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$via1_multi_hash_delay_phase_end/2-1'(A, B) :-
        hprolog:get_store('$chr_store_multi_hash_chr_translate:delay_phase_end/2-1', C),
        chr_hashtable_store:lookup_ht(C, A, B).
'$chr_initialization' :-
        hprolog:init_store('$chr_store_global_list_chr_translate:novel_production_call/3', []),
        hprolog:init_store('$chr_store_global_list_chr_translate:uses_history/1', []),
        hprolog:init_store('$chr_store_global_list_chr_translate:does_use_history/1', []),
        chr_hashtable_store:new_ht(A),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:delay_phase_end/2-1', A),
        chr_hashtable_store:new_ht(B),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:phase_end/1-1', B),
        hprolog:init_store('$chr_store_global_ground_chr_translate:ai_observation_gather_results/0', []),
        chr_hashtable_store:new_ht(C),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:depends_on_as/3-2', C),
        chr_hashtable_store:new_ht(D),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:depends_on_as/3-3', D),
        hprolog:init_store('$chr_store_global_list_chr_translate:ai_is_observed/2', []),
        chr_hashtable_store:new_ht(E),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:ai_not_observed/2-12', E),
        chr_hashtable_store:new_ht(F),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:ai_not_observed_internal/2-12', F),
        hprolog:init_store('$chr_store_global_ground_chr_translate:ai_not_observed_internal/2', []),
        hprolog:init_store('$chr_store_global_ground_chr_translate:ai_observed/2', []),
        chr_hashtable_store:new_ht(G),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:ai_observed_internal/2-12', G),
        hprolog:init_store('$chr_store_global_ground_chr_translate:ai_observed_internal/2', []),
        chr_hashtable_store:new_ht(H),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:depends_on_goal/2-2', H),
        chr_hashtable_store:new_ht(I),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:depends_on_ap/4-3', I),
        chr_hashtable_store:new_ht(J),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:depends_on_ap/4-2', J),
        chr_hashtable_store:new_ht(K),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:depends_on/2-2', K),
        chr_hashtable_store:new_ht(L),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:depends_on/2-1', L),
        hprolog:init_store('$chr_store_global_ground_chr_translate:abstract_constraints/1', []),
        chr_hashtable_store:new_ht(M),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:final_answer_pattern/2-1', M),
        hprolog:init_store('$chr_store_global_ground_chr_translate:call_pattern/1', []),
        chr_hashtable_store:new_ht(N),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:call_pattern/1-1', N),
        chr_hashtable_store:new_ht(O),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:initial_call_pattern/1-1', O),
        hprolog:init_store('$chr_store_global_ground_chr_translate:initial_call_pattern/1', []),
        hprolog:init_store('$chr_store_global_list_chr_translate:get_functional_dependency/4', []),
        chr_hashtable_store:new_ht(P),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:functional_dependency/4-12', P),
        chr_hashtable_store:new_ht(Q),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:functional_dependency/4-1', Q),
        hprolog:init_store('$chr_store_global_list_chr_translate:occurrence_code/6', []),
        hprolog:init_store('$chr_store_global_list_chr_translate:occurrences_code/6', []),
        hprolog:init_store('$chr_store_global_list_chr_translate:is_used_auxiliary_predicate/2', []),
        hprolog:init_store('$chr_store_global_list_chr_translate:is_used_auxiliary_predicate/1', []),
        chr_hashtable_store:new_ht(R),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/2-12', R),
        chr_hashtable_store:new_ht(S),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/2-1', S),
        chr_hashtable_store:new_ht(T),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:use_auxiliary_predicate/1-1', T),
        hprolog:init_store('$chr_store_global_list_chr_translate:has_active_occurrence/2', []),
        hprolog:init_store('$chr_store_global_list_chr_translate:has_active_occurrence/1', []),
        hprolog:init_store('$chr_store_global_list_chr_translate:constraint_code/3', []),
        hprolog:init_store('$chr_store_global_ground_chr_translate:constraints_code1/3', []),
        chr_hashtable_store:new_ht(U),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:check_all_passive/2-1', U),
        hprolog:init_store('$chr_store_global_list_chr_translate:is_finally_stored/1', []),
        hprolog:init_store('$chr_store_global_list_chr_translate:is_stored/1', []),
        chr_hashtable_store:new_ht(V),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:stored_complete/3-1', V),
        hprolog:init_store('$chr_store_global_list_chr_translate:stored_completing/3', []),
        chr_hashtable_store:new_ht(W),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:stored/3-12', W),
        chr_hashtable_store:new_ht(X),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:stored/3-1', X),
        hprolog:init_store('$chr_store_global_ground_chr_translate:add_type_information/3', []),
        hprolog:init_store('$chr_store_global_list_chr_translate:get_constraint_type/2', []),
        hprolog:init_store('$chr_store_global_list_chr_translate:get_type_definition/2', []),
        chr_hashtable_store:new_ht(Y),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:constraint_type/2-1', Y),
        hprolog:init_store('$chr_store_global_list_chr_translate:type_alias/2', []),
        hprolog:init_store('$chr_store_global_list_chr_translate:type_definition/2', []),
        hprolog:init_store('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', []),
        hprolog:init_store('$chr_store_global_list_chr_translate:next_occ_in_rule/6', []),
        hprolog:init_store('$chr_store_global_list_chr_translate:first_occ_in_rule/4', []),
        chr_hashtable_store:new_ht(Z),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:set_all_passive/1-1', Z),
        hprolog:init_store('$chr_store_global_list_chr_translate:simplify_guards/1', []),
        chr_hashtable_store:new_ht(A1),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:prev_guard_list/7-1', A1),
        chr_hashtable_store:new_ht(B1),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:prev_guard_list/7-2', B1),
        hprolog:init_store('$chr_store_global_list_chr_translate:prolog_global_variables/1', []),
        chr_hashtable_store:new_ht(C1),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:prolog_global_variable/1-1', C1),
        hprolog:init_store('$chr_store_global_ground_chr_translate:prolog_global_variable/1', []),
        hprolog:init_store('$chr_store_global_list_chr_translate:module_initializers/1', []),
        hprolog:init_store('$chr_store_global_ground_chr_translate:module_initializer/1', []),
        hprolog:init_store('$chr_store_global_list_chr_translate:generate_indexed_variables_body/4', []),
        hprolog:init_store('$chr_store_global_list_chr_translate:is_self_observer/1', []),
        chr_hashtable_store:new_ht(D1),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:observes_indirectly/2-1', D1),
        chr_hashtable_store:new_ht(E1),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:observes_indirectly/2-12', E1),
        chr_hashtable_store:new_ht(F1),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:spawns_observer/2-2', F1),
        chr_hashtable_store:new_ht(G1),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:spawns_observer/2-12', G1),
        chr_hashtable_store:new_ht(H1),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:observes/2-12', H1),
        chr_hashtable_store:new_ht(I1),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:observes/2-1', I1),
        hprolog:init_store('$chr_store_global_list_chr_translate:get_indexing_spec/2', []),
        chr_hashtable_store:new_ht(J1),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:indexing_spec/2-1', J1),
        hprolog:init_store('$chr_store_global_list_chr_translate:has_no_history/1', []),
        chr_hashtable_store:new_ht(K1),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:no_history/1-1', K1),
        hprolog:init_store('$chr_store_global_list_chr_translate:get_max_constraint_index/1', []),
        hprolog:init_store('$chr_store_global_ground_chr_translate:max_constraint_index/1', []),
        hprolog:init_store('$chr_store_global_list_chr_translate:get_indexed_constraint/2', []),
        hprolog:init_store('$chr_store_global_list_chr_translate:get_constraint_index/2', []),
        chr_hashtable_store:new_ht(L1),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:constraint_index/2-1', L1),
        chr_hashtable_store:new_ht(M1),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:constraint_index/2-2', M1),
        hprolog:init_store('$chr_store_global_list_chr_translate:is_least_occurrence/1', []),
        chr_hashtable_store:new_ht(N1),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:least_occurrence/2-1', N1),
        hprolog:init_store('$chr_store_global_list_chr_translate:get_rule/2', []),
        chr_hashtable_store:new_ht(O1),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:rule/2-1', O1),
        hprolog:init_store('$chr_store_global_list_chr_translate:get_allocation_occurrence/2', []),
        chr_hashtable_store:new_ht(P1),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:allocation_occurrence/2-12', P1),
        chr_hashtable_store:new_ht(Q1),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:allocation_occurrence/2-1', Q1),
        hprolog:init_store('$chr_store_global_list_chr_translate:get_max_occurrence/2', []),
        chr_hashtable_store:new_ht(R1),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:max_occurrence/2-1', R1),
        hprolog:init_store('$chr_store_global_list_chr_translate:get_occurrence/4', []),
        chr_hashtable_store:new_ht(S1),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:occurrence/4-34', S1),
        chr_hashtable_store:new_ht(T1),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:occurrence/4-13', T1),
        chr_hashtable_store:new_ht(U1),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:occurrence/4-3', U1),
        chr_hashtable_store:new_ht(V1),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:occurrence/4-12', V1),
        chr_hashtable_store:new_ht(W1),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:occurrence/4-1', W1),
        hprolog:init_store('$chr_store_global_ground_chr_translate:occurrence/4', []),
        hprolog:init_store('$chr_store_global_list_chr_translate:new_occurrence/3', []),
        hprolog:init_store('$chr_store_global_list_chr_translate:any_passive_head/1', []),
        hprolog:init_store('$chr_store_global_list_chr_translate:is_passive/2', []),
        chr_hashtable_store:new_ht(X1),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:passive/2-12', X1),
        chr_hashtable_store:new_ht(Y1),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:passive/2-1', Y1),
        hprolog:init_store('$chr_store_global_list_chr_translate:inc_rule_count/1', []),
        hprolog:init_store('$chr_store_global_ground_chr_translate:rule_count/1', []),
        hprolog:init_store('$chr_store_global_list_chr_translate:validate_store_type_assumption/1', []),
        chr_hashtable_store:new_ht(Z1),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:assumed_store_type/2-1', Z1),
        chr_hashtable_store:new_ht(A2),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:actual_store_types/2-1', A2),
        hprolog:init_store('$chr_store_global_list_chr_translate:update_store_type/2', []),
        hprolog:init_store('$chr_store_global_list_chr_translate:get_store_type/2', []),
        chr_hashtable_store:new_ht(B2),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:store_type/2-1', B2),
        hprolog:init_store('$chr_store_global_list_chr_translate:are_none_suspended_on_variables/0', []),
        hprolog:init_store('$chr_store_global_singleton_chr_translate:none_suspended_on_variables/0', []),
        hprolog:init_store('$chr_store_global_list_chr_translate:only_ground_indexed_arguments/1', []),
        hprolog:init_store('$chr_store_global_list_chr_translate:may_trigger/1', []),
        hprolog:init_store('$chr_store_global_list_chr_translate:get_constraint_mode/2', []),
        chr_hashtable_store:new_ht(C2),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:constraint_mode/2-1', C2),
        hprolog:init_store('$chr_store_global_ground_chr_translate:constraint_mode/2', []),
        hprolog:init_store('$chr_store_global_list_chr_translate:is_indexed_argument/2', []),
        chr_hashtable_store:new_ht(D2),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:indexed_argument/2-12', D2),
        chr_hashtable_store:new_ht(E2),
        hprolog:init_store('$chr_store_multi_hash_chr_translate:indexed_argument/2-1', E2),
        hprolog:init_store('$chr_store_global_list_chr_translate:get_target_module/1', []),
        hprolog:init_store('$chr_store_global_singleton_chr_translate:target_module/1', []),
        true.
(:-'$chr_initialization').
target_module(_) :-
        hprolog:get_store('$chr_store_global_singleton_chr_translate:target_module/1', A),
        A\==[],
        A=suspension(_,_,_), !.
target_module(A) :-
        '$insert_constraint_internal_target_module/1'(B, A),
        '$insert_in_store_target_module/1'(B).
get_target_module(A) :-
        hprolog:get_store('$chr_store_global_singleton_chr_translate:target_module/1', B),
        B\==[],
        B=suspension(_,_,C), !,
        A=C.
get_target_module(user).
indexed_argument(A, B) :-
        '$via1_multi_hash_indexed_argument/2-12'(k(A,B), C),
        member(D, C),
        D=suspension(_,E,_,_),
        get_mutable(active, E), !.
indexed_argument(A, B) :-
        '$insert_constraint_internal_indexed_argument/2'(C, A, B),
        '$insert_in_store_indexed_argument/2'(C).
is_indexed_argument(A, B) :-
        '$via1_multi_hash_indexed_argument/2-12'(k(A,B), C),
        member(D, C),
        D=suspension(_,E,_,_),
        get_mutable(active, E), !.
is_indexed_argument(_, _) :-
        fail.
constraint_mode(A, B) :-
        'constraint_mode/2__0'(A, B, _).
'constraint_mode/2__0'(A, _, _) :-
        '$via1_multi_hash_constraint_mode/2-1'(A, B),
        member(C, B),
        C=suspension(_,D,_,_,_),
        get_mutable(active, D), !.
'constraint_mode/2__0'(A, B, C) :-
        A=D/E,
        hprolog:get_store('$chr_store_global_ground_chr_translate:add_type_information/3', F), !,
        '$allocate_constraint_constraint_mode/2'(C, A, B),
        'constraint_mode/2__0__0'(F, A, B, C, D, E).
'constraint_mode/2__0__0'([], A, B, C, _, _) :-
        'constraint_mode/2__1'(A, B, C).
'constraint_mode/2__0__0'([A|B], C, D, E, F, G) :-
        (   A=suspension(_,H,_,I,J,K),
            get_mutable(active, H),
            I=[L|M],
            J=[N|O],
            functor(L, F, G) ->
            '$remove_constraint_internal_add_type_information/3'(A, P),
            (   P=yes ->
                '$delete_from_store_add_type_information/3'(A)
            ;   true
            ),
            '$activate_constraint_constraint_mode/2'(Q, E),
            (   Q==yes ->
                '$insert_in_store_constraint_mode/2'(E)
            ;   true
            ),
            L=..[_|R],
            N=..[_|S],
            add_mode_info(D, R, T),
            K=(T,U),
            (   get_constraint_type(F/G, V) ->
                types2condition(V, R, S, D, W),
                list2conj(W, X),
                U=(X,Y),
                add_type_information(M, O, Y)
            ;   add_type_information(M, O, U)
            ),
            (   E=suspension(_,Z,_,_,_),
                get_mutable(active, Z) ->
                chr_runtime:'chr update_mutable'(inactive, Z),
                'constraint_mode/2__0__0'(B, C, D, E, F, G)
            ;   true
            )
        ;   'constraint_mode/2__0__0'(B, C, D, E, F, G)
        ).
'constraint_mode/2__0'(A, B, C) :-
        '$allocate_constraint_constraint_mode/2'(C, A, B),
        'constraint_mode/2__1'(A, B, C).
'constraint_mode/2__1'(_, _, A) :-
        '$activate_constraint_constraint_mode/2'(B, A),
        (   B==yes ->
            '$insert_in_store_constraint_mode/2'(A)
        ;   true
        ).
get_constraint_mode(A, B) :-
        '$via1_multi_hash_constraint_mode/2-1'(A, C),
        member(D, C),
        D=suspension(_,E,_,_,F),
        get_mutable(active, E), !,
        B=F.
get_constraint_mode(_/A, B) :-
        replicate(A, ?, B).
may_trigger(A) :-
        \+has_active_occurrence(A), !,
        fail.
may_trigger(A) :-
        '$via1_multi_hash_constraint_mode/2-1'(A, B),
        member(C, B),
        C=suspension(_,D,_,_,E),
        get_mutable(active, D),
        '$via1_multi_hash_indexed_argument/2-1'(A, F),
        member(G, F),
        G=suspension(_,H,_,I),
        get_mutable(active, H),
        nth(I, E, J),
        J\==(+), !,
        is_stored(A).
may_trigger(_) :-
        chr_pp_flag(debugable, on).
only_ground_indexed_arguments(A) :-
        '$via1_multi_hash_constraint_mode/2-1'(A, B),
        member(C, B),
        C=suspension(_,D,_,_,E),
        get_mutable(active, D),
        '$via1_multi_hash_indexed_argument/2-1'(A, F),
        member(G, F),
        G=suspension(_,H,_,I),
        get_mutable(active, H),
        nth(I, E, J),
        J\==(+), !,
        fail.
only_ground_indexed_arguments(_).
none_suspended_on_variables :-
        hprolog:get_store('$chr_store_global_singleton_chr_translate:none_suspended_on_variables/0', A),
        A\==[],
        A=suspension(_,_), !.
none_suspended_on_variables :-
        '$insert_constraint_internal_none_suspended_on_variables/0'(A),
        '$insert_in_store_none_suspended_on_variables/0'(A).
are_none_suspended_on_variables :-
        hprolog:get_store('$chr_store_global_singleton_chr_translate:none_suspended_on_variables/0', A),
        A\==[],
        A=suspension(_,_), !.
are_none_suspended_on_variables :-
        fail.
store_type(A, atom_hash(B)) :- !,
        store_type(A, multi_hash([B])).
store_type(A, B) :-
        '$insert_constraint_internal_store_type/2'(C, A, B),
        '$insert_in_store_store_type/2'(C).
get_store_type(A, B) :-
        '$via1_multi_hash_store_type/2-1'(A, C),
        member(D, C),
        D=suspension(_,E,_,F),
        get_mutable(active, E), !,
        B=F.
get_store_type(A, B) :-
        '$via1_multi_hash_assumed_store_type/2-1'(A, C),
        member(D, C),
        D=suspension(_,E,_,F),
        get_mutable(active, E), !,
        B=F.
get_store_type(_, default).
update_store_type(A, B) :-
        '$via1_multi_hash_actual_store_types/2-1'(A, C),
        member(D, C),
        D=suspension(_,E,_,F),
        get_mutable(active, E),
        member(B, F), !.
update_store_type(A, B) :-
        '$via1_multi_hash_actual_store_types/2-1'(A, C),
        member(D, C),
        D=suspension(_,E,_,F),
        get_mutable(active, E), !,
        '$remove_constraint_internal_actual_store_types/2'(D, G),
        (   G=yes ->
            '$delete_from_store_actual_store_types/2'(D)
        ;   true
        ),
        actual_store_types(A, [B|F]).
update_store_type(A, B) :-
        actual_store_types(A, [B]).
actual_store_types(A, B) :-
        '$insert_constraint_internal_actual_store_types/2'(C, A, B),
        '$insert_in_store_actual_store_types/2'(C).
assumed_store_type(A, B) :-
        '$insert_constraint_internal_assumed_store_type/2'(C, A, B),
        '$insert_in_store_assumed_store_type/2'(C).
validate_store_type_assumption(A) :-
        '$via1_multi_hash_actual_store_types/2-1'(A, B),
        member(C, B),
        C=suspension(_,D,_,E),
        get_mutable(active, D),
        '$via1_multi_hash_assumed_store_type/2-1'(A, F),
        member(G, F),
        G=suspension(_,H,_,_),
        get_mutable(active, H), !,
        '$remove_constraint_internal_actual_store_types/2'(C, I),
        (   I=yes ->
            '$delete_from_store_actual_store_types/2'(C)
        ;   true
        ),
        '$remove_constraint_internal_assumed_store_type/2'(G, J),
        (   J=yes ->
            '$delete_from_store_assumed_store_type/2'(G)
        ;   true
        ),
        store_type(A, multi_store(E)).
validate_store_type_assumption(A) :-
        '$via1_multi_hash_actual_store_types/2-1'(A, B),
        member(C, B),
        C=suspension(_,D,_,E),
        get_mutable(active, D),
        '$via1_multi_hash_store_type/2-1'(A, F),
        member(G, F),
        G=suspension(_,H,_,_),
        get_mutable(active, H), !,
        '$remove_constraint_internal_actual_store_types/2'(C, I),
        (   I=yes ->
            '$delete_from_store_actual_store_types/2'(C)
        ;   true
        ),
        '$remove_constraint_internal_store_type/2'(G, J),
        (   J=yes ->
            '$delete_from_store_store_type/2'(G)
        ;   true
        ),
        store_type(A, multi_store(E)).
validate_store_type_assumption(A) :-
        '$via1_multi_hash_assumed_store_type/2-1'(A, B),
        member(C, B),
        C=suspension(_,D,_,_),
        get_mutable(active, D), !,
        '$remove_constraint_internal_assumed_store_type/2'(C, E),
        (   E=yes ->
            '$delete_from_store_assumed_store_type/2'(C)
        ;   true
        ),
        store_type(A, global_ground).
validate_store_type_assumption(_).
rule_count(A) :-
        '$insert_constraint_internal_rule_count/1'(B, A),
        '$insert_in_store_rule_count/1'(B).
inc_rule_count(A) :-
        hprolog:get_store('$chr_store_global_ground_chr_translate:rule_count/1', B),
        member(C, B),
        C=suspension(_,D,_,E),
        get_mutable(active, D), !,
        '$remove_constraint_internal_rule_count/1'(C, F),
        (   F=yes ->
            '$delete_from_store_rule_count/1'(C)
        ;   true
        ),
        A is E+1,
        rule_count(A).
inc_rule_count(1) :-
        rule_count(1).
passive(A, B) :-
        'passive/2__0'(A, B, _).
'passive/2__0'(A, B, _) :-
        '$via1_multi_hash_passive/2-12'(k(A,B), C),
        member(D, C),
        D=suspension(_,E,_,_,_),
        get_mutable(active, E), !.
'passive/2__0'(A, B, C) :-
        '$via1_multi_hash_occurrence/4-34'(k(A,B), D), !,
        '$allocate_constraint_passive/2'(C, A, B),
        'passive/2__0__0'(D, A, B, C).
'passive/2__0__0'([], A, B, C) :-
        'passive/2__1'(A, B, C).
'passive/2__0__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,_,G,H,I,J),
            get_mutable(active, F),
            I==C,
            J==D,
            '$via1_multi_hash_allocation_occurrence/2-12'(k(G,H), K) ->
            'passive/2__0__1'(K, G, H, A, B, C, D, E)
        ;   'passive/2__0__0'(B, C, D, E)
        ).
'passive/2__0__1'([], _, _, _, A, B, C, D) :-
        'passive/2__0__0'(A, B, C, D).
'passive/2__0__1'([A|B], C, D, E, F, G, H, I) :-
        (   A=suspension(_,J,K,L),
            get_mutable(active, J),
            K==C,
            L==D ->
            '$remove_constraint_internal_allocation_occurrence/2'(A, M),
            (   M=yes ->
                '$delete_from_store_allocation_occurrence/2'(A)
            ;   true
            ),
            '$activate_constraint_passive/2'(N, I),
            (   N==yes ->
                '$insert_in_store_passive/2'(I)
            ;   true
            ),
            O is D+1,
            allocation_occurrence(C, O),
            (   I=suspension(_,P,_,_,_),
                get_mutable(active, P) ->
                chr_runtime:'chr update_mutable'(inactive, P),
                'passive/2__0__1'(B, C, D, E, F, G, H, I)
            ;   true
            )
        ;   'passive/2__0__1'(B, C, D, E, F, G, H, I)
        ).
'passive/2__0'(A, B, C) :-
        '$allocate_constraint_passive/2'(C, A, B),
        'passive/2__1'(A, B, C).
'passive/2__1'(A, B, C) :-
        '$via1_multi_hash_least_occurrence/2-1'(A, D), !,
        'passive/2__1__0'(D, A, B, C).
'passive/2__1__0'([], A, B, C) :-
        'passive/2__2'(A, B, C).
'passive/2__1__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,G,H),
            get_mutable(active, F),
            G==C,
            H=[I|J],
            I==D,
            '$via1_multi_hash_rule/2-1'(C, K),
            member(L, K),
            L=suspension(_,M,_,_,_),
            get_mutable(active, M) ->
            '$remove_constraint_internal_least_occurrence/2'(A, N),
            (   N=yes ->
                '$delete_from_store_least_occurrence/2'(A)
            ;   true
            ),
            '$activate_constraint_passive/2'(O, E),
            (   O==yes ->
                '$insert_in_store_passive/2'(E)
            ;   true
            ),
            least_occurrence(C, J),
            (   E=suspension(_,P,_,_,_),
                get_mutable(active, P) ->
                chr_runtime:'chr update_mutable'(inactive, P),
                'passive/2__1__0'(B, C, D, E)
            ;   true
            )
        ;   'passive/2__1__0'(B, C, D, E)
        ).
'passive/2__1'(A, B, C) :-
        'passive/2__2'(A, B, C).
'passive/2__2'(A, B, C) :-
        '$via1_multi_hash_occurrence/4-34'(k(A,B), D), !,
        'passive/2__2__0'(D, A, B, C).
'passive/2__2__0'([], A, B, C) :-
        'passive/2__3'(A, B, C).
'passive/2__2__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,_,G,H,I,J),
            get_mutable(active, F),
            I==C,
            J==D,
            '$via1_multi_hash_stored/3-12'(k(G,H), K) ->
            'passive/2__2__1'(K, G, H, A, B, C, D, E)
        ;   'passive/2__2__0'(B, C, D, E)
        ).
'passive/2__2__1'([], _, _, _, A, B, C, D) :-
        'passive/2__2__0'(A, B, C, D).
'passive/2__2__1'([A|B], C, D, E, F, G, H, I) :-
        (   A=suspension(_,J,K,L,M),
            get_mutable(active, J),
            K==C,
            L==D,
            M=yes,
            '$via1_multi_hash_stored_complete/3-1'(C, N),
            member(O, N),
            O=suspension(_,P,_,_,Q,R),
            get_mutable(active, P),
            D<Q ->
            '$remove_constraint_internal_stored/3'(A, S),
            (   S=yes ->
                '$delete_from_store_stored/3'(A)
            ;   true
            ),
            '$remove_constraint_internal_stored_complete/3'(O, T),
            (   T=yes ->
                '$delete_from_store_stored_complete/3'(O)
            ;   true
            ),
            '$activate_constraint_passive/2'(U, I),
            (   U==yes ->
                '$insert_in_store_passive/2'(I)
            ;   true
            ),
            V is R-1,
            stored(C, D, maybe),
            stored_complete(C, Q, V),
            (   I=suspension(_,W,_,_,_),
                get_mutable(active, W) ->
                chr_runtime:'chr update_mutable'(inactive, W),
                'passive/2__2__1'(B, C, D, E, F, G, H, I)
            ;   true
            )
        ;   'passive/2__2__1'(B, C, D, E, F, G, H, I)
        ).
'passive/2__2'(A, B, C) :-
        'passive/2__3'(A, B, C).
'passive/2__3'(A, B, C) :-
        '$via1_multi_hash_rule/2-1'(A, D), !,
        'passive/2__3__0'(D, A, B, C).
'passive/2__3__0'([], A, B, C) :-
        'passive/2__4'(A, B, C).
'passive/2__3__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,G,H),
            get_mutable(active, F),
            G==C,
            I=t(116,A,E),
            '$novel_production'(A, I),
            '$novel_production'(E, I),
            H=pragma(rule(_,_,_,_),ids([D|J],K),_,_,C) ->
            '$extend_history'(E, I),
            '$activate_constraint_passive/2'(L, E),
            (   L==yes ->
                '$insert_in_store_passive/2'(E)
            ;   true
            ),
            append(J, K, M),
            check_all_passive(C, M),
            (   E=suspension(_,N,_,_,_),
                get_mutable(active, N) ->
                chr_runtime:'chr update_mutable'(inactive, N),
                'passive/2__3__0'(B, C, D, E)
            ;   true
            )
        ;   'passive/2__3__0'(B, C, D, E)
        ).
'passive/2__3'(A, B, C) :-
        'passive/2__4'(A, B, C).
'passive/2__4'(A, B, C) :-
        '$via1_multi_hash_rule/2-1'(A, D), !,
        'passive/2__4__0'(D, A, B, C).
'passive/2__4__0'([], A, B, C) :-
        'passive/2__5'(A, B, C).
'passive/2__4__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,G,H),
            get_mutable(active, F),
            G==C,
            I=t(117,A,E),
            '$novel_production'(A, I),
            '$novel_production'(E, I),
            H=pragma(rule(_,_,_,_),ids([],[D|J]),_,_,C) ->
            '$extend_history'(E, I),
            '$activate_constraint_passive/2'(K, E),
            (   K==yes ->
                '$insert_in_store_passive/2'(E)
            ;   true
            ),
            check_all_passive(C, J),
            (   E=suspension(_,L,_,_,_),
                get_mutable(active, L) ->
                chr_runtime:'chr update_mutable'(inactive, L),
                'passive/2__4__0'(B, C, D, E)
            ;   true
            )
        ;   'passive/2__4__0'(B, C, D, E)
        ).
'passive/2__4'(A, B, C) :-
        'passive/2__5'(A, B, C).
'passive/2__5'(A, B, C) :-
        '$via1_multi_hash_check_all_passive/2-1'(A, D), !,
        'passive/2__5__0'(D, A, B, C).
'passive/2__5__0'([], A, B, C) :-
        'passive/2__6'(A, B, C).
'passive/2__5__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,G,H),
            get_mutable(active, F),
            G==C,
            H=[I|J],
            I==D ->
            '$remove_constraint_internal_check_all_passive/2'(A, K),
            (   K=yes ->
                '$delete_from_store_check_all_passive/2'(A)
            ;   true
            ),
            '$activate_constraint_passive/2'(L, E),
            (   L==yes ->
                '$insert_in_store_passive/2'(E)
            ;   true
            ),
            check_all_passive(C, J),
            (   E=suspension(_,M,_,_,_),
                get_mutable(active, M) ->
                chr_runtime:'chr update_mutable'(inactive, M),
                'passive/2__5__0'(B, C, D, E)
            ;   true
            )
        ;   'passive/2__5__0'(B, C, D, E)
        ).
'passive/2__5'(A, B, C) :-
        'passive/2__6'(A, B, C).
'passive/2__6'(_, _, A) :-
        '$activate_constraint_passive/2'(B, A),
        (   B==yes ->
            '$insert_in_store_passive/2'(A)
        ;   true
        ).
is_passive(A, B) :-
        '$via1_multi_hash_passive/2-12'(k(A,B), C),
        member(D, C),
        D=suspension(_,E,_,_,_),
        get_mutable(active, E), !.
is_passive(_, _) :-
        fail.
any_passive_head(A) :-
        '$via1_multi_hash_passive/2-1'(A, B),
        member(C, B),
        C=suspension(_,D,_,_,_),
        get_mutable(active, D), !.
any_passive_head(_) :-
        fail.
new_occurrence(A, B, C) :-
        '$via1_multi_hash_max_occurrence/2-1'(A, D),
        member(E, D),
        E=suspension(_,F,_,_,G),
        get_mutable(active, F), !,
        '$remove_constraint_internal_max_occurrence/2'(E, H),
        (   H=yes ->
            '$delete_from_store_max_occurrence/2'(E)
        ;   true
        ),
        I is G+1,
        occurrence(A, I, B, C),
        max_occurrence(A, I).
new_occurrence(A, B, _) :-
        chr_error(internal, [['new_occurrence: missing max_occurrence for ~w in rule ~w'-[A,B]]]).
occurrence(A, B, C, D) :-
        'occurrence/4__0'(A, B, C, D, _).
'occurrence/4__0'(A, B, C, D, E) :-
        '$via1_multi_hash_allocation_occurrence/2-12'(k(A,B), F), !,
        '$allocate_constraint_occurrence/4'(E, A, B, C, D),
        'occurrence/4__0__0'(F, A, B, C, D, E).
'occurrence/4__0__0'([], A, B, C, D, E) :-
        'occurrence/4__1'(A, B, C, D, E).
'occurrence/4__0__0'([A|B], C, D, E, F, G) :-
        (   A=suspension(_,H,I,J),
            get_mutable(active, H),
            I==C,
            J==D,
            '$via1_multi_hash_passive/2-12'(k(E,F), K),
            member(L, K),
            L=suspension(_,M,_,_,_),
            get_mutable(active, M) ->
            '$remove_constraint_internal_allocation_occurrence/2'(A, N),
            (   N=yes ->
                '$delete_from_store_allocation_occurrence/2'(A)
            ;   true
            ),
            '$activate_constraint_occurrence/4'(O, G),
            (   O==yes ->
                '$insert_in_store_occurrence/4'(G)
            ;   true
            ),
            P is D+1,
            allocation_occurrence(C, P),
            (   G=suspension(_,Q,_,_,_,_,_,_),
                get_mutable(active, Q) ->
                chr_runtime:'chr update_mutable'(inactive, Q),
                'occurrence/4__0__0'(B, C, D, E, F, G)
            ;   true
            )
        ;   'occurrence/4__0__0'(B, C, D, E, F, G)
        ).
'occurrence/4__0'(A, B, C, D, E) :-
        '$allocate_constraint_occurrence/4'(E, A, B, C, D),
        'occurrence/4__1'(A, B, C, D, E).
'occurrence/4__1'(A, B, C, D, E) :-
        '$via1_multi_hash_allocation_occurrence/2-12'(k(A,B), F), !,
        'occurrence/4__1__0'(F, A, B, C, D, E).
'occurrence/4__1__0'([], A, B, C, D, E) :-
        'occurrence/4__2'(A, B, C, D, E).
'occurrence/4__1__0'([A|B], C, D, E, F, G) :-
        (   A=suspension(_,H,I,J),
            get_mutable(active, H),
            I==C,
            J==D,
            '$via1_multi_hash_rule/2-1'(E, K),
            member(L, K),
            L=suspension(_,M,_,_,N),
            get_mutable(active, M),
            N=pragma(_,ids(O,_),_,_,_),
            member(F, O) ->
            '$remove_constraint_internal_allocation_occurrence/2'(A, P),
            (   P=yes ->
                '$delete_from_store_allocation_occurrence/2'(A)
            ;   true
            ),
            '$activate_constraint_occurrence/4'(Q, G),
            (   Q==yes ->
                '$insert_in_store_occurrence/4'(G)
            ;   true
            ),
            R is D+1,
            allocation_occurrence(C, R),
            (   G=suspension(_,S,_,_,_,_,_,_),
                get_mutable(active, S) ->
                chr_runtime:'chr update_mutable'(inactive, S),
                'occurrence/4__1__0'(B, C, D, E, F, G)
            ;   true
            )
        ;   'occurrence/4__1__0'(B, C, D, E, F, G)
        ).
'occurrence/4__1'(A, B, C, D, E) :-
        'occurrence/4__2'(A, B, C, D, E).
'occurrence/4__2'(A, B, C, D, E) :-
        '$via1_multi_hash_allocation_occurrence/2-12'(k(A,B), F), !,
        'occurrence/4__2__0'(F, A, B, C, D, E).
'occurrence/4__2__0'([], A, B, C, D, E) :-
        'occurrence/4__3'(A, B, C, D, E).
'occurrence/4__2__0'([A|B], C, D, E, F, G) :-
        (   A=suspension(_,H,I,J),
            get_mutable(active, H),
            I==C,
            J==D,
            '$via1_multi_hash_rule/2-1'(E, K),
            member(L, K),
            L=suspension(_,M,_,_,N),
            get_mutable(active, M),
            N=pragma(rule(_,_,_,true),_,_,_,_) ->
            '$remove_constraint_internal_allocation_occurrence/2'(A, O),
            (   O=yes ->
                '$delete_from_store_allocation_occurrence/2'(A)
            ;   true
            ),
            '$activate_constraint_occurrence/4'(P, G),
            (   P==yes ->
                '$insert_in_store_occurrence/4'(G)
            ;   true
            ),
            Q is D+1,
            allocation_occurrence(C, Q),
            (   G=suspension(_,R,_,_,_,_,_,_),
                get_mutable(active, R) ->
                chr_runtime:'chr update_mutable'(inactive, R),
                'occurrence/4__2__0'(B, C, D, E, F, G)
            ;   true
            )
        ;   'occurrence/4__2__0'(B, C, D, E, F, G)
        ).
'occurrence/4__2'(A, B, C, D, E) :-
        'occurrence/4__3'(A, B, C, D, E).
'occurrence/4__3'(A, B, C, D, E) :-
        '$via1_multi_hash_allocation_occurrence/2-12'(k(A,B), F), !,
        'occurrence/4__3__0'(F, A, B, C, D, E).
'occurrence/4__3__0'([], A, B, C, D, E) :-
        'occurrence/4__4'(A, B, C, D, E).
'occurrence/4__3__0'([A|B], C, D, E, F, G) :-
        (   A=suspension(_,H,I,J),
            get_mutable(active, H),
            I==C,
            J==D,
            '$via1_multi_hash_rule/2-1'(E, K),
            member(L, K),
            L=suspension(_,M,_,_,N),
            get_mutable(active, M),
            N=pragma(rule([_|_],_,_,_),_,_,_,_),
            \+is_observed(C,D) ->
            '$remove_constraint_internal_allocation_occurrence/2'(A, O),
            (   O=yes ->
                '$delete_from_store_allocation_occurrence/2'(A)
            ;   true
            ),
            '$activate_constraint_occurrence/4'(P, G),
            (   P==yes ->
                '$insert_in_store_occurrence/4'(G)
            ;   true
            ),
            Q is D+1,
            allocation_occurrence(C, Q),
            (   G=suspension(_,R,_,_,_,_,_,_),
                get_mutable(active, R) ->
                chr_runtime:'chr update_mutable'(inactive, R),
                'occurrence/4__3__0'(B, C, D, E, F, G)
            ;   true
            )
        ;   'occurrence/4__3__0'(B, C, D, E, F, G)
        ).
'occurrence/4__3'(A, B, C, D, E) :-
        'occurrence/4__4'(A, B, C, D, E).
'occurrence/4__4'(A, B, C, D, E) :-
        '$via1_multi_hash_rule/2-1'(C, F), !,
        'occurrence/4__4__0'(F, A, B, C, D, E).
'occurrence/4__4__0'([], A, B, C, D, E) :-
        'occurrence/4__5'(A, B, C, D, E).
'occurrence/4__4__0'([A|B], C, D, E, F, G) :-
        (   A=suspension(_,H,_,I,J),
            get_mutable(active, H),
            I==E,
            '$via1_multi_hash_allocation_occurrence/2-12'(k(C,D), K) ->
            'occurrence/4__4__1'(K, J, A, B, C, D, E, F, G)
        ;   'occurrence/4__4__0'(B, C, D, E, F, G)
        ).
'occurrence/4__4__1'([], _, _, A, B, C, D, E, F) :-
        'occurrence/4__4__0'(A, B, C, D, E, F).
'occurrence/4__4__1'([A|B], C, D, E, F, G, H, I, J) :-
        (   A=suspension(_,K,L,M),
            get_mutable(active, K),
            L==F,
            M==G,
            '$via1_multi_hash_least_occurrence/2-1'(H, N),
            member(O, N),
            O=suspension(_,P,_,[]),
            get_mutable(active, P),
            C=pragma(rule([],_,_,_),_,_,_,_),
            \+is_observed(F,G) ->
            '$remove_constraint_internal_allocation_occurrence/2'(A, Q),
            (   Q=yes ->
                '$delete_from_store_allocation_occurrence/2'(A)
            ;   true
            ),
            '$activate_constraint_occurrence/4'(R, J),
            (   R==yes ->
                '$insert_in_store_occurrence/4'(J)
            ;   true
            ),
            S is G+1,
            allocation_occurrence(F, S),
            (   J=suspension(_,T,_,_,_,_,_,_),
                get_mutable(active, T) ->
                chr_runtime:'chr update_mutable'(inactive, T),
                'occurrence/4__4__1'(B, C, D, E, F, G, H, I, J)
            ;   true
            )
        ;   'occurrence/4__4__1'(B, C, D, E, F, G, H, I, J)
        ).
'occurrence/4__4'(A, B, C, D, E) :-
        'occurrence/4__5'(A, B, C, D, E).
'occurrence/4__5'(A, B, C, D, E) :-
        '$via1_multi_hash_rule/2-1'(C, F), !,
        'occurrence/4__5__0'(F, A, B, C, D, E).
'occurrence/4__5__0'([], A, B, C, D, E) :-
        'occurrence/4__6'(A, B, C, D, E).
'occurrence/4__5__0'([A|B], C, D, E, F, G) :-
        (   A=suspension(_,H,_,I,_),
            get_mutable(active, H),
            I==E,
            '$via1_multi_hash_least_occurrence/2-1'(E, J) ->
            'occurrence/4__5__1'(J, A, B, C, D, E, F, G)
        ;   'occurrence/4__5__0'(B, C, D, E, F, G)
        ).
'occurrence/4__5__1'([], _, A, B, C, D, E, F) :-
        'occurrence/4__5__0'(A, B, C, D, E, F).
'occurrence/4__5__1'([A|B], C, D, E, F, G, H, I) :-
        (   A=suspension(_,J,K,L),
            get_mutable(active, J),
            K==G,
            L=[M|N],
            M==H,
            '$via1_multi_hash_allocation_occurrence/2-1'(E, O),
            member(P, O),
            P=suspension(_,Q,_,R),
            get_mutable(active, Q),
            R>=F,
            \+may_trigger(E) ->
            '$remove_constraint_internal_least_occurrence/2'(A, S),
            (   S=yes ->
                '$delete_from_store_least_occurrence/2'(A)
            ;   true
            ),
            '$activate_constraint_occurrence/4'(T, I),
            (   T==yes ->
                '$insert_in_store_occurrence/4'(I)
            ;   true
            ),
            least_occurrence(G, N),
            (   I=suspension(_,U,_,_,_,_,_,_),
                get_mutable(active, U) ->
                chr_runtime:'chr update_mutable'(inactive, U),
                'occurrence/4__5__1'(B, C, D, E, F, G, H, I)
            ;   true
            )
        ;   'occurrence/4__5__1'(B, C, D, E, F, G, H, I)
        ).
'occurrence/4__5'(A, B, C, D, E) :-
        'occurrence/4__6'(A, B, C, D, E).
'occurrence/4__6'(A, B, C, D, E) :-
        '$via1_multi_hash_set_all_passive/1-1'(C, F), !,
        'occurrence/4__6__0'(F, A, B, C, D, E).
'occurrence/4__6__0'([], A, B, C, D, E) :-
        'occurrence/4__7'(A, B, C, D, E).
'occurrence/4__6__0'([A|B], C, D, E, F, G) :-
        (   A=suspension(_,H,_,I),
            get_mutable(active, H),
            I==E,
            J=t(90,A,G),
            '$novel_production'(A, J),
            '$novel_production'(G, J) ->
            '$extend_history'(G, J),
            '$activate_constraint_occurrence/4'(K, G),
            (   K==yes ->
                '$insert_in_store_occurrence/4'(G)
            ;   true
            ),
            passive(E, F),
            (   G=suspension(_,L,_,_,_,_,_,_),
                get_mutable(active, L) ->
                chr_runtime:'chr update_mutable'(inactive, L),
                'occurrence/4__6__0'(B, C, D, E, F, G)
            ;   true
            )
        ;   'occurrence/4__6__0'(B, C, D, E, F, G)
        ).
'occurrence/4__6'(A, B, C, D, E) :-
        'occurrence/4__7'(A, B, C, D, E).
'occurrence/4__7'(A, B, C, D, E) :-
        hprolog:get_store('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', F), !,
        'occurrence/4__7__0'(F, A, B, C, D, E).
'occurrence/4__7__0'([], A, B, C, D, E) :-
        'occurrence/4__8'(A, B, C, D, E).
'occurrence/4__7__0'([A|B], C, D, E, F, G) :-
        (   A=suspension(_,H,_,I),
            get_mutable(active, H),
            chr_pp_flag(occurrence_subsumption, on),
            '$via1_multi_hash_rule/2-1'(E, J),
            member(K, J),
            K=suspension(_,L,_,_,M),
            get_mutable(active, L),
            '$via1_multi_hash_occurrence/4-13'(k(C,E), N),
            member(O, N),
            O=suspension(_,P,_,_,_,Q,_,_),
            get_mutable(active, P),
            D<Q,
            '$via1_multi_hash_prev_guard_list/7-1'(E, R),
            member(S, R),
            S=suspension(_,T,_,_,0,_,_,_,_,_),
            get_mutable(active, T),
            M=pragma(rule(U,_,_,_),_,_,_,E),
            U\==[],
            \+memberchk_eq(C,I) ->
            '$remove_constraint_internal_multiple_occ_constraints_checked/1'(A, V),
            (   V=yes ->
                '$delete_from_store_multiple_occ_constraints_checked/1'(A)
            ;   true
            ),
            '$activate_constraint_occurrence/4'(W, G),
            (   W==yes ->
                '$insert_in_store_occurrence/4'(G)
            ;   true
            ),
            first_occ_in_rule(E, C, D, F),
            multiple_occ_constraints_checked([C|I]),
            (   G=suspension(_,X,_,_,_,_,_,_),
                get_mutable(active, X) ->
                chr_runtime:'chr update_mutable'(inactive, X),
                'occurrence/4__7__0'(B, C, D, E, F, G)
            ;   true
            )
        ;   'occurrence/4__7__0'(B, C, D, E, F, G)
        ).
'occurrence/4__7'(A, B, C, D, E) :-
        'occurrence/4__8'(A, B, C, D, E).
'occurrence/4__8'(A, B, C, D, E) :-
        hprolog:get_store('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', F), !,
        'occurrence/4__8__0'(F, A, B, C, D, E).
'occurrence/4__8__0'([], A, B, C, D, E) :-
        'occurrence/4__9'(A, B, C, D, E).
'occurrence/4__8__0'([A|B], C, D, E, F, G) :-
        (   A=suspension(_,H,_,I),
            get_mutable(active, H),
            chr_pp_flag(occurrence_subsumption, on),
            '$via1_multi_hash_rule/2-1'(E, J),
            member(K, J),
            K=suspension(_,L,_,_,M),
            get_mutable(active, L),
            '$via1_multi_hash_occurrence/4-13'(k(C,E), N),
            member(O, N),
            O=suspension(_,P,_,_,_,Q,_,R),
            get_mutable(active, P),
            Q<D,
            '$via1_multi_hash_prev_guard_list/7-1'(E, S),
            member(T, S),
            T=suspension(_,U,_,_,0,_,_,_,_,_),
            get_mutable(active, U),
            M=pragma(rule(V,_,_,_),_,_,_,E),
            V\==[],
            \+memberchk_eq(C,I) ->
            '$remove_constraint_internal_multiple_occ_constraints_checked/1'(A, W),
            (   W=yes ->
                '$delete_from_store_multiple_occ_constraints_checked/1'(A)
            ;   true
            ),
            '$activate_constraint_occurrence/4'(X, G),
            (   X==yes ->
                '$insert_in_store_occurrence/4'(G)
            ;   true
            ),
            first_occ_in_rule(E, C, Q, R),
            multiple_occ_constraints_checked([C|I]),
            (   G=suspension(_,Y,_,_,_,_,_,_),
                get_mutable(active, Y) ->
                chr_runtime:'chr update_mutable'(inactive, Y),
                'occurrence/4__8__0'(B, C, D, E, F, G)
            ;   true
            )
        ;   'occurrence/4__8__0'(B, C, D, E, F, G)
        ).
'occurrence/4__8'(A, B, C, D, E) :-
        'occurrence/4__9'(A, B, C, D, E).
'occurrence/4__9'(A, B, C, D, E) :-
        '$via1_multi_hash_stored_complete/3-1'(A, F), !,
        'occurrence/4__9__0'(F, A, B, C, D, E).
'occurrence/4__9__0'([], A, B, C, D, E) :-
        'occurrence/4__10'(A, B, C, D, E).
'occurrence/4__9__0'([A|B], C, D, E, F, G) :-
        (   A=suspension(_,H,_,I,J,K),
            get_mutable(active, H),
            I==C,
            D<J,
            '$via1_multi_hash_stored/3-12'(k(C,D), L),
            member(M, L),
            M=suspension(_,N,_,_,yes),
            get_mutable(active, N),
            '$via1_multi_hash_passive/2-12'(k(E,F), O),
            member(P, O),
            P=suspension(_,Q,_,_,_),
            get_mutable(active, Q) ->
            '$remove_constraint_internal_stored_complete/3'(A, R),
            (   R=yes ->
                '$delete_from_store_stored_complete/3'(A)
            ;   true
            ),
            '$remove_constraint_internal_stored/3'(M, S),
            (   S=yes ->
                '$delete_from_store_stored/3'(M)
            ;   true
            ),
            '$activate_constraint_occurrence/4'(T, G),
            (   T==yes ->
                '$insert_in_store_occurrence/4'(G)
            ;   true
            ),
            U is K-1,
            stored(C, D, maybe),
            stored_complete(C, J, U),
            (   G=suspension(_,V,_,_,_,_,_,_),
                get_mutable(active, V) ->
                chr_runtime:'chr update_mutable'(inactive, V),
                'occurrence/4__9__0'(B, C, D, E, F, G)
            ;   true
            )
        ;   'occurrence/4__9__0'(B, C, D, E, F, G)
        ).
'occurrence/4__9'(A, B, C, D, E) :-
        'occurrence/4__10'(A, B, C, D, E).
'occurrence/4__10'(A, B, C, D, E) :-
        '$via1_multi_hash_occurrence/4-3'(C, F), !,
        'occurrence/4__10__0'(F, A, B, C, D, E).
'occurrence/4__10__0'([], A, B, C, D, E) :-
        'occurrence/4__11'(A, B, C, D, E).
'occurrence/4__10__0'([A|B], C, D, E, F, G) :-
        (   A=suspension(_,H,_,_,I,_,J,_),
            get_mutable(active, H),
            J==E,
            '$via1_multi_hash_stored_complete/3-1'(I, K) ->
            'occurrence/4__10__1'(K, I, A, B, C, D, E, F, G)
        ;   'occurrence/4__10__0'(B, C, D, E, F, G)
        ).
'occurrence/4__10__1'([], _, _, A, B, C, D, E, F) :-
        'occurrence/4__10__0'(A, B, C, D, E, F).
'occurrence/4__10__1'([A|B], C, D, E, F, G, H, I, J) :-
        (   A=suspension(_,K,_,L,M,N),
            get_mutable(active, K),
            L==C,
            N=0,
            '$via1_multi_hash_max_occurrence/2-1'(C, O) ->
            'occurrence/4__10__2'(O, M, A, B, C, D, E, F, G, H, I, J)
        ;   'occurrence/4__10__1'(B, C, D, E, F, G, H, I, J)
        ).
'occurrence/4__10__2'([], _, _, A, B, C, D, E, F, G, H, I) :-
        'occurrence/4__10__1'(A, B, C, D, E, F, G, H, I).
'occurrence/4__10__2'([A|B], C, D, E, F, G, H, I, J, K, L, M) :-
        (   A=suspension(_,N,_,O,P),
            get_mutable(active, N),
            O==F,
            Q=t(115,M,G,D,A),
            '$novel_production'(M, Q),
            '$novel_production'(G, Q),
            '$novel_production'(D, Q),
            '$novel_production'(A, Q),
            C=<P ->
            '$extend_history'(M, Q),
            '$activate_constraint_occurrence/4'(R, M),
            (   R==yes ->
                '$insert_in_store_occurrence/4'(M)
            ;   true
            ),
            passive(K, L),
            (   M=suspension(_,S,_,_,_,_,_,_),
                get_mutable(active, S) ->
                chr_runtime:'chr update_mutable'(inactive, S),
                'occurrence/4__10__2'(B, C, D, E, F, G, H, I, J, K, L, M)
            ;   true
            )
        ;   'occurrence/4__10__2'(B, C, D, E, F, G, H, I, J, K, L, M)
        ).
'occurrence/4__10'(A, B, C, D, E) :-
        'occurrence/4__11'(A, B, C, D, E).
'occurrence/4__11'(A, B, C, D, E) :-
        '$via1_multi_hash_occurrence/4-3'(C, F), !,
        'occurrence/4__11__0'(F, A, B, C, D, E).
'occurrence/4__11__0'([], A, B, C, D, E) :-
        'occurrence/4__12'(A, B, C, D, E).
'occurrence/4__11__0'([A|B], C, D, E, F, G) :-
        (   A=suspension(_,H,_,_,_,_,I,J),
            get_mutable(active, H),
            I==E,
            '$via1_multi_hash_max_occurrence/2-1'(C, K) ->
            'occurrence/4__11__1'(K, J, A, B, C, D, E, F, G)
        ;   'occurrence/4__11__0'(B, C, D, E, F, G)
        ).
'occurrence/4__11__1'([], _, _, A, B, C, D, E, F) :-
        'occurrence/4__11__0'(A, B, C, D, E, F).
'occurrence/4__11__1'([A|B], C, D, E, F, G, H, I, J) :-
        (   A=suspension(_,K,_,L,M),
            get_mutable(active, K),
            L==F,
            '$via1_multi_hash_stored_complete/3-1'(F, N) ->
            'occurrence/4__11__2'(N, M, A, B, C, D, E, F, G, H, I, J)
        ;   'occurrence/4__11__1'(B, C, D, E, F, G, H, I, J)
        ).
'occurrence/4__11__2'([], _, _, A, B, C, D, E, F, G, H, I) :-
        'occurrence/4__11__1'(A, B, C, D, E, F, G, H, I).
'occurrence/4__11__2'([A|B], C, D, E, F, G, H, I, J, K, L, M) :-
        (   A=suspension(_,N,_,O,P,Q),
            get_mutable(active, N),
            O==I,
            Q=0,
            R=t(115,G,M,A,D),
            '$novel_production'(G, R),
            '$novel_production'(M, R),
            '$novel_production'(A, R),
            '$novel_production'(D, R),
            P=<C ->
            '$extend_history'(M, R),
            '$activate_constraint_occurrence/4'(S, M),
            (   S==yes ->
                '$insert_in_store_occurrence/4'(M)
            ;   true
            ),
            passive(K, F),
            (   M=suspension(_,T,_,_,_,_,_,_),
                get_mutable(active, T) ->
                chr_runtime:'chr update_mutable'(inactive, T),
                'occurrence/4__11__2'(B, C, D, E, F, G, H, I, J, K, L, M)
            ;   true
            )
        ;   'occurrence/4__11__2'(B, C, D, E, F, G, H, I, J, K, L, M)
        ).
'occurrence/4__11'(A, B, C, D, E) :-
        'occurrence/4__12'(A, B, C, D, E).
'occurrence/4__12'(A, B, C, D, E) :-
        '$via1_multi_hash_stored_complete/3-1'(A, F), !,
        'occurrence/4__12__0'(F, A, B, C, D, E).
'occurrence/4__12__0'([], A, B, C, D, E) :-
        'occurrence/4__13'(A, B, C, D, E).
'occurrence/4__12__0'([A|B], C, D, E, F, G) :-
        (   A=suspension(_,H,_,I,J,_),
            get_mutable(active, H),
            I==C,
            K=t(124,A,G),
            '$novel_production'(A, K),
            '$novel_production'(G, K),
            D>J ->
            '$extend_history'(G, K),
            '$activate_constraint_occurrence/4'(L, G),
            (   L==yes ->
                '$insert_in_store_occurrence/4'(G)
            ;   true
            ),
            passive(E, F),
            (   G=suspension(_,M,_,_,_,_,_,_),
                get_mutable(active, M) ->
                chr_runtime:'chr update_mutable'(inactive, M),
                'occurrence/4__12__0'(B, C, D, E, F, G)
            ;   true
            )
        ;   'occurrence/4__12__0'(B, C, D, E, F, G)
        ).
'occurrence/4__12'(A, B, C, D, E) :-
        'occurrence/4__13'(A, B, C, D, E).
'occurrence/4__13'(A, B, C, D, E) :-
        '$via1_multi_hash_functional_dependency/4-12'(k(A,C), F), !,
        'occurrence/4__13__0'(F, A, B, C, D, E).
'occurrence/4__13__0'([], A, B, C, D, E) :-
        'occurrence/4__14'(A, B, C, D, E).
'occurrence/4__13__0'([A|B], C, D, E, F, G) :-
        (   A=suspension(_,H,I,J,K,L),
            get_mutable(active, H),
            I==C,
            J==E,
            E>1,
            '$via1_multi_hash_allocation_occurrence/2-1'(C, M),
            member(N, M),
            N=suspension(_,O,_,P),
            get_mutable(active, O),
            P>D ->
            '$remove_constraint_internal_functional_dependency/4'(A, Q),
            (   Q=yes ->
                '$delete_from_store_functional_dependency/4'(A)
            ;   true
            ),
            '$activate_constraint_occurrence/4'(R, G),
            (   R==yes ->
                '$insert_in_store_occurrence/4'(G)
            ;   true
            ),
            functional_dependency(C, 1, K, L),
            (   G=suspension(_,S,_,_,_,_,_,_),
                get_mutable(active, S) ->
                chr_runtime:'chr update_mutable'(inactive, S),
                'occurrence/4__13__0'(B, C, D, E, F, G)
            ;   true
            )
        ;   'occurrence/4__13__0'(B, C, D, E, F, G)
        ).
'occurrence/4__13'(A, B, C, D, E) :-
        'occurrence/4__14'(A, B, C, D, E).
'occurrence/4__14'(A, B, C, D, E) :-
        hprolog:get_store('$chr_store_global_ground_chr_translate:call_pattern/1', F), !,
        'occurrence/4__14__0'(F, A, B, C, D, E).
'occurrence/4__14__0'([], A, B, C, D, E) :-
        'occurrence/4__15'(A, B, C, D, E).
'occurrence/4__14__0'([A|B], C, D, E, F, G) :-
        (   A=suspension(_,H,_,_,I),
            get_mutable(active, H),
            I=odom(J,K),
            J=occ(L,M),
            L==C,
            M==D,
            '$via1_multi_hash_rule/2-1'(E, N) ->
            'occurrence/4__14__1'(N, K, A, B, C, D, E, F, G)
        ;   'occurrence/4__14__0'(B, C, D, E, F, G)
        ).
'occurrence/4__14__1'([], _, _, A, B, C, D, E, F) :-
        'occurrence/4__14__0'(A, B, C, D, E, F).
'occurrence/4__14__1'([A|B], C, D, E, F, G, H, I, J) :-
        (   A=suspension(_,K,_,L,M),
            get_mutable(active, K),
            L==H,
            hprolog:get_store('$chr_store_global_ground_chr_translate:abstract_constraints/1', N) ->
            'occurrence/4__14__2'(N, M, A, B, C, D, E, F, G, H, I, J)
        ;   'occurrence/4__14__1'(B, C, D, E, F, G, H, I, J)
        ).
'occurrence/4__14__2'([], _, _, A, B, C, D, E, F, G, H, I) :-
        'occurrence/4__14__1'(A, B, C, D, E, F, G, H, I).
'occurrence/4__14__2'([A|B], C, D, E, F, G, H, I, J, K, L, M) :-
        (   A=suspension(_,N,_,_,_),
            get_mutable(active, N),
            O=t(173,G,A,M,D),
            '$novel_production'(G, O),
            '$novel_production'(A, O),
            '$novel_production'(M, O),
            '$novel_production'(D, O),
            C=pragma(rule(_,_,_,_),ids(P,_),_,_,_),
            memberchk_eq(L, P),
            is_passive(K, L) ->
            '$extend_history'(M, O),
            '$activate_constraint_occurrence/4'(Q, M),
            (   Q==yes ->
                '$insert_in_store_occurrence/4'(M)
            ;   true
            ),
            R is J+1,
            S=odom(occ(I,R),F),
            call_pattern(S),
            depends_on(odom(occ(I,J),F), S),
            (   M=suspension(_,T,_,_,_,_,_,_),
                get_mutable(active, T) ->
                chr_runtime:'chr update_mutable'(inactive, T),
                'occurrence/4__14__2'(B, C, D, E, F, G, H, I, J, K, L, M)
            ;   true
            )
        ;   'occurrence/4__14__2'(B, C, D, E, F, G, H, I, J, K, L, M)
        ).
'occurrence/4__14'(A, B, C, D, E) :-
        'occurrence/4__15'(A, B, C, D, E).
'occurrence/4__15'(A, B, C, D, E) :-
        hprolog:get_store('$chr_store_global_ground_chr_translate:call_pattern/1', F), !,
        'occurrence/4__15__0'(F, A, B, C, D, E).
'occurrence/4__15__0'([], A, B, C, D, E) :-
        'occurrence/4__16'(A, B, C, D, E).
'occurrence/4__15__0'([A|B], C, D, E, F, G) :-
        (   A=suspension(_,H,_,_,I),
            get_mutable(active, H),
            I=odom(J,K),
            J=occ(L,M),
            L==C,
            M==D,
            '$via1_multi_hash_rule/2-1'(E, N) ->
            'occurrence/4__15__1'(N, K, A, B, C, D, E, F, G)
        ;   'occurrence/4__15__0'(B, C, D, E, F, G)
        ).
'occurrence/4__15__1'([], _, _, A, B, C, D, E, F) :-
        'occurrence/4__15__0'(A, B, C, D, E, F).
'occurrence/4__15__1'([A|B], C, D, E, F, G, H, I, J) :-
        (   A=suspension(_,K,_,L,M),
            get_mutable(active, K),
            L==H,
            hprolog:get_store('$chr_store_global_ground_chr_translate:abstract_constraints/1', N) ->
            'occurrence/4__15__2'(N, M, A, B, C, D, E, F, G, H, I, J)
        ;   'occurrence/4__15__1'(B, C, D, E, F, G, H, I, J)
        ).
'occurrence/4__15__2'([], _, _, A, B, C, D, E, F, G, H, I) :-
        'occurrence/4__15__1'(A, B, C, D, E, F, G, H, I).
'occurrence/4__15__2'([A|B], C, D, E, F, G, H, I, J, K, L, M) :-
        (   A=suspension(_,N,_,_,O),
            get_mutable(active, N),
            P=t(174,G,A,M,D),
            '$novel_production'(G, P),
            '$novel_production'(A, P),
            '$novel_production'(M, P),
            '$novel_production'(D, P),
            C=pragma(rule(Q,R,S,T),ids(U,_),_,_,_),
            memberchk_eq(L, U),
            \+is_passive(K,L) ->
            '$extend_history'(M, P),
            '$activate_constraint_occurrence/4'(V, M),
            (   V==yes ->
                '$insert_in_store_occurrence/4'(M)
            ;   true
            ),
            once(select2(L,_,U,Q,_,W)),
            ai_observation_abstract_constraints(W, O, X),
            ai_observation_observe_list(odom([],F), X, odom([],Y)),
            ai_observation_abstract_constraints(R, O, Z),
            ai_observation_observe_list(odom([],Y), Z, odom([],A1)),
            ai_observation_abstract_goal_(Q, R, S, T, O, B1),
            call_pattern(odom(B1,A1)),
            C1 is J+1,
            D1=odom(occ(I,C1),F),
            call_pattern(D1),
            depends_on_as(odom(occ(I,J),F), odom(B1,A1), D1),
            final_answer_pattern(odom(occ(I,J),F), odom([],F)),
            (   M=suspension(_,E1,_,_,_,_,_,_),
                get_mutable(active, E1) ->
                chr_runtime:'chr update_mutable'(inactive, E1),
                'occurrence/4__15__2'(B, C, D, E, F, G, H, I, J, K, L, M)
            ;   true
            )
        ;   'occurrence/4__15__2'(B, C, D, E, F, G, H, I, J, K, L, M)
        ).
'occurrence/4__15'(A, B, C, D, E) :-
        'occurrence/4__16'(A, B, C, D, E).
'occurrence/4__16'(A, B, C, D, E) :-
        hprolog:get_store('$chr_store_global_ground_chr_translate:call_pattern/1', F), !,
        'occurrence/4__16__0'(F, A, B, C, D, E).
'occurrence/4__16__0'([], A, B, C, D, E) :-
        'occurrence/4__17'(A, B, C, D, E).
'occurrence/4__16__0'([A|B], C, D, E, F, G) :-
        (   A=suspension(_,H,_,_,I),
            get_mutable(active, H),
            I=odom(J,K),
            J=occ(L,M),
            L==C,
            M==D,
            '$via1_multi_hash_rule/2-1'(E, N) ->
            'occurrence/4__16__1'(N, K, A, B, C, D, E, F, G)
        ;   'occurrence/4__16__0'(B, C, D, E, F, G)
        ).
'occurrence/4__16__1'([], _, _, A, B, C, D, E, F) :-
        'occurrence/4__16__0'(A, B, C, D, E, F).
'occurrence/4__16__1'([A|B], C, D, E, F, G, H, I, J) :-
        (   A=suspension(_,K,_,L,M),
            get_mutable(active, K),
            L==H,
            hprolog:get_store('$chr_store_global_ground_chr_translate:abstract_constraints/1', N) ->
            'occurrence/4__16__2'(N, M, A, B, C, D, E, F, G, H, I, J)
        ;   'occurrence/4__16__1'(B, C, D, E, F, G, H, I, J)
        ).
'occurrence/4__16__2'([], _, _, A, B, C, D, E, F, G, H, I) :-
        'occurrence/4__16__1'(A, B, C, D, E, F, G, H, I).
'occurrence/4__16__2'([A|B], C, D, E, F, G, H, I, J, K, L, M) :-
        (   A=suspension(_,N,_,_,_),
            get_mutable(active, N),
            O=t(176,G,A,M,D),
            '$novel_production'(G, O),
            '$novel_production'(A, O),
            '$novel_production'(M, O),
            '$novel_production'(D, O),
            C=pragma(rule(_,_,_,_),ids(_,P),_,_,_),
            memberchk_eq(L, P),
            is_passive(K, L) ->
            '$extend_history'(M, O),
            '$activate_constraint_occurrence/4'(Q, M),
            (   Q==yes ->
                '$insert_in_store_occurrence/4'(M)
            ;   true
            ),
            R is J+1,
            S=odom(occ(I,R),F),
            call_pattern(S),
            final_answer_pattern(odom(occ(I,J),F), odom([],F)),
            depends_on(odom(occ(I,J),F), S),
            (   M=suspension(_,T,_,_,_,_,_,_),
                get_mutable(active, T) ->
                chr_runtime:'chr update_mutable'(inactive, T),
                'occurrence/4__16__2'(B, C, D, E, F, G, H, I, J, K, L, M)
            ;   true
            )
        ;   'occurrence/4__16__2'(B, C, D, E, F, G, H, I, J, K, L, M)
        ).
'occurrence/4__16'(A, B, C, D, E) :-
        'occurrence/4__17'(A, B, C, D, E).
'occurrence/4__17'(A, B, C, D, E) :-
        hprolog:get_store('$chr_store_global_ground_chr_translate:call_pattern/1', F), !,
        'occurrence/4__17__0'(F, A, B, C, D, E).
'occurrence/4__17__0'([], A, B, C, D, E) :-
        'occurrence/4__18'(A, B, C, D, E).
'occurrence/4__17__0'([A|B], C, D, E, F, G) :-
        (   A=suspension(_,H,_,_,I),
            get_mutable(active, H),
            I=odom(J,K),
            J=occ(L,M),
            L==C,
            M==D,
            '$via1_multi_hash_rule/2-1'(E, N) ->
            'occurrence/4__17__1'(N, K, A, B, C, D, E, F, G)
        ;   'occurrence/4__17__0'(B, C, D, E, F, G)
        ).
'occurrence/4__17__1'([], _, _, A, B, C, D, E, F) :-
        'occurrence/4__17__0'(A, B, C, D, E, F).
'occurrence/4__17__1'([A|B], C, D, E, F, G, H, I, J) :-
        (   A=suspension(_,K,_,L,M),
            get_mutable(active, K),
            L==H,
            hprolog:get_store('$chr_store_global_ground_chr_translate:abstract_constraints/1', N) ->
            'occurrence/4__17__2'(N, M, A, B, C, D, E, F, G, H, I, J)
        ;   'occurrence/4__17__1'(B, C, D, E, F, G, H, I, J)
        ).
'occurrence/4__17__2'([], _, _, A, B, C, D, E, F, G, H, I) :-
        'occurrence/4__17__1'(A, B, C, D, E, F, G, H, I).
'occurrence/4__17__2'([A|B], C, D, E, F, G, H, I, J, K, L, M) :-
        (   A=suspension(_,N,_,_,O),
            get_mutable(active, N),
            P=t(177,G,A,M,D),
            '$novel_production'(G, P),
            '$novel_production'(A, P),
            '$novel_production'(M, P),
            '$novel_production'(D, P),
            C=pragma(rule(Q,R,S,T),ids(_,U),_,_,_),
            memberchk_eq(L, U),
            \+is_passive(K,L) ->
            '$extend_history'(M, P),
            '$activate_constraint_occurrence/4'(V, M),
            (   V==yes ->
                '$insert_in_store_occurrence/4'(M)
            ;   true
            ),
            once(select2(L,_,U,R,_,W)),
            ai_observation_abstract_constraints(W, O, X),
            ai_observation_observe_list(odom([],F), X, odom([],Y)),
            ai_observation_abstract_constraints(Q, O, Z),
            ai_observation_observe_list(odom([],Y), Z, odom([],A1)),
            ord_add_element(A1, I, B1),
            ai_observation_abstract_goal_(Q, R, S, T, O, C1),
            call_pattern(odom(C1,B1)),
            (   ord_memberchk(I, A1) ->
                D1=no
            ;   D1=yes
            ),
            E1 is J+1,
            F1=odom(occ(I,E1),F),
            call_pattern(F1),
            depends_on_ap(odom(occ(I,J),F), odom(C1,B1), F1, D1),
            (   M=suspension(_,G1,_,_,_,_,_,_),
                get_mutable(active, G1) ->
                chr_runtime:'chr update_mutable'(inactive, G1),
                'occurrence/4__17__2'(B, C, D, E, F, G, H, I, J, K, L, M)
            ;   true
            )
        ;   'occurrence/4__17__2'(B, C, D, E, F, G, H, I, J, K, L, M)
        ).
'occurrence/4__17'(A, B, C, D, E) :-
        'occurrence/4__18'(A, B, C, D, E).
'occurrence/4__18'(_, _, _, _, A) :-
        '$activate_constraint_occurrence/4'(B, A),
        (   B==yes ->
            '$insert_in_store_occurrence/4'(A)
        ;   true
        ).
get_occurrence(A, B, C, D) :-
        '$via1_multi_hash_occurrence/4-12'(k(A,B), E),
        member(F, E),
        F=suspension(_,G,_,_,_,_,H,I),
        get_mutable(active, G), !,
        H=C,
        I=D.
get_occurrence(A, B, _, _) :-
        chr_error(internal, [['get_occurrence: missing occurrence ~w:~w'-[A,B]]]).
max_occurrence(A, B) :-
        'max_occurrence/2__0'(A, B, _).
'max_occurrence/2__0'(A, B, _) :-
        '$via1_multi_hash_max_occurrence/2-1'(A, C),
        member(D, C),
        D=suspension(_,E,_,_,F),
        get_mutable(active, E),
        F>=B, !.
'max_occurrence/2__0'(A, B, C) :-
        '$via1_multi_hash_max_occurrence/2-1'(A, D), !,
        'max_occurrence/2__0__0'(D, A, B, C).
'max_occurrence/2__0__0'([], A, B, C) :-
        'max_occurrence/2__1'(A, B, C).
'max_occurrence/2__0__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,G,H),
            get_mutable(active, F),
            G==C,
            D>=H ->
            '$remove_constraint_internal_max_occurrence/2'(A, I),
            (   I=yes ->
                '$delete_from_store_max_occurrence/2'(A)
            ;   true
            ),
            'max_occurrence/2__0__0'(B, C, D, E)
        ;   'max_occurrence/2__0__0'(B, C, D, E)
        ).
'max_occurrence/2__0'(A, B, C) :-
        'max_occurrence/2__1'(A, B, C).
'max_occurrence/2__1'(A, B, C) :-
        '$via1_multi_hash_stored_complete/3-1'(A, D), !,
        '$allocate_constraint_max_occurrence/2'(C, A, B),
        'max_occurrence/2__1__0'(D, A, B, C).
'max_occurrence/2__1__0'([], A, B, C) :-
        'max_occurrence/2__2'(A, B, C).
'max_occurrence/2__1__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,G,H,I),
            get_mutable(active, F),
            G==C,
            I=0,
            '$via1_multi_hash_occurrence/4-1'(C, J) ->
            'max_occurrence/2__1__1'(J, H, A, B, C, D, E)
        ;   'max_occurrence/2__1__0'(B, C, D, E)
        ).
'max_occurrence/2__1__1'([], _, _, A, B, C, D) :-
        'max_occurrence/2__1__0'(A, B, C, D).
'max_occurrence/2__1__1'([A|B], C, D, E, F, G, H) :-
        (   A=suspension(_,I,_,_,J,_,K,_),
            get_mutable(active, I),
            J==F,
            '$via1_multi_hash_occurrence/4-3'(K, L) ->
            'max_occurrence/2__1__2'(L, K, A, B, C, D, E, F, G, H)
        ;   'max_occurrence/2__1__1'(B, C, D, E, F, G, H)
        ).
'max_occurrence/2__1__2'([], _, _, A, B, C, D, E, F, G) :-
        'max_occurrence/2__1__1'(A, B, C, D, E, F, G).
'max_occurrence/2__1__2'([A|B], C, D, E, F, G, H, I, J, K) :-
        (   A=suspension(_,L,_,_,_,_,M,N),
            get_mutable(active, L),
            A\==D,
            M==C,
            O=t(115,A,D,G,K),
            '$novel_production'(A, O),
            '$novel_production'(D, O),
            '$novel_production'(G, O),
            '$novel_production'(K, O),
            F=<J ->
            '$extend_history'(K, O),
            '$activate_constraint_max_occurrence/2'(P, K),
            (   P==yes ->
                '$insert_in_store_max_occurrence/2'(K)
            ;   true
            ),
            passive(C, N),
            (   K=suspension(_,Q,_,_,_),
                get_mutable(active, Q) ->
                chr_runtime:'chr update_mutable'(inactive, Q),
                'max_occurrence/2__1__2'(B, C, D, E, F, G, H, I, J, K)
            ;   true
            )
        ;   'max_occurrence/2__1__2'(B, C, D, E, F, G, H, I, J, K)
        ).
'max_occurrence/2__1'(A, B, C) :-
        '$allocate_constraint_max_occurrence/2'(C, A, B),
        'max_occurrence/2__2'(A, B, C).
'max_occurrence/2__2'(A, B, C) :-
        hprolog:get_store('$chr_store_global_ground_chr_translate:call_pattern/1', D), !,
        'max_occurrence/2__2__0'(D, A, B, C).
'max_occurrence/2__2__0'([], A, B, C) :-
        'max_occurrence/2__3'(A, B, C).
'max_occurrence/2__2__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,_,G),
            get_mutable(active, F),
            G=odom(H,I),
            H=occ(J,K),
            J==C,
            L=t(171,A,E),
            '$novel_production'(A, L),
            '$novel_production'(E, L),
            K>D ->
            '$extend_history'(E, L),
            '$activate_constraint_max_occurrence/2'(M, E),
            (   M==yes ->
                '$insert_in_store_max_occurrence/2'(E)
            ;   true
            ),
            final_answer_pattern(odom(occ(C,K),I), odom([],I)),
            (   E=suspension(_,N,_,_,_),
                get_mutable(active, N) ->
                chr_runtime:'chr update_mutable'(inactive, N),
                'max_occurrence/2__2__0'(B, C, D, E)
            ;   true
            )
        ;   'max_occurrence/2__2__0'(B, C, D, E)
        ).
'max_occurrence/2__2'(A, B, C) :-
        'max_occurrence/2__3'(A, B, C).
'max_occurrence/2__3'(_, _, A) :-
        '$activate_constraint_max_occurrence/2'(B, A),
        (   B==yes ->
            '$insert_in_store_max_occurrence/2'(A)
        ;   true
        ).
get_max_occurrence(A, B) :-
        '$via1_multi_hash_max_occurrence/2-1'(A, C),
        member(D, C),
        D=suspension(_,E,_,_,F),
        get_mutable(active, E), !,
        B=F.
get_max_occurrence(A, _) :-
        chr_error(internal, [['get_max_occurrence: missing max occurrence for ~w'-[A]]]).
allocation_occurrence(A, B) :-
        'allocation_occurrence/2__0'(A, B, _).
'allocation_occurrence/2__0'(A, B, _) :-
        '$via1_multi_hash_occurrence/4-12'(k(A,B), C),
        member(D, C),
        D=suspension(_,E,_,_,_,_,F,G),
        get_mutable(active, E),
        '$via1_multi_hash_passive/2-12'(k(F,G), H),
        member(I, H),
        I=suspension(_,J,_,_,_),
        get_mutable(active, J), !,
        K is B+1,
        allocation_occurrence(A, K).
'allocation_occurrence/2__0'(A, B, _) :-
        '$via1_multi_hash_occurrence/4-12'(k(A,B), C),
        member(D, C),
        D=suspension(_,E,_,_,_,_,F,G),
        get_mutable(active, E),
        '$via1_multi_hash_rule/2-1'(F, H),
        member(I, H),
        I=suspension(_,J,_,_,K),
        get_mutable(active, J),
        K=pragma(_,ids(L,_),_,_,_),
        member(G, L), !,
        M is B+1,
        allocation_occurrence(A, M).
'allocation_occurrence/2__0'(A, B, _) :-
        '$via1_multi_hash_occurrence/4-12'(k(A,B), C),
        member(D, C),
        D=suspension(_,E,_,_,_,_,F,_),
        get_mutable(active, E),
        '$via1_multi_hash_rule/2-1'(F, G),
        member(H, G),
        H=suspension(_,I,_,_,J),
        get_mutable(active, I),
        J=pragma(rule(_,_,_,true),_,_,_,_), !,
        K is B+1,
        allocation_occurrence(A, K).
'allocation_occurrence/2__0'(A, B, _) :-
        '$via1_multi_hash_occurrence/4-12'(k(A,B), C),
        member(D, C),
        D=suspension(_,E,_,_,_,_,F,_),
        get_mutable(active, E),
        '$via1_multi_hash_rule/2-1'(F, G),
        member(H, G),
        H=suspension(_,I,_,_,J),
        get_mutable(active, I),
        J=pragma(rule([_|_],_,_,_),_,_,_,_),
        \+is_observed(A,B), !,
        K is B+1,
        allocation_occurrence(A, K).
'allocation_occurrence/2__0'(A, B, _) :-
        '$via1_multi_hash_occurrence/4-12'(k(A,B), C),
        member(D, C),
        D=suspension(_,E,_,_,_,_,F,_),
        get_mutable(active, E),
        '$via1_multi_hash_rule/2-1'(F, G),
        member(H, G),
        H=suspension(_,I,_,_,J),
        get_mutable(active, I),
        '$via1_multi_hash_least_occurrence/2-1'(F, K),
        member(L, K),
        L=suspension(_,M,_,[]),
        get_mutable(active, M),
        J=pragma(rule([],_,_,_),_,_,_,_),
        \+is_observed(A,B), !,
        N is B+1,
        allocation_occurrence(A, N).
'allocation_occurrence/2__0'(A, B, C) :-
        '$via1_multi_hash_occurrence/4-1'(A, D), !,
        '$allocate_constraint_allocation_occurrence/2'(C, A, B),
        'allocation_occurrence/2__0__0'(D, A, B, C).
'allocation_occurrence/2__0__0'([], A, B, C) :-
        'allocation_occurrence/2__1'(A, B, C).
'allocation_occurrence/2__0__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,_,G,H,I,J),
            get_mutable(active, F),
            G==C,
            '$via1_multi_hash_least_occurrence/2-1'(I, K) ->
            'allocation_occurrence/2__0__1'(K, I, H, J, A, B, C, D, E)
        ;   'allocation_occurrence/2__0__0'(B, C, D, E)
        ).
'allocation_occurrence/2__0__1'([], _, _, _, _, A, B, C, D) :-
        'allocation_occurrence/2__0__0'(A, B, C, D).
'allocation_occurrence/2__0__1'([A|B], C, D, E, F, G, H, I, J) :-
        (   A=suspension(_,K,L,M),
            get_mutable(active, K),
            L==C,
            M=[N|O],
            N==E,
            I>=D,
            '$via1_multi_hash_rule/2-1'(C, P),
            member(Q, P),
            Q=suspension(_,R,_,_,_),
            get_mutable(active, R),
            \+may_trigger(H) ->
            '$remove_constraint_internal_least_occurrence/2'(A, S),
            (   S=yes ->
                '$delete_from_store_least_occurrence/2'(A)
            ;   true
            ),
            '$activate_constraint_allocation_occurrence/2'(T, J),
            (   T==yes ->
                '$insert_in_store_allocation_occurrence/2'(J)
            ;   true
            ),
            least_occurrence(C, O),
            (   J=suspension(_,U,_,_),
                get_mutable(active, U) ->
                chr_runtime:'chr update_mutable'(inactive, U),
                'allocation_occurrence/2__0__1'(B, C, D, E, F, G, H, I, J)
            ;   true
            )
        ;   'allocation_occurrence/2__0__1'(B, C, D, E, F, G, H, I, J)
        ).
'allocation_occurrence/2__0'(A, B, C) :-
        '$allocate_constraint_allocation_occurrence/2'(C, A, B),
        'allocation_occurrence/2__1'(A, B, C).
'allocation_occurrence/2__1'(A, B, C) :-
        '$via1_multi_hash_functional_dependency/4-1'(A, D), !,
        'allocation_occurrence/2__1__0'(D, A, B, C).
'allocation_occurrence/2__1__0'([], A, B, C) :-
        'allocation_occurrence/2__2'(A, B, C).
'allocation_occurrence/2__1__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,G,H,I,J),
            get_mutable(active, F),
            G==C,
            H>1,
            '$via1_multi_hash_occurrence/4-13'(k(C,H), K),
            member(L, K),
            L=suspension(_,M,_,_,_,N,_,_),
            get_mutable(active, M),
            D>N ->
            '$remove_constraint_internal_functional_dependency/4'(A, O),
            (   O=yes ->
                '$delete_from_store_functional_dependency/4'(A)
            ;   true
            ),
            '$activate_constraint_allocation_occurrence/2'(P, E),
            (   P==yes ->
                '$insert_in_store_allocation_occurrence/2'(E)
            ;   true
            ),
            functional_dependency(C, 1, I, J),
            (   E=suspension(_,Q,_,_),
                get_mutable(active, Q) ->
                chr_runtime:'chr update_mutable'(inactive, Q),
                'allocation_occurrence/2__1__0'(B, C, D, E)
            ;   true
            )
        ;   'allocation_occurrence/2__1__0'(B, C, D, E)
        ).
'allocation_occurrence/2__1'(A, B, C) :-
        'allocation_occurrence/2__2'(A, B, C).
'allocation_occurrence/2__2'(_, _, A) :-
        '$activate_constraint_allocation_occurrence/2'(B, A),
        (   B==yes ->
            '$insert_in_store_allocation_occurrence/2'(A)
        ;   true
        ).
get_allocation_occurrence(A, B) :-
        '$via1_multi_hash_allocation_occurrence/2-1'(A, C),
        member(D, C),
        D=suspension(_,E,_,F),
        get_mutable(active, E), !,
        B=F.
get_allocation_occurrence(_, A) :-
        chr_pp_flag(late_allocation, off),
        A=0.
rule(A, B) :-
        'rule/2__0'(A, B, _).
'rule/2__0'(A, B, C) :-
        '$via1_multi_hash_occurrence/4-3'(A, D), !,
        '$allocate_constraint_rule/2'(C, A, B),
        'rule/2__0__0'(D, A, B, C).
'rule/2__0__0'([], A, B, C) :-
        'rule/2__1'(A, B, C).
'rule/2__0__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,_,G,H,I,J),
            get_mutable(active, F),
            I==C,
            '$via1_multi_hash_allocation_occurrence/2-12'(k(G,H), K) ->
            'rule/2__0__1'(K, G, H, J, A, B, C, D, E)
        ;   'rule/2__0__0'(B, C, D, E)
        ).
'rule/2__0__1'([], _, _, _, _, A, B, C, D) :-
        'rule/2__0__0'(A, B, C, D).
'rule/2__0__1'([A|B], C, D, E, F, G, H, I, J) :-
        (   A=suspension(_,K,L,M),
            get_mutable(active, K),
            L==C,
            M==D,
            I=pragma(_,ids(N,_),_,_,_),
            member(E, N) ->
            '$remove_constraint_internal_allocation_occurrence/2'(A, O),
            (   O=yes ->
                '$delete_from_store_allocation_occurrence/2'(A)
            ;   true
            ),
            '$activate_constraint_rule/2'(P, J),
            (   P==yes ->
                '$insert_in_store_rule/2'(J)
            ;   true
            ),
            Q is D+1,
            allocation_occurrence(C, Q),
            (   J=suspension(_,R,_,_,_),
                get_mutable(active, R) ->
                chr_runtime:'chr update_mutable'(inactive, R),
                'rule/2__0__1'(B, C, D, E, F, G, H, I, J)
            ;   true
            )
        ;   'rule/2__0__1'(B, C, D, E, F, G, H, I, J)
        ).
'rule/2__0'(A, B, C) :-
        '$allocate_constraint_rule/2'(C, A, B),
        'rule/2__1'(A, B, C).
'rule/2__1'(A, B, C) :-
        '$via1_multi_hash_occurrence/4-3'(A, D), !,
        'rule/2__1__0'(D, A, B, C).
'rule/2__1__0'([], A, B, C) :-
        'rule/2__2'(A, B, C).
'rule/2__1__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,_,G,H,I,_),
            get_mutable(active, F),
            I==C,
            '$via1_multi_hash_allocation_occurrence/2-12'(k(G,H), J) ->
            'rule/2__1__1'(J, G, H, A, B, C, D, E)
        ;   'rule/2__1__0'(B, C, D, E)
        ).
'rule/2__1__1'([], _, _, _, A, B, C, D) :-
        'rule/2__1__0'(A, B, C, D).
'rule/2__1__1'([A|B], C, D, E, F, G, H, I) :-
        (   A=suspension(_,J,K,L),
            get_mutable(active, J),
            K==C,
            L==D,
            H=pragma(rule(_,_,_,true),_,_,_,_) ->
            '$remove_constraint_internal_allocation_occurrence/2'(A, M),
            (   M=yes ->
                '$delete_from_store_allocation_occurrence/2'(A)
            ;   true
            ),
            '$activate_constraint_rule/2'(N, I),
            (   N==yes ->
                '$insert_in_store_rule/2'(I)
            ;   true
            ),
            O is D+1,
            allocation_occurrence(C, O),
            (   I=suspension(_,P,_,_,_),
                get_mutable(active, P) ->
                chr_runtime:'chr update_mutable'(inactive, P),
                'rule/2__1__1'(B, C, D, E, F, G, H, I)
            ;   true
            )
        ;   'rule/2__1__1'(B, C, D, E, F, G, H, I)
        ).
'rule/2__1'(A, B, C) :-
        'rule/2__2'(A, B, C).
'rule/2__2'(A, B, C) :-
        '$via1_multi_hash_occurrence/4-3'(A, D), !,
        'rule/2__2__0'(D, A, B, C).
'rule/2__2__0'([], A, B, C) :-
        'rule/2__3'(A, B, C).
'rule/2__2__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,_,G,H,I,_),
            get_mutable(active, F),
            I==C,
            '$via1_multi_hash_allocation_occurrence/2-12'(k(G,H), J) ->
            'rule/2__2__1'(J, G, H, A, B, C, D, E)
        ;   'rule/2__2__0'(B, C, D, E)
        ).
'rule/2__2__1'([], _, _, _, A, B, C, D) :-
        'rule/2__2__0'(A, B, C, D).
'rule/2__2__1'([A|B], C, D, E, F, G, H, I) :-
        (   A=suspension(_,J,K,L),
            get_mutable(active, J),
            K==C,
            L==D,
            H=pragma(rule([_|_],_,_,_),_,_,_,_),
            \+is_observed(C,D) ->
            '$remove_constraint_internal_allocation_occurrence/2'(A, M),
            (   M=yes ->
                '$delete_from_store_allocation_occurrence/2'(A)
            ;   true
            ),
            '$activate_constraint_rule/2'(N, I),
            (   N==yes ->
                '$insert_in_store_rule/2'(I)
            ;   true
            ),
            O is D+1,
            allocation_occurrence(C, O),
            (   I=suspension(_,P,_,_,_),
                get_mutable(active, P) ->
                chr_runtime:'chr update_mutable'(inactive, P),
                'rule/2__2__1'(B, C, D, E, F, G, H, I)
            ;   true
            )
        ;   'rule/2__2__1'(B, C, D, E, F, G, H, I)
        ).
'rule/2__2'(A, B, C) :-
        'rule/2__3'(A, B, C).
'rule/2__3'(A, B, C) :-
        '$via1_multi_hash_occurrence/4-3'(A, D), !,
        'rule/2__3__0'(D, A, B, C).
'rule/2__3__0'([], A, B, C) :-
        'rule/2__4'(A, B, C).
'rule/2__3__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,_,G,H,I,_),
            get_mutable(active, F),
            I==C,
            '$via1_multi_hash_least_occurrence/2-1'(C, J) ->
            'rule/2__3__1'(J, G, H, A, B, C, D, E)
        ;   'rule/2__3__0'(B, C, D, E)
        ).
'rule/2__3__1'([], _, _, _, A, B, C, D) :-
        'rule/2__3__0'(A, B, C, D).
'rule/2__3__1'([A|B], C, D, E, F, G, H, I) :-
        (   A=suspension(_,J,K,L),
            get_mutable(active, J),
            K==G,
            L=[],
            '$via1_multi_hash_allocation_occurrence/2-12'(k(C,D), M) ->
            'rule/2__3__2'(M, A, B, C, D, E, F, G, H, I)
        ;   'rule/2__3__1'(B, C, D, E, F, G, H, I)
        ).
'rule/2__3__2'([], _, A, B, C, D, E, F, G, H) :-
        'rule/2__3__1'(A, B, C, D, E, F, G, H).
'rule/2__3__2'([A|B], C, D, E, F, G, H, I, J, K) :-
        (   A=suspension(_,L,M,N),
            get_mutable(active, L),
            M==E,
            N==F,
            J=pragma(rule([],_,_,_),_,_,_,_),
            \+is_observed(E,F) ->
            '$remove_constraint_internal_allocation_occurrence/2'(A, O),
            (   O=yes ->
                '$delete_from_store_allocation_occurrence/2'(A)
            ;   true
            ),
            '$activate_constraint_rule/2'(P, K),
            (   P==yes ->
                '$insert_in_store_rule/2'(K)
            ;   true
            ),
            Q is F+1,
            allocation_occurrence(E, Q),
            (   K=suspension(_,R,_,_,_),
                get_mutable(active, R) ->
                chr_runtime:'chr update_mutable'(inactive, R),
                'rule/2__3__2'(B, C, D, E, F, G, H, I, J, K)
            ;   true
            )
        ;   'rule/2__3__2'(B, C, D, E, F, G, H, I, J, K)
        ).
'rule/2__3'(A, B, C) :-
        'rule/2__4'(A, B, C).
'rule/2__4'(A, B, C) :-
        '$via1_multi_hash_occurrence/4-3'(A, D), !,
        'rule/2__4__0'(D, A, B, C).
'rule/2__4__0'([], A, B, C) :-
        'rule/2__5'(A, B, C).
'rule/2__4__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,_,G,H,I,J),
            get_mutable(active, F),
            I==C,
            '$via1_multi_hash_allocation_occurrence/2-1'(G, K) ->
            'rule/2__4__1'(K, G, H, J, A, B, C, D, E)
        ;   'rule/2__4__0'(B, C, D, E)
        ).
'rule/2__4__1'([], _, _, _, _, A, B, C, D) :-
        'rule/2__4__0'(A, B, C, D).
'rule/2__4__1'([A|B], C, D, E, F, G, H, I, J) :-
        (   A=suspension(_,K,L,M),
            get_mutable(active, K),
            L==C,
            '$via1_multi_hash_least_occurrence/2-1'(H, N) ->
            'rule/2__4__2'(N, M, A, B, C, D, E, F, G, H, I, J)
        ;   'rule/2__4__1'(B, C, D, E, F, G, H, I, J)
        ).
'rule/2__4__2'([], _, _, A, B, C, D, E, F, G, H, I) :-
        'rule/2__4__1'(A, B, C, D, E, F, G, H, I).
'rule/2__4__2'([A|B], C, D, E, F, G, H, I, J, K, L, M) :-
        (   A=suspension(_,N,O,P),
            get_mutable(active, N),
            O==K,
            P=[Q|R],
            Q==H,
            C>=G,
            \+may_trigger(F) ->
            '$remove_constraint_internal_least_occurrence/2'(A, S),
            (   S=yes ->
                '$delete_from_store_least_occurrence/2'(A)
            ;   true
            ),
            '$activate_constraint_rule/2'(T, M),
            (   T==yes ->
                '$insert_in_store_rule/2'(M)
            ;   true
            ),
            least_occurrence(K, R),
            (   M=suspension(_,U,_,_,_),
                get_mutable(active, U) ->
                chr_runtime:'chr update_mutable'(inactive, U),
                'rule/2__4__2'(B, C, D, E, F, G, H, I, J, K, L, M)
            ;   true
            )
        ;   'rule/2__4__2'(B, C, D, E, F, G, H, I, J, K, L, M)
        ).
'rule/2__4'(A, B, C) :-
        'rule/2__5'(A, B, C).
'rule/2__5'(A, B, C) :-
        '$via1_multi_hash_least_occurrence/2-1'(A, D), !,
        'rule/2__5__0'(D, A, B, C).
'rule/2__5__0'([], A, B, C) :-
        'rule/2__6'(A, B, C).
'rule/2__5__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,G,H),
            get_mutable(active, F),
            G==C,
            H=[I|J],
            '$via1_multi_hash_passive/2-12'(k(C,I), K),
            member(L, K),
            L=suspension(_,M,_,_,_),
            get_mutable(active, M) ->
            '$remove_constraint_internal_least_occurrence/2'(A, N),
            (   N=yes ->
                '$delete_from_store_least_occurrence/2'(A)
            ;   true
            ),
            '$activate_constraint_rule/2'(O, E),
            (   O==yes ->
                '$insert_in_store_rule/2'(E)
            ;   true
            ),
            least_occurrence(C, J),
            (   E=suspension(_,P,_,_,_),
                get_mutable(active, P) ->
                chr_runtime:'chr update_mutable'(inactive, P),
                'rule/2__5__0'(B, C, D, E)
            ;   true
            )
        ;   'rule/2__5__0'(B, C, D, E)
        ).
'rule/2__5'(A, B, C) :-
        'rule/2__6'(A, B, C).
'rule/2__6'(A, B, C) :-
        B=pragma(rule([],_,_,_),ids([],D),_,_,_), !,
        '$activate_constraint_rule/2'(E, C),
        (   E==yes ->
            '$insert_in_store_rule/2'(C)
        ;   true
        ),
        least_occurrence(A, D),
        (   C=suspension(_,F,_,_,_),
            get_mutable(active, F) ->
            chr_runtime:'chr update_mutable'(inactive, F),
            'rule/2__7'(A, B, C)
        ;   true
        ).
'rule/2__6'(A, B, C) :-
        'rule/2__7'(A, B, C).
'rule/2__7'(A, B, C) :-
        '$via1_multi_hash_prev_guard_list/7-2'(A, D), !,
        'rule/2__7__0'(D, A, B, C).
'rule/2__7__0'([], A, B, C) :-
        'rule/2__8'(A, B, C).
'rule/2__7__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,G,H,I,J,K,L,M),
            get_mutable(active, F),
            H==C,
            D=pragma(rule(N,O,P,_),_,_,_,C),
            N\==[],
            append(N, O, Q),
            make_head_matchings_explicit(Q, R, S),
            setof(T, chr_translate:head_subset(R,I,T), U),
            U\=[] ->
            '$remove_constraint_internal_prev_guard_list/7'(A, V),
            (   V=yes ->
                '$delete_from_store_prev_guard_list/7'(A)
            ;   true
            ),
            '$activate_constraint_rule/2'(W, E),
            (   W==yes ->
                '$insert_in_store_rule/2'(E)
            ;   true
            ),
            compute_derived_info(S, U, R, Q, P, L, I, M, X, Y),
            append(K, X, Z),
            list2conj(Z, A1),
            conj2list(A1, B1),
            append(Y, M, C1),
            list2conj(C1, D1),
            conj2list(D1, E1),
            F1 is C-1,
            prev_guard_list(G, F1, I, J, B1, L, E1),
            (   E=suspension(_,G1,_,_,_),
                get_mutable(active, G1) ->
                chr_runtime:'chr update_mutable'(inactive, G1),
                'rule/2__7__0'(B, C, D, E)
            ;   true
            )
        ;   'rule/2__7__0'(B, C, D, E)
        ).
'rule/2__7'(A, B, C) :-
        'rule/2__8'(A, B, C).
'rule/2__8'(A, B, C) :-
        '$via1_multi_hash_prev_guard_list/7-1'(A, D),
        member(E, D),
        E=suspension(_,F,_,_,0,G,H,I,J,_),
        get_mutable(active, F),
        B=pragma(rule(K,L,H,M),N,O,P,A),
        H\==true,
        append(J, I, Q),
        simplify_guard(H, M, Q, R, S),
        H\==R, !,
        '$remove_constraint_internal_prev_guard_list/7'(E, T),
        (   T=yes ->
            '$delete_from_store_prev_guard_list/7'(E)
        ;   true
        ),
        (   var(C) ->
            true
        ;   '$remove_constraint_internal_rule/2'(C, U),
            (   U=yes ->
                '$delete_from_store_rule/2'(C)
            ;   true
            )
        ),
        rule(A, pragma(rule(K,L,R,S),N,O,P,A)),
        prev_guard_list(A, 0, G, R, I, J, []).
'rule/2__8'(A, B, C) :-
        '$via1_multi_hash_prev_guard_list/7-1'(A, D), !,
        'rule/2__8__0'(D, A, B, C).
'rule/2__8__0'([], A, B, C) :-
        'rule/2__9'(A, B, C).
'rule/2__8__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,G,H,_,I,J,K,_),
            get_mutable(active, F),
            G==C,
            H=0,
            chr_pp_flag(check_impossible_rules, on),
            D=pragma(rule(_,_,I,_),_,_,_,C),
            append(K, J, L),
            guard_entailment:entails_guard(L, fail) ->
            '$remove_constraint_internal_prev_guard_list/7'(A, M),
            (   M=yes ->
                '$delete_from_store_prev_guard_list/7'(A)
            ;   true
            ),
            '$activate_constraint_rule/2'(N, E),
            (   N==yes ->
                '$insert_in_store_rule/2'(E)
            ;   true
            ),
            generate_format_rule(D, O, ['.'-[]]),
            chr_warning(weird_program, [['Heads will never match in '-[]|O],['\tThis rule will never fire!'-[]]]),
            set_all_passive(C),
            (   E=suspension(_,P,_,_,_),
                get_mutable(active, P) ->
                chr_runtime:'chr update_mutable'(inactive, P),
                'rule/2__8__0'(B, C, D, E)
            ;   true
            )
        ;   'rule/2__8__0'(B, C, D, E)
        ).
'rule/2__8'(A, B, C) :-
        'rule/2__9'(A, B, C).
'rule/2__9'(A, B, C) :-
        '$via1_multi_hash_prev_guard_list/7-1'(A, D),
        member(E, D),
        E=suspension(_,F,_,_,0,G,H,I,J,_),
        get_mutable(active, F),
        B=pragma(rule(K,L,H,M),N,O,P,A),
        simplify_heads(J, I, H, M, Q, R),
        Q\==[],
        extract_variables(K, S),
        extract_variables(L, T),
        extract_variables(G, U),
        replace_some_heads(S, T, U, Q, V, W, H, M, X),
        insert_variables(V, K, Y),
        insert_variables(W, L, Z),
        append(R, X, A1),
        list2conj(A1, B1),
        C1=pragma(rule(Y,Z,H,(B1,M)),N,O,P,A),
        (   K\==Y
        ;   L\==Z
        ), !,
        (   var(C) ->
            true
        ;   '$remove_constraint_internal_rule/2'(C, D1),
            (   D1=yes ->
                '$delete_from_store_rule/2'(C)
            ;   true
            )
        ),
        rule(A, C1).
'rule/2__9'(A, B, C) :-
        '$via1_multi_hash_prev_guard_list/7-1'(A, D), !,
        'rule/2__9__0'(D, A, B, C).
'rule/2__9__0'([], A, B, C) :-
        'rule/2__10'(A, B, C).
'rule/2__9__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,G,H,_,I,_,_,_),
            get_mutable(active, F),
            G==C,
            H=0,
            J=t(92,A,E),
            '$novel_production'(A, J),
            '$novel_production'(E, J),
            chr_pp_flag(check_impossible_rules, on),
            D=pragma(rule(_,_,I,_),_,_,_,C),
            conj2list(I, K),
            guard_entailment:entails_guard(K, fail) ->
            '$extend_history'(E, J),
            '$activate_constraint_rule/2'(L, E),
            (   L==yes ->
                '$insert_in_store_rule/2'(E)
            ;   true
            ),
            generate_format_rule(D, M, ['.'-[]]),
            chr_warning(weird_program, [['Guard will always fail in '-[]|M],['\tThis rule will never fire!'-[]]]),
            set_all_passive(C),
            (   E=suspension(_,N,_,_,_),
                get_mutable(active, N) ->
                chr_runtime:'chr update_mutable'(inactive, N),
                'rule/2__9__0'(B, C, D, E)
            ;   true
            )
        ;   'rule/2__9__0'(B, C, D, E)
        ).
'rule/2__9'(A, B, C) :-
        'rule/2__10'(A, B, C).
'rule/2__10'(A, B, C) :-
        '$via1_multi_hash_occurrence/4-3'(A, D), !,
        'rule/2__10__0'(D, A, B, C).
'rule/2__10__0'([], A, B, C) :-
        'rule/2__11'(A, B, C).
'rule/2__10__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,_,G,H,I,_),
            get_mutable(active, F),
            I==C,
            '$via1_multi_hash_prev_guard_list/7-1'(C, J) ->
            'rule/2__10__1'(J, G, H, A, B, C, D, E)
        ;   'rule/2__10__0'(B, C, D, E)
        ).
'rule/2__10__1'([], _, _, _, A, B, C, D) :-
        'rule/2__10__0'(A, B, C, D).
'rule/2__10__1'([A|B], C, D, E, F, G, H, I) :-
        (   A=suspension(_,J,_,K,L,_,_,_,_,_),
            get_mutable(active, J),
            K==G,
            L=0,
            '$via1_multi_hash_occurrence/4-13'(k(C,G), M) ->
            'rule/2__10__2'(M, A, B, C, D, E, F, G, H, I)
        ;   'rule/2__10__1'(B, C, D, E, F, G, H, I)
        ).
'rule/2__10__2'([], _, A, B, C, D, E, F, G, H) :-
        'rule/2__10__1'(A, B, C, D, E, F, G, H).
'rule/2__10__2'([A|B], C, D, E, F, G, H, I, J, K) :-
        (   A=suspension(_,L,_,_,M,N,O,P),
            get_mutable(active, L),
            A\==G,
            M==E,
            O==I,
            hprolog:get_store('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', Q) ->
            'rule/2__10__3'(Q, N, P, A, B, C, D, E, F, G, H, I, J, K)
        ;   'rule/2__10__2'(B, C, D, E, F, G, H, I, J, K)
        ).
'rule/2__10__3'([], _, _, _, A, B, C, D, E, F, G, H, I, J) :-
        'rule/2__10__2'(A, B, C, D, E, F, G, H, I, J).
'rule/2__10__3'([A|B], C, D, E, F, G, H, I, J, K, L, M, N, O) :-
        (   A=suspension(_,P,_,Q),
            get_mutable(active, P),
            chr_pp_flag(occurrence_subsumption, on),
            C<J,
            N=pragma(rule(R,_,_,_),_,_,_,M),
            R\==[],
            \+memberchk_eq(I,Q) ->
            '$remove_constraint_internal_multiple_occ_constraints_checked/1'(A, S),
            (   S=yes ->
                '$delete_from_store_multiple_occ_constraints_checked/1'(A)
            ;   true
            ),
            '$activate_constraint_rule/2'(T, O),
            (   T==yes ->
                '$insert_in_store_rule/2'(O)
            ;   true
            ),
            first_occ_in_rule(M, I, C, D),
            multiple_occ_constraints_checked([I|Q]),
            (   O=suspension(_,U,_,_,_),
                get_mutable(active, U) ->
                chr_runtime:'chr update_mutable'(inactive, U),
                'rule/2__10__3'(B, C, D, E, F, G, H, I, J, K, L, M, N, O)
            ;   true
            )
        ;   'rule/2__10__3'(B, C, D, E, F, G, H, I, J, K, L, M, N, O)
        ).
'rule/2__10'(A, B, C) :-
        'rule/2__11'(A, B, C).
'rule/2__11'(A, B, C) :-
        '$via1_multi_hash_passive/2-1'(A, D), !,
        'rule/2__11__0'(D, A, B, C).
'rule/2__11__0'([], A, B, C) :-
        'rule/2__12'(A, B, C).
'rule/2__11__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,G,H),
            get_mutable(active, F),
            G==C,
            I=t(116,E,A),
            '$novel_production'(E, I),
            '$novel_production'(A, I),
            D=pragma(rule(_,_,_,_),ids([H|J],K),_,_,C) ->
            '$extend_history'(E, I),
            '$activate_constraint_rule/2'(L, E),
            (   L==yes ->
                '$insert_in_store_rule/2'(E)
            ;   true
            ),
            append(J, K, M),
            check_all_passive(C, M),
            (   E=suspension(_,N,_,_,_),
                get_mutable(active, N) ->
                chr_runtime:'chr update_mutable'(inactive, N),
                'rule/2__11__0'(B, C, D, E)
            ;   true
            )
        ;   'rule/2__11__0'(B, C, D, E)
        ).
'rule/2__11'(A, B, C) :-
        'rule/2__12'(A, B, C).
'rule/2__12'(A, B, C) :-
        '$via1_multi_hash_passive/2-1'(A, D), !,
        'rule/2__12__0'(D, A, B, C).
'rule/2__12__0'([], A, B, C) :-
        'rule/2__13'(A, B, C).
'rule/2__12__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,G,H),
            get_mutable(active, F),
            G==C,
            I=t(117,E,A),
            '$novel_production'(E, I),
            '$novel_production'(A, I),
            D=pragma(rule(_,_,_,_),ids([],[H|J]),_,_,C) ->
            '$extend_history'(E, I),
            '$activate_constraint_rule/2'(K, E),
            (   K==yes ->
                '$insert_in_store_rule/2'(E)
            ;   true
            ),
            check_all_passive(C, J),
            (   E=suspension(_,L,_,_,_),
                get_mutable(active, L) ->
                chr_runtime:'chr update_mutable'(inactive, L),
                'rule/2__12__0'(B, C, D, E)
            ;   true
            )
        ;   'rule/2__12__0'(B, C, D, E)
        ).
'rule/2__12'(A, B, C) :-
        'rule/2__13'(A, B, C).
'rule/2__13'(A, B, C) :-
        '$via1_multi_hash_check_all_passive/2-1'(A, D), !,
        'rule/2__13__0'(D, A, B, C).
'rule/2__13__0'([], A, B, C) :-
        'rule/2__14'(A, B, C).
'rule/2__13__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,G,H),
            get_mutable(active, F),
            G==C,
            H=[] ->
            '$remove_constraint_internal_check_all_passive/2'(A, I),
            (   I=yes ->
                '$delete_from_store_check_all_passive/2'(A)
            ;   true
            ),
            '$activate_constraint_rule/2'(J, E),
            (   J==yes ->
                '$insert_in_store_rule/2'(E)
            ;   true
            ),
            generate_format_rule(D, K, ['.'-[]]),
            chr_warning(weird_program, [['All heads passive in '-[]|K],['\tThis rule never fires. Please check your program.'-[]]]),
            (   E=suspension(_,L,_,_,_),
                get_mutable(active, L) ->
                chr_runtime:'chr update_mutable'(inactive, L),
                'rule/2__13__0'(B, C, D, E)
            ;   true
            )
        ;   'rule/2__13__0'(B, C, D, E)
        ).
'rule/2__13'(A, B, C) :-
        'rule/2__14'(A, B, C).
'rule/2__14'(A, B, C) :-
        '$via1_multi_hash_occurrence/4-3'(A, D), !,
        'rule/2__14__0'(D, A, B, C).
'rule/2__14__0'([], A, B, C) :-
        'rule/2__15'(A, B, C).
'rule/2__14__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,_,G,H,I,J),
            get_mutable(active, F),
            I==C,
            hprolog:get_store('$chr_store_global_ground_chr_translate:call_pattern/1', K) ->
            'rule/2__14__1'(K, G, H, J, A, B, C, D, E)
        ;   'rule/2__14__0'(B, C, D, E)
        ).
'rule/2__14__1'([], _, _, _, _, A, B, C, D) :-
        'rule/2__14__0'(A, B, C, D).
'rule/2__14__1'([A|B], C, D, E, F, G, H, I, J) :-
        (   A=suspension(_,K,_,_,L),
            get_mutable(active, K),
            L=odom(M,N),
            M=occ(O,P),
            O==C,
            P==D,
            hprolog:get_store('$chr_store_global_ground_chr_translate:abstract_constraints/1', Q) ->
            'rule/2__14__2'(Q, N, A, B, C, D, E, F, G, H, I, J)
        ;   'rule/2__14__1'(B, C, D, E, F, G, H, I, J)
        ).
'rule/2__14__2'([], _, _, A, B, C, D, E, F, G, H, I) :-
        'rule/2__14__1'(A, B, C, D, E, F, G, H, I).
'rule/2__14__2'([A|B], C, D, E, F, G, H, I, J, K, L, M) :-
        (   A=suspension(_,N,_,_,_),
            get_mutable(active, N),
            O=t(173,D,A,I,M),
            '$novel_production'(D, O),
            '$novel_production'(A, O),
            '$novel_production'(I, O),
            '$novel_production'(M, O),
            L=pragma(rule(_,_,_,_),ids(P,_),_,_,_),
            memberchk_eq(H, P),
            is_passive(K, H) ->
            '$extend_history'(M, O),
            '$activate_constraint_rule/2'(Q, M),
            (   Q==yes ->
                '$insert_in_store_rule/2'(M)
            ;   true
            ),
            R is G+1,
            S=odom(occ(F,R),C),
            call_pattern(S),
            depends_on(odom(occ(F,G),C), S),
            (   M=suspension(_,T,_,_,_),
                get_mutable(active, T) ->
                chr_runtime:'chr update_mutable'(inactive, T),
                'rule/2__14__2'(B, C, D, E, F, G, H, I, J, K, L, M)
            ;   true
            )
        ;   'rule/2__14__2'(B, C, D, E, F, G, H, I, J, K, L, M)
        ).
'rule/2__14'(A, B, C) :-
        'rule/2__15'(A, B, C).
'rule/2__15'(A, B, C) :-
        '$via1_multi_hash_occurrence/4-3'(A, D), !,
        'rule/2__15__0'(D, A, B, C).
'rule/2__15__0'([], A, B, C) :-
        'rule/2__16'(A, B, C).
'rule/2__15__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,_,G,H,I,J),
            get_mutable(active, F),
            I==C,
            hprolog:get_store('$chr_store_global_ground_chr_translate:call_pattern/1', K) ->
            'rule/2__15__1'(K, G, H, J, A, B, C, D, E)
        ;   'rule/2__15__0'(B, C, D, E)
        ).
'rule/2__15__1'([], _, _, _, _, A, B, C, D) :-
        'rule/2__15__0'(A, B, C, D).
'rule/2__15__1'([A|B], C, D, E, F, G, H, I, J) :-
        (   A=suspension(_,K,_,_,L),
            get_mutable(active, K),
            L=odom(M,N),
            M=occ(O,P),
            O==C,
            P==D,
            hprolog:get_store('$chr_store_global_ground_chr_translate:abstract_constraints/1', Q) ->
            'rule/2__15__2'(Q, N, A, B, C, D, E, F, G, H, I, J)
        ;   'rule/2__15__1'(B, C, D, E, F, G, H, I, J)
        ).
'rule/2__15__2'([], _, _, A, B, C, D, E, F, G, H, I) :-
        'rule/2__15__1'(A, B, C, D, E, F, G, H, I).
'rule/2__15__2'([A|B], C, D, E, F, G, H, I, J, K, L, M) :-
        (   A=suspension(_,N,_,_,O),
            get_mutable(active, N),
            P=t(174,D,A,I,M),
            '$novel_production'(D, P),
            '$novel_production'(A, P),
            '$novel_production'(I, P),
            '$novel_production'(M, P),
            L=pragma(rule(Q,R,S,T),ids(U,_),_,_,_),
            memberchk_eq(H, U),
            \+is_passive(K,H) ->
            '$extend_history'(M, P),
            '$activate_constraint_rule/2'(V, M),
            (   V==yes ->
                '$insert_in_store_rule/2'(M)
            ;   true
            ),
            once(select2(H,_,U,Q,_,W)),
            ai_observation_abstract_constraints(W, O, X),
            ai_observation_observe_list(odom([],C), X, odom([],Y)),
            ai_observation_abstract_constraints(R, O, Z),
            ai_observation_observe_list(odom([],Y), Z, odom([],A1)),
            ai_observation_abstract_goal_(Q, R, S, T, O, B1),
            call_pattern(odom(B1,A1)),
            C1 is G+1,
            D1=odom(occ(F,C1),C),
            call_pattern(D1),
            depends_on_as(odom(occ(F,G),C), odom(B1,A1), D1),
            final_answer_pattern(odom(occ(F,G),C), odom([],C)),
            (   M=suspension(_,E1,_,_,_),
                get_mutable(active, E1) ->
                chr_runtime:'chr update_mutable'(inactive, E1),
                'rule/2__15__2'(B, C, D, E, F, G, H, I, J, K, L, M)
            ;   true
            )
        ;   'rule/2__15__2'(B, C, D, E, F, G, H, I, J, K, L, M)
        ).
'rule/2__15'(A, B, C) :-
        'rule/2__16'(A, B, C).
'rule/2__16'(A, B, C) :-
        '$via1_multi_hash_occurrence/4-3'(A, D), !,
        'rule/2__16__0'(D, A, B, C).
'rule/2__16__0'([], A, B, C) :-
        'rule/2__17'(A, B, C).
'rule/2__16__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,_,G,H,I,J),
            get_mutable(active, F),
            I==C,
            hprolog:get_store('$chr_store_global_ground_chr_translate:call_pattern/1', K) ->
            'rule/2__16__1'(K, G, H, J, A, B, C, D, E)
        ;   'rule/2__16__0'(B, C, D, E)
        ).
'rule/2__16__1'([], _, _, _, _, A, B, C, D) :-
        'rule/2__16__0'(A, B, C, D).
'rule/2__16__1'([A|B], C, D, E, F, G, H, I, J) :-
        (   A=suspension(_,K,_,_,L),
            get_mutable(active, K),
            L=odom(M,N),
            M=occ(O,P),
            O==C,
            P==D,
            hprolog:get_store('$chr_store_global_ground_chr_translate:abstract_constraints/1', Q) ->
            'rule/2__16__2'(Q, N, A, B, C, D, E, F, G, H, I, J)
        ;   'rule/2__16__1'(B, C, D, E, F, G, H, I, J)
        ).
'rule/2__16__2'([], _, _, A, B, C, D, E, F, G, H, I) :-
        'rule/2__16__1'(A, B, C, D, E, F, G, H, I).
'rule/2__16__2'([A|B], C, D, E, F, G, H, I, J, K, L, M) :-
        (   A=suspension(_,N,_,_,_),
            get_mutable(active, N),
            O=t(176,D,A,I,M),
            '$novel_production'(D, O),
            '$novel_production'(A, O),
            '$novel_production'(I, O),
            '$novel_production'(M, O),
            L=pragma(rule(_,_,_,_),ids(_,P),_,_,_),
            memberchk_eq(H, P),
            is_passive(K, H) ->
            '$extend_history'(M, O),
            '$activate_constraint_rule/2'(Q, M),
            (   Q==yes ->
                '$insert_in_store_rule/2'(M)
            ;   true
            ),
            R is G+1,
            S=odom(occ(F,R),C),
            call_pattern(S),
            final_answer_pattern(odom(occ(F,G),C), odom([],C)),
            depends_on(odom(occ(F,G),C), S),
            (   M=suspension(_,T,_,_,_),
                get_mutable(active, T) ->
                chr_runtime:'chr update_mutable'(inactive, T),
                'rule/2__16__2'(B, C, D, E, F, G, H, I, J, K, L, M)
            ;   true
            )
        ;   'rule/2__16__2'(B, C, D, E, F, G, H, I, J, K, L, M)
        ).
'rule/2__16'(A, B, C) :-
        'rule/2__17'(A, B, C).
'rule/2__17'(A, B, C) :-
        '$via1_multi_hash_occurrence/4-3'(A, D), !,
        'rule/2__17__0'(D, A, B, C).
'rule/2__17__0'([], A, B, C) :-
        'rule/2__18'(A, B, C).
'rule/2__17__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,_,G,H,I,J),
            get_mutable(active, F),
            I==C,
            hprolog:get_store('$chr_store_global_ground_chr_translate:call_pattern/1', K) ->
            'rule/2__17__1'(K, G, H, J, A, B, C, D, E)
        ;   'rule/2__17__0'(B, C, D, E)
        ).
'rule/2__17__1'([], _, _, _, _, A, B, C, D) :-
        'rule/2__17__0'(A, B, C, D).
'rule/2__17__1'([A|B], C, D, E, F, G, H, I, J) :-
        (   A=suspension(_,K,_,_,L),
            get_mutable(active, K),
            L=odom(M,N),
            M=occ(O,P),
            O==C,
            P==D,
            hprolog:get_store('$chr_store_global_ground_chr_translate:abstract_constraints/1', Q) ->
            'rule/2__17__2'(Q, N, A, B, C, D, E, F, G, H, I, J)
        ;   'rule/2__17__1'(B, C, D, E, F, G, H, I, J)
        ).
'rule/2__17__2'([], _, _, A, B, C, D, E, F, G, H, I) :-
        'rule/2__17__1'(A, B, C, D, E, F, G, H, I).
'rule/2__17__2'([A|B], C, D, E, F, G, H, I, J, K, L, M) :-
        (   A=suspension(_,N,_,_,O),
            get_mutable(active, N),
            P=t(177,D,A,I,M),
            '$novel_production'(D, P),
            '$novel_production'(A, P),
            '$novel_production'(I, P),
            '$novel_production'(M, P),
            L=pragma(rule(Q,R,S,T),ids(_,U),_,_,_),
            memberchk_eq(H, U),
            \+is_passive(K,H) ->
            '$extend_history'(M, P),
            '$activate_constraint_rule/2'(V, M),
            (   V==yes ->
                '$insert_in_store_rule/2'(M)
            ;   true
            ),
            once(select2(H,_,U,R,_,W)),
            ai_observation_abstract_constraints(W, O, X),
            ai_observation_observe_list(odom([],C), X, odom([],Y)),
            ai_observation_abstract_constraints(Q, O, Z),
            ai_observation_observe_list(odom([],Y), Z, odom([],A1)),
            ord_add_element(A1, F, B1),
            ai_observation_abstract_goal_(Q, R, S, T, O, C1),
            call_pattern(odom(C1,B1)),
            (   ord_memberchk(F, A1) ->
                D1=no
            ;   D1=yes
            ),
            E1 is G+1,
            F1=odom(occ(F,E1),C),
            call_pattern(F1),
            depends_on_ap(odom(occ(F,G),C), odom(C1,B1), F1, D1),
            (   M=suspension(_,G1,_,_,_),
                get_mutable(active, G1) ->
                chr_runtime:'chr update_mutable'(inactive, G1),
                'rule/2__17__2'(B, C, D, E, F, G, H, I, J, K, L, M)
            ;   true
            )
        ;   'rule/2__17__2'(B, C, D, E, F, G, H, I, J, K, L, M)
        ).
'rule/2__17'(A, B, C) :-
        'rule/2__18'(A, B, C).
'rule/2__18'(_, _, A) :-
        '$activate_constraint_rule/2'(B, A),
        (   B==yes ->
            '$insert_in_store_rule/2'(A)
        ;   true
        ).
get_rule(A, B) :-
        '$via1_multi_hash_rule/2-1'(A, C),
        member(D, C),
        D=suspension(_,E,_,_,F),
        get_mutable(active, E), !,
        B=F.
get_rule(_, _) :-
        fail.
least_occurrence(A, B) :-
        'least_occurrence/2__0'(A, B, _).
'least_occurrence/2__0'(A, [], B) :-
        '$via1_multi_hash_occurrence/4-3'(A, C), !,
        '$allocate_constraint_least_occurrence/2'(B, A, []),
        'least_occurrence/2__0__0'(C, A, [], B).
'least_occurrence/2__0__0'([], A, B, C) :-
        'least_occurrence/2__1'(A, B, C).
'least_occurrence/2__0__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,_,G,H,I,_),
            get_mutable(active, F),
            I==C,
            '$via1_multi_hash_rule/2-1'(C, J) ->
            'least_occurrence/2__0__1'(J, G, H, A, B, C, D, E)
        ;   'least_occurrence/2__0__0'(B, C, D, E)
        ).
'least_occurrence/2__0__1'([], _, _, _, A, B, C, D) :-
        'least_occurrence/2__0__0'(A, B, C, D).
'least_occurrence/2__0__1'([A|B], C, D, E, F, G, H, I) :-
        (   A=suspension(_,J,_,K,L),
            get_mutable(active, J),
            K==G,
            '$via1_multi_hash_allocation_occurrence/2-12'(k(C,D), M) ->
            'least_occurrence/2__0__2'(M, L, A, B, C, D, E, F, G, H, I)
        ;   'least_occurrence/2__0__1'(B, C, D, E, F, G, H, I)
        ).
'least_occurrence/2__0__2'([], _, _, A, B, C, D, E, F, G, H) :-
        'least_occurrence/2__0__1'(A, B, C, D, E, F, G, H).
'least_occurrence/2__0__2'([A|B], C, D, E, F, G, H, I, J, K, L) :-
        (   A=suspension(_,M,N,O),
            get_mutable(active, M),
            N==F,
            O==G,
            C=pragma(rule([],_,_,_),_,_,_,_),
            \+is_observed(F,G) ->
            '$remove_constraint_internal_allocation_occurrence/2'(A, P),
            (   P=yes ->
                '$delete_from_store_allocation_occurrence/2'(A)
            ;   true
            ),
            '$activate_constraint_least_occurrence/2'(Q, L),
            (   Q==yes ->
                '$insert_in_store_least_occurrence/2'(L)
            ;   true
            ),
            R is G+1,
            allocation_occurrence(F, R),
            (   L=suspension(_,S,_,_),
                get_mutable(active, S) ->
                chr_runtime:'chr update_mutable'(inactive, S),
                'least_occurrence/2__0__2'(B, C, D, E, F, G, H, I, J, K, L)
            ;   true
            )
        ;   'least_occurrence/2__0__2'(B, C, D, E, F, G, H, I, J, K, L)
        ).
'least_occurrence/2__0'(A, B, C) :-
        '$allocate_constraint_least_occurrence/2'(C, A, B),
        'least_occurrence/2__1'(A, B, C).
'least_occurrence/2__1'(A, [B|C], D) :-
        '$via1_multi_hash_occurrence/4-34'(k(A,B), E),
        member(F, E),
        F=suspension(_,G,_,_,H,I,_,_),
        get_mutable(active, G),
        '$via1_multi_hash_allocation_occurrence/2-1'(H, J),
        member(K, J),
        K=suspension(_,L,_,M),
        get_mutable(active, L),
        M>=I,
        '$via1_multi_hash_rule/2-1'(A, N),
        member(O, N),
        O=suspension(_,P,_,_,_),
        get_mutable(active, P),
        \+may_trigger(H), !,
        (   var(D) ->
            true
        ;   '$remove_constraint_internal_least_occurrence/2'(D, Q),
            (   Q=yes ->
                '$delete_from_store_least_occurrence/2'(D)
            ;   true
            )
        ),
        least_occurrence(A, C).
'least_occurrence/2__1'(A, [B|C], D) :-
        '$via1_multi_hash_passive/2-12'(k(A,B), E),
        member(F, E),
        F=suspension(_,G,_,_,_),
        get_mutable(active, G),
        '$via1_multi_hash_rule/2-1'(A, H),
        member(I, H),
        I=suspension(_,J,_,_,_),
        get_mutable(active, J), !,
        (   var(D) ->
            true
        ;   '$remove_constraint_internal_least_occurrence/2'(D, K),
            (   K=yes ->
                '$delete_from_store_least_occurrence/2'(D)
            ;   true
            )
        ),
        least_occurrence(A, C).
'least_occurrence/2__1'(_, _, A) :-
        '$activate_constraint_least_occurrence/2'(B, A),
        (   B==yes ->
            '$insert_in_store_least_occurrence/2'(A)
        ;   true
        ).
is_least_occurrence(A) :-
        '$via1_multi_hash_least_occurrence/2-1'(A, B),
        member(C, B),
        C=suspension(_,D,_,[]),
        get_mutable(active, D), !.
is_least_occurrence(_) :-
        fail.
constraint_index(A, B) :-
        '$insert_constraint_internal_constraint_index/2'(C, A, B),
        '$insert_in_store_constraint_index/2'(C).
get_constraint_index(A, B) :-
        '$via1_multi_hash_constraint_index/2-1'(A, C),
        member(D, C),
        D=suspension(_,E,_,F),
        get_mutable(active, E), !,
        B=F.
get_constraint_index(_, _) :-
        fail.
get_indexed_constraint(A, B) :-
        '$via1_multi_hash_constraint_index/2-2'(A, C),
        member(D, C),
        D=suspension(_,E,F,_),
        get_mutable(active, E), !,
        B=F.
get_indexed_constraint(_, _) :-
        fail.
max_constraint_index(A) :-
        '$insert_constraint_internal_max_constraint_index/1'(B, A),
        '$insert_in_store_max_constraint_index/1'(B).
get_max_constraint_index(A) :-
        hprolog:get_store('$chr_store_global_ground_chr_translate:max_constraint_index/1', B),
        member(C, B),
        C=suspension(_,D,_,E),
        get_mutable(active, D), !,
        A=E.
get_max_constraint_index(0).
no_history(A) :-
        '$insert_constraint_internal_no_history/1'(B, A),
        '$insert_in_store_no_history/1'(B).
has_no_history(A) :-
        '$via1_multi_hash_no_history/1-1'(A, B),
        member(C, B),
        C=suspension(_,D,_),
        get_mutable(active, D), !.
has_no_history(_) :-
        fail.
indexing_spec(A, B) :-
        '$via1_multi_hash_indexing_spec/2-1'(A, C),
        member(D, C),
        D=suspension(_,E,_,F),
        get_mutable(active, E), !,
        '$remove_constraint_internal_indexing_spec/2'(D, G),
        (   G=yes ->
            '$delete_from_store_indexing_spec/2'(D)
        ;   true
        ),
        append(B, F, H),
        indexing_spec(A, H).
indexing_spec(A, B) :-
        '$insert_constraint_internal_indexing_spec/2'(C, A, B),
        '$insert_in_store_indexing_spec/2'(C).
get_indexing_spec(A, B) :-
        '$via1_multi_hash_indexing_spec/2-1'(A, C),
        member(D, C),
        D=suspension(_,E,_,F),
        get_mutable(active, E), !,
        B=F.
get_indexing_spec(_, []).
observes(A, B) :-
        'observes/2__0'(A, B, _).
'observes/2__0'(A, B, _) :-
        '$via1_multi_hash_observes/2-12'(k(A,B), C),
        member(D, C),
        D=suspension(_,E,_,_),
        get_mutable(active, E), !.
'observes/2__0'(A, B, C) :-
        '$via1_multi_hash_spawns_observer/2-2'(A, D), !,
        '$allocate_constraint_observes/2'(C, A, B),
        'observes/2__0__0'(D, A, B, C).
'observes/2__0__0'([], A, B, C) :-
        'observes/2__1'(A, B, C).
'observes/2__0__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,G,H),
            get_mutable(active, F),
            H==C ->
            '$activate_constraint_observes/2'(I, E),
            (   I==yes ->
                '$insert_in_store_observes/2'(E)
            ;   true
            ),
            observes_indirectly(G, D),
            (   E=suspension(_,J,_,_),
                get_mutable(active, J) ->
                chr_runtime:'chr update_mutable'(inactive, J),
                'observes/2__0__0'(B, C, D, E)
            ;   true
            )
        ;   'observes/2__0__0'(B, C, D, E)
        ).
'observes/2__0'(A, B, C) :-
        '$allocate_constraint_observes/2'(C, A, B),
        'observes/2__1'(A, B, C).
'observes/2__1'(_, _, A) :-
        '$activate_constraint_observes/2'(B, A),
        (   B==yes ->
            '$insert_in_store_observes/2'(A)
        ;   true
        ).
spawns_observer(A, B) :-
        'spawns_observer/2__0'(A, B, _).
'spawns_observer/2__0'(A, B, _) :-
        '$via1_multi_hash_spawns_observer/2-12'(k(A,B), C),
        member(D, C),
        D=suspension(_,E,_,_,_),
        get_mutable(active, E), !.
'spawns_observer/2__0'(A, B, C) :-
        '$via1_multi_hash_observes/2-1'(B, D), !,
        '$allocate_constraint_spawns_observer/2'(C, A, B),
        'spawns_observer/2__0__0'(D, A, B, C).
'spawns_observer/2__0__0'([], A, B, C) :-
        'spawns_observer/2__1'(A, B, C).
'spawns_observer/2__0__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,G,H),
            get_mutable(active, F),
            G==D ->
            '$activate_constraint_spawns_observer/2'(I, E),
            (   I==yes ->
                '$insert_in_store_spawns_observer/2'(E)
            ;   true
            ),
            observes_indirectly(C, H),
            (   E=suspension(_,J,_,_,_),
                get_mutable(active, J) ->
                chr_runtime:'chr update_mutable'(inactive, J),
                'spawns_observer/2__0__0'(B, C, D, E)
            ;   true
            )
        ;   'spawns_observer/2__0__0'(B, C, D, E)
        ).
'spawns_observer/2__0'(A, B, C) :-
        '$allocate_constraint_spawns_observer/2'(C, A, B),
        'spawns_observer/2__1'(A, B, C).
'spawns_observer/2__1'(A, B, C) :-
        '$via1_multi_hash_observes_indirectly/2-1'(B, D), !,
        'spawns_observer/2__1__0'(D, A, B, C).
'spawns_observer/2__1__0'([], A, B, C) :-
        'spawns_observer/2__2'(A, B, C).
'spawns_observer/2__1__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,G,H),
            get_mutable(active, F),
            G==D,
            I=t(72,E,A),
            '$novel_production'(E, I),
            '$novel_production'(A, I) ->
            '$extend_history'(E, I),
            '$activate_constraint_spawns_observer/2'(J, E),
            (   J==yes ->
                '$insert_in_store_spawns_observer/2'(E)
            ;   true
            ),
            observes_indirectly(C, H),
            (   E=suspension(_,K,_,_,_),
                get_mutable(active, K) ->
                chr_runtime:'chr update_mutable'(inactive, K),
                'spawns_observer/2__1__0'(B, C, D, E)
            ;   true
            )
        ;   'spawns_observer/2__1__0'(B, C, D, E)
        ).
'spawns_observer/2__1'(A, B, C) :-
        'spawns_observer/2__2'(A, B, C).
'spawns_observer/2__2'(_, _, A) :-
        '$activate_constraint_spawns_observer/2'(B, A),
        (   B==yes ->
            '$insert_in_store_spawns_observer/2'(A)
        ;   true
        ).
observes_indirectly(A, B) :-
        'observes_indirectly/2__0'(A, B, _).
'observes_indirectly/2__0'(A, B, _) :-
        '$via1_multi_hash_observes_indirectly/2-12'(k(A,B), C),
        member(D, C),
        D=suspension(_,E,_,_,_),
        get_mutable(active, E), !.
'observes_indirectly/2__0'(A, B, C) :-
        '$via1_multi_hash_spawns_observer/2-2'(A, D), !,
        '$allocate_constraint_observes_indirectly/2'(C, A, B),
        'observes_indirectly/2__0__0'(D, A, B, C).
'observes_indirectly/2__0__0'([], A, B, C) :-
        'observes_indirectly/2__1'(A, B, C).
'observes_indirectly/2__0__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,G,H),
            get_mutable(active, F),
            H==C,
            I=t(72,A,E),
            '$novel_production'(A, I),
            '$novel_production'(E, I) ->
            '$extend_history'(E, I),
            '$activate_constraint_observes_indirectly/2'(J, E),
            (   J==yes ->
                '$insert_in_store_observes_indirectly/2'(E)
            ;   true
            ),
            observes_indirectly(G, D),
            (   E=suspension(_,K,_,_,_),
                get_mutable(active, K) ->
                chr_runtime:'chr update_mutable'(inactive, K),
                'observes_indirectly/2__0__0'(B, C, D, E)
            ;   true
            )
        ;   'observes_indirectly/2__0__0'(B, C, D, E)
        ).
'observes_indirectly/2__0'(A, B, C) :-
        '$allocate_constraint_observes_indirectly/2'(C, A, B),
        'observes_indirectly/2__1'(A, B, C).
'observes_indirectly/2__1'(_, _, A) :-
        '$activate_constraint_observes_indirectly/2'(B, A),
        (   B==yes ->
            '$insert_in_store_observes_indirectly/2'(A)
        ;   true
        ).
is_self_observer(A) :-
        '$via1_multi_hash_observes_indirectly/2-12'(k(A,A), B),
        member(C, B),
        C=suspension(_,D,_,_,_),
        get_mutable(active, D), !.
is_self_observer(_) :-
        chr_pp_flag(observation_analysis, off).
generate_indexed_variables_body(A/B, C, D, E) :-
        hprolog:get_store('$chr_store_global_ground_chr_translate:constraint_mode/2', F),
        member(G, F),
        G=suspension(_,H,_,A/B,I),
        get_mutable(active, H), !,
        get_indexing_spec(A/B, J),
        (   chr_pp_flag(term_indexing, on) ->
            spectermvars(J, C, A, B, D, E)
        ;   create_indexed_variables_body(C, I, E, 1, A/B, K, L),
            (   K==empty ->
                D=true,
                E=[]
            ;   L==0 ->
                hprolog_call(chr_term_variables(C,E), D)
            ;   K=D
            )
        ).
generate_indexed_variables_body(A, _, _, _) :-
        chr_error(internal, [['generate_indexed_variables_clause: missing mode info for ~w.'-[A]]]).
module_initializer(A) :-
        '$insert_constraint_internal_module_initializer/1'(B, A),
        '$insert_in_store_module_initializer/1'(B).
module_initializers(A) :-
        hprolog:get_store('$chr_store_global_ground_chr_translate:module_initializer/1', B),
        member(C, B),
        C=suspension(_,D,_,E),
        get_mutable(active, D), !,
        '$remove_constraint_internal_module_initializer/1'(C, F),
        (   F=yes ->
            '$delete_from_store_module_initializer/1'(C)
        ;   true
        ),
        A=(E,G),
        module_initializers(G).
module_initializers(true).
prolog_global_variable(A) :-
        '$via1_multi_hash_prolog_global_variable/1-1'(A, B),
        member(C, B),
        C=suspension(_,D,_,_),
        get_mutable(active, D), !.
prolog_global_variable(A) :-
        '$insert_constraint_internal_prolog_global_variable/1'(B, A),
        '$insert_in_store_prolog_global_variable/1'(B).
prolog_global_variables(A) :-
        hprolog:get_store('$chr_store_global_ground_chr_translate:prolog_global_variable/1', B),
        member(C, B),
        C=suspension(_,D,_,E),
        get_mutable(active, D), !,
        '$remove_constraint_internal_prolog_global_variable/1'(C, F),
        (   F=yes ->
            '$delete_from_store_prolog_global_variable/1'(C)
        ;   true
        ),
        A=[E|G],
        prolog_global_variables(G).
prolog_global_variables([]).
prev_guard_list(A, B, C, D, E, F, G) :-
        'prev_guard_list/7__0'(A, B, C, D, E, F, G, _).
'prev_guard_list/7__0'(A, B, C, D, E, F, G, _) :-
        '$via1_multi_hash_rule/2-1'(B, H),
        member(I, H),
        I=suspension(_,J,_,_,K),
        get_mutable(active, J),
        K=pragma(rule(L,M,N,_),_,_,_,B),
        L\==[],
        append(L, M, O),
        make_head_matchings_explicit(O, P, Q),
        setof(R, chr_translate:head_subset(P,C,R), S),
        S\=[], !,
        compute_derived_info(Q, S, P, O, N, F, C, G, T, U),
        append(E, T, V),
        list2conj(V, W),
        conj2list(W, X),
        append(U, G, Y),
        list2conj(Y, Z),
        conj2list(Z, A1),
        B1 is B-1,
        prev_guard_list(A, B1, C, D, X, F, A1).
'prev_guard_list/7__0'(A, B, C, D, E, F, G, _) :-
        B>0, !,
        H is B-1,
        prev_guard_list(A, H, C, D, E, F, G).
'prev_guard_list/7__0'(A, 0, B, C, D, E, F, _) :-
        F\==[], !,
        add_type_information_(B, F, G),
        conj2list(G, H),
        chr_term_variables(B, I),
        append([chr_pp_headvariables(I)|H], D, J),
        list2conj(J, K),
        conj2list(K, L),
        prev_guard_list(A, 0, B, C, L, E, []).
'prev_guard_list/7__0'(A, 0, B, C, D, E, _, _) :-
        '$via1_multi_hash_rule/2-1'(A, F),
        member(G, F),
        G=suspension(_,H,_,_,I),
        get_mutable(active, H),
        I=pragma(rule(J,K,C,L),M,N,O,A),
        C\==true,
        append(E, D, P),
        simplify_guard(C, L, P, Q, R),
        C\==Q, !,
        '$remove_constraint_internal_rule/2'(G, S),
        (   S=yes ->
            '$delete_from_store_rule/2'(G)
        ;   true
        ),
        rule(A, pragma(rule(J,K,Q,R),M,N,O,A)),
        prev_guard_list(A, 0, B, Q, D, E, []).
'prev_guard_list/7__0'(A, 0, _, B, C, D, _, _) :-
        chr_pp_flag(check_impossible_rules, on),
        '$via1_multi_hash_rule/2-1'(A, E),
        member(F, E),
        F=suspension(_,G,_,_,H),
        get_mutable(active, G),
        H=pragma(rule(_,_,B,_),_,_,_,A),
        append(D, C, I),
        guard_entailment:entails_guard(I, fail), !,
        generate_format_rule(H, J, ['.'-[]]),
        chr_warning(weird_program, [['Heads will never match in '-[]|J],['\tThis rule will never fire!'-[]]]),
        set_all_passive(A).
'prev_guard_list/7__0'(A, 0, B, C, D, E, F, G) :-
        '$via1_multi_hash_rule/2-1'(A, H), !,
        '$allocate_constraint_prev_guard_list/7'(G, A, 0, B, C, D, E, F),
        'prev_guard_list/7__0__0'(H, A, 0, B, C, D, E, F, G).
'prev_guard_list/7__0__0'([], A, B, C, D, E, F, G, H) :-
        'prev_guard_list/7__1'(A, B, C, D, E, F, G, H).
'prev_guard_list/7__0__0'([A|B], C, D, E, F, G, H, I, J) :-
        (   A=suspension(_,K,_,L,M),
            get_mutable(active, K),
            L==C,
            M=pragma(rule(N,O,F,P),Q,R,S,C),
            simplify_heads(H, G, F, P, T, U),
            T\==[],
            extract_variables(N, V),
            extract_variables(O, W),
            extract_variables(E, X),
            replace_some_heads(V, W, X, T, Y, Z, F, P, A1),
            insert_variables(Y, N, B1),
            insert_variables(Z, O, C1),
            append(U, A1, D1),
            list2conj(D1, E1),
            F1=pragma(rule(B1,C1,F,(E1,P)),Q,R,S,C),
            (   N\==B1
            ;   O\==C1
            ) ->
            '$remove_constraint_internal_rule/2'(A, G1),
            (   G1=yes ->
                '$delete_from_store_rule/2'(A)
            ;   true
            ),
            '$activate_constraint_prev_guard_list/7'(H1, J),
            (   H1==yes ->
                '$insert_in_store_prev_guard_list/7'(J)
            ;   true
            ),
            rule(C, F1),
            (   J=suspension(_,I1,_,_,_,_,_,_,_,_),
                get_mutable(active, I1) ->
                chr_runtime:'chr update_mutable'(inactive, I1),
                'prev_guard_list/7__0__0'(B, C, D, E, F, G, H, I, J)
            ;   true
            )
        ;   'prev_guard_list/7__0__0'(B, C, D, E, F, G, H, I, J)
        ).
'prev_guard_list/7__0'(A, B, C, D, E, F, G, H) :-
        '$allocate_constraint_prev_guard_list/7'(H, A, B, C, D, E, F, G),
        'prev_guard_list/7__1'(A, B, C, D, E, F, G, H).
'prev_guard_list/7__1'(A, 0, B, C, D, E, F, G) :-
        '$via1_multi_hash_rule/2-1'(A, H), !,
        'prev_guard_list/7__1__0'(H, A, 0, B, C, D, E, F, G).
'prev_guard_list/7__1__0'([], A, B, C, D, E, F, G, H) :-
        'prev_guard_list/7__2'(A, B, C, D, E, F, G, H).
'prev_guard_list/7__1__0'([A|B], C, D, E, F, G, H, I, J) :-
        (   A=suspension(_,K,_,L,M),
            get_mutable(active, K),
            L==C,
            N=t(92,J,A),
            '$novel_production'(J, N),
            '$novel_production'(A, N),
            chr_pp_flag(check_impossible_rules, on),
            M=pragma(rule(_,_,F,_),_,_,_,C),
            conj2list(F, O),
            guard_entailment:entails_guard(O, fail) ->
            '$extend_history'(J, N),
            '$activate_constraint_prev_guard_list/7'(P, J),
            (   P==yes ->
                '$insert_in_store_prev_guard_list/7'(J)
            ;   true
            ),
            generate_format_rule(M, Q, ['.'-[]]),
            chr_warning(weird_program, [['Guard will always fail in '-[]|Q],['\tThis rule will never fire!'-[]]]),
            set_all_passive(C),
            (   J=suspension(_,R,_,_,_,_,_,_,_,_),
                get_mutable(active, R) ->
                chr_runtime:'chr update_mutable'(inactive, R),
                'prev_guard_list/7__1__0'(B, C, D, E, F, G, H, I, J)
            ;   true
            )
        ;   'prev_guard_list/7__1__0'(B, C, D, E, F, G, H, I, J)
        ).
'prev_guard_list/7__1'(A, B, C, D, E, F, G, H) :-
        'prev_guard_list/7__2'(A, B, C, D, E, F, G, H).
'prev_guard_list/7__2'(A, 0, B, C, D, E, F, G) :-
        '$via1_multi_hash_rule/2-1'(A, H), !,
        'prev_guard_list/7__2__0'(H, A, 0, B, C, D, E, F, G).
'prev_guard_list/7__2__0'([], A, B, C, D, E, F, G, H) :-
        'prev_guard_list/7__3'(A, B, C, D, E, F, G, H).
'prev_guard_list/7__2__0'([A|B], C, D, E, F, G, H, I, J) :-
        (   A=suspension(_,K,_,L,M),
            get_mutable(active, K),
            L==C,
            hprolog:get_store('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', N) ->
            'prev_guard_list/7__2__1'(N, M, A, B, C, D, E, F, G, H, I, J)
        ;   'prev_guard_list/7__2__0'(B, C, D, E, F, G, H, I, J)
        ).
'prev_guard_list/7__2__1'([], _, _, A, B, C, D, E, F, G, H, I) :-
        'prev_guard_list/7__2__0'(A, B, C, D, E, F, G, H, I).
'prev_guard_list/7__2__1'([A|B], C, D, E, F, G, H, I, J, K, L, M) :-
        (   A=suspension(_,N,_,O),
            get_mutable(active, N),
            chr_pp_flag(occurrence_subsumption, on),
            '$via1_multi_hash_occurrence/4-3'(F, P),
            member(Q, P),
            Q=suspension(_,R,_,_,S,T,_,U),
            get_mutable(active, R),
            '$via1_multi_hash_occurrence/4-13'(k(S,F), V),
            member(W, V),
            W=suspension(_,X,_,_,_,Y,_,_),
            get_mutable(active, X),
            W\==Q,
            T<Y,
            C=pragma(rule(Z,_,_,_),_,_,_,F),
            Z\==[],
            \+memberchk_eq(S,O) ->
            '$remove_constraint_internal_multiple_occ_constraints_checked/1'(A, A1),
            (   A1=yes ->
                '$delete_from_store_multiple_occ_constraints_checked/1'(A)
            ;   true
            ),
            '$activate_constraint_prev_guard_list/7'(B1, M),
            (   B1==yes ->
                '$insert_in_store_prev_guard_list/7'(M)
            ;   true
            ),
            first_occ_in_rule(F, S, T, U),
            multiple_occ_constraints_checked([S|O]),
            (   M=suspension(_,C1,_,_,_,_,_,_,_,_),
                get_mutable(active, C1) ->
                chr_runtime:'chr update_mutable'(inactive, C1),
                'prev_guard_list/7__2__1'(B, C, D, E, F, G, H, I, J, K, L, M)
            ;   true
            )
        ;   'prev_guard_list/7__2__1'(B, C, D, E, F, G, H, I, J, K, L, M)
        ).
'prev_guard_list/7__2'(A, B, C, D, E, F, G, H) :-
        'prev_guard_list/7__3'(A, B, C, D, E, F, G, H).
'prev_guard_list/7__3'(_, 0, _, _, _, _, _, A) :-
        hprolog:get_store('$chr_store_global_ground_chr_translate:multiple_occ_constraints_checked/1', B),
        member(C, B),
        C=suspension(_,D,_,_),
        get_mutable(active, D), !,
        '$remove_constraint_internal_multiple_occ_constraints_checked/1'(C, E),
        (   E=yes ->
            '$delete_from_store_multiple_occ_constraints_checked/1'(C)
        ;   true
        ),
        (   var(A) ->
            true
        ;   '$remove_constraint_internal_prev_guard_list/7'(A, F),
            (   F=yes ->
                '$delete_from_store_prev_guard_list/7'(A)
            ;   true
            )
        ).
'prev_guard_list/7__3'(_, _, _, _, _, _, _, A) :-
        '$activate_constraint_prev_guard_list/7'(B, A),
        (   B==yes ->
            '$insert_in_store_prev_guard_list/7'(A)
        ;   true
        ).
simplify_guards(A) :-
        '$via1_multi_hash_rule/2-1'(A, B),
        member(C, B),
        C=suspension(_,D,_,_,E),
        get_mutable(active, D), !,
        E=pragma(rule(F,G,H,_),_,_,_,A),
        append(F, G, I),
        make_head_matchings_explicit_not_negated(I, J, K),
        add_guard_to_head(I, H, L),
        M is A-1,
        prev_guard_list(A, M, J, H, [], K, [L]),
        multiple_occ_constraints_checked([]),
        N is A+1,
        simplify_guards(N).
simplify_guards(_).
set_all_passive(A) :-
        'set_all_passive/1__0'(A, _).
'set_all_passive/1__0'(A, B) :-
        '$via1_multi_hash_occurrence/4-3'(A, C), !,
        '$allocate_constraint_set_all_passive/1'(B, A),
        'set_all_passive/1__0__0'(C, A, B).
'set_all_passive/1__0__0'([], A, B) :-
        'set_all_passive/1__1'(A, B).
'set_all_passive/1__0__0'([A|B], C, D) :-
        (   A=suspension(_,E,_,_,_,_,F,G),
            get_mutable(active, E),
            F==C,
            H=t(90,D,A),
            '$novel_production'(D, H),
            '$novel_production'(A, H) ->
            '$extend_history'(D, H),
            '$activate_constraint_set_all_passive/1'(I, D),
            (   I==yes ->
                '$insert_in_store_set_all_passive/1'(D)
            ;   true
            ),
            passive(C, G),
            (   D=suspension(_,J,_,_),
                get_mutable(active, J) ->
                chr_runtime:'chr update_mutable'(inactive, J),
                'set_all_passive/1__0__0'(B, C, D)
            ;   true
            )
        ;   'set_all_passive/1__0__0'(B, C, D)
        ).
'set_all_passive/1__0'(A, B) :-
        '$allocate_constraint_set_all_passive/1'(B, A),
        'set_all_passive/1__1'(A, B).
'set_all_passive/1__1'(_, A) :-
        (   var(A) ->
            true
        ;   '$remove_constraint_internal_set_all_passive/1'(A, B),
            (   B=yes ->
                '$delete_from_store_set_all_passive/1'(A)
            ;   true
            )
        ).
first_occ_in_rule(A, B, C, _) :-
        '$via1_multi_hash_occurrence/4-13'(k(B,A), D),
        member(E, D),
        E=suspension(_,F,_,_,_,G,_,H),
        get_mutable(active, F),
        G<C, !,
        first_occ_in_rule(A, B, G, H).
first_occ_in_rule(A, B, C, D) :-
        B=E/F,
        functor(G, E, F),
        next_occ_in_rule(A, B, C, D, [], G).
next_occ_in_rule(A, B, C, D, _, E) :-
        '$via1_multi_hash_occurrence/4-13'(k(B,A), F),
        member(G, F),
        G=suspension(_,H,_,_,_,I,_,J),
        get_mutable(active, H),
        '$via1_multi_hash_passive/2-12'(k(A,J), K),
        member(L, K),
        L=suspension(_,M,_,_,_),
        get_mutable(active, M),
        I is C+1, !,
        next_occ_in_rule(A, B, I, D, _, E).
next_occ_in_rule(A, B, C, D, E, F) :-
        '$via1_multi_hash_prev_guard_list/7-1'(A, G),
        member(H, G),
        H=suspension(_,I,_,_,0,J,K,L,M,_),
        get_mutable(active, I),
        '$via1_multi_hash_occurrence/4-13'(k(B,A), N),
        member(O, N),
        O=suspension(_,P,_,_,_,Q,_,R),
        get_mutable(active, P),
        '$via1_multi_hash_rule/2-1'(A, S),
        member(T, S),
        T=suspension(_,U,_,_,V),
        get_mutable(active, U),
        Q is C+1,
        V=pragma(rule(W,X,K,_),ids(_,_),_,_,A), !,
        append(W, X, Y),
        add_failing_occ(V, Y, J, D, Z, F, M, B, A1),
        (   Z==[chr_pp_void_info] ->
            next_occ_in_rule(A, B, Q, R, E, F)
        ;   append(Z, E, B1),
            add_failing_occ(V, Y, J, R, C1, F, M, B, D1),
            copy_term(L, E1),
            variable_replacement(L, E1, F1),
            copy_with_variable_replacement(L, G1, A1),
            copy_with_variable_replacement(L, H1, D1),
            copy_with_variable_replacement(H1, I1, F1),
            append(B1, G1, J1),
            append(J1, I1, K1),
            copy_with_variable_replacement(M, L1, A1),
            copy_with_variable_replacement(M, M1, D1),
            append(M1, K1, N1),
            append([chr_pp_active_constraint(F)|L1], N1, O1),
            list2conj(C1, P1),
            copy_term((B1,K1,O1,P1,F), (Q1,_,R1,S1,T1)),
            chr_term_variables(Q1-T1, U1),
            flatten_stuff(R1, V1),
            flatten_stuff(S1, W1),
            (   P1\=chr_pp_void_info,
                unify_stuff(U1, V1, W1), !,
                (   guard_entailment:entails_guard(R1, S1) ->
                    passive(A, R)
                ;   true
                )
            ;   true
            ), !,
            next_occ_in_rule(A, B, Q, R, B1, F)
        ).
next_occ_in_rule(_, _, _, _, _, _).
multiple_occ_constraints_checked(A) :-
        chr_pp_flag(occurrence_subsumption, on),
        hprolog:get_store('$chr_store_global_ground_chr_translate:occurrence/4', B),
        member(C, B),
        C=suspension(_,D,_,_,E,F,G,H),
        get_mutable(active, D),
        '$via1_multi_hash_prev_guard_list/7-1'(G, I),
        member(J, I),
        J=suspension(_,K,_,_,0,_,_,_,_,_),
        get_mutable(active, K),
        '$via1_multi_hash_occurrence/4-13'(k(E,G), L),
        member(M, L),
        M=suspension(_,N,_,_,_,O,_,_),
        get_mutable(active, N),
        M\==C,
        F<O,
        '$via1_multi_hash_rule/2-1'(G, P),
        member(Q, P),
        Q=suspension(_,R,_,_,S),
        get_mutable(active, R),
        S=pragma(rule(T,_,_,_),_,_,_,G),
        T\==[],
        \+memberchk_eq(E,A), !,
        first_occ_in_rule(G, E, F, H),
        multiple_occ_constraints_checked([E|A]).
multiple_occ_constraints_checked(_) :-
        '$via1_multi_hash_prev_guard_list/7-2'(0, A),
        member(B, A),
        B=suspension(_,C,_,_,_,_,_,_,_,_),
        get_mutable(active, C), !,
        '$remove_constraint_internal_prev_guard_list/7'(B, D),
        (   D=yes ->
            '$delete_from_store_prev_guard_list/7'(B)
        ;   true
        ).
multiple_occ_constraints_checked(A) :-
        '$insert_constraint_internal_multiple_occ_constraints_checked/1'(B, A),
        '$insert_in_store_multiple_occ_constraints_checked/1'(B).
type_definition(A, B) :-
        '$insert_constraint_internal_type_definition/2'(_, C, D, A, B),
        '$insert_in_store_type_definition/2'(D),
        'attach_type_definition/2'(C, D).
type_alias(A, B) :-
        'type_alias/2__0'(A, B, _).
'type_alias/2__0'(A, B, C) :-
        nonvar(B),
        nonvar(A),
        functor(A, D, E),
        functor(B, D, E),
        copy_term((A,B), (F,G)),
        oneway_unification(G, F), !,
        (   var(C) ->
            true
        ;   '$remove_constraint_internal_type_alias/2'(C, H, I),
            (   I==yes ->
                '$delete_from_store_type_alias/2'(C),
                'detach_type_alias/2'(H, C)
            ;   true
            )
        ),
        chr_error(type_error, 'Cyclic alias definition: "~w".\n', [A==B]).
'type_alias/2__0'(A, B, C) :-
        nonvar(A),
        hprolog:get_store('$chr_store_global_list_chr_translate:type_alias/2', D),
        member(E, D),
        E=suspension(_,F,_,_,_,G,H),
        get_mutable(active, F),
        nonvar(G),
        functor(A, I, J),
        functor(G, I, J),
        \+A\=G, !,
        '$remove_constraint_internal_type_alias/2'(E, K, L),
        (   L==yes ->
            '$delete_from_store_type_alias/2'(E),
            'detach_type_alias/2'(K, E)
        ;   true
        ),
        (   var(C) ->
            true
        ;   '$remove_constraint_internal_type_alias/2'(C, M, N),
            (   N==yes ->
                '$delete_from_store_type_alias/2'(C),
                'detach_type_alias/2'(M, C)
            ;   true
            )
        ),
        copy_term_nat(A, O),
        copy_term_nat(G, P),
        O=P,
        chr_error(type_error, 'Ambiguous type aliases: you have defined \n             "~w"\n             "~w"\n         resulting in two definitions for "~w".\n', [A==B,G==H,O]).
'type_alias/2__0'(A, B, C) :-
        nonvar(B),
        hprolog:get_store('$chr_store_global_list_chr_translate:type_alias/2', D),
        member(E, D),
        E=suspension(_,F,_,_,_,G,H),
        get_mutable(active, F),
        nonvar(G),
        functor(G, I, J),
        functor(B, I, J),
        copy_term_nat((A,B,G,H), (K,L,M,N)),
        oneway_unification(L, M), !,
        (   var(C) ->
            true
        ;   '$remove_constraint_internal_type_alias/2'(C, O, P),
            (   P==yes ->
                '$delete_from_store_type_alias/2'(C),
                'detach_type_alias/2'(O, C)
            ;   true
            )
        ),
        chr_info(type_information, 'Inferring "~w" from "~w" and "~w".\n', [K==N,A==B,G==H]),
        type_alias(K, N).
'type_alias/2__0'(A, B, C) :-
        hprolog:get_store('$chr_store_global_list_chr_translate:type_alias/2', D), !,
        (   var(C) ->
            '$allocate_constraint_type_alias/2'(chr_translate:'type_alias/2__0'(A,B,C), C, A, B)
        ;   true
        ),
        'type_alias/2__0__0'(D, A, B, C).
'type_alias/2__0__0'([], A, B, C) :-
        'type_alias/2__1'(A, B, C).
'type_alias/2__0__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,_,_,G,H),
            get_mutable(active, F),
            nonvar(H),
            nonvar(C),
            functor(C, I, J),
            functor(H, I, J),
            copy_term_nat((G,H,C,D), (K,L,M,N)),
            oneway_unification(L, M) ->
            '$remove_constraint_internal_type_alias/2'(A, O, P),
            (   P==yes ->
                '$delete_from_store_type_alias/2'(A),
                'detach_type_alias/2'(O, A)
            ;   true
            ),
            '$activate_constraint_type_alias/2'(Q, R, E, S),
            (   Q==yes ->
                '$insert_in_store_type_alias/2'(E),
                'attach_type_alias/2'(R, E)
            ;   true
            ),
            chr_info(type_information, 'Inferring "~w" from "~w" and "~w".\n', [K==N,G==H,C==D]),
            type_alias(K, N),
            (   E=suspension(_,T,U,_,_,_,_),
                get_mutable(active, T),
                get_mutable(S, U) ->
                chr_runtime:'chr update_mutable'(inactive, T),
                'type_alias/2__0__0'(B, C, D, E)
            ;   true
            )
        ;   'type_alias/2__0__0'(B, C, D, E)
        ).
'type_alias/2__0'(A, B, C) :-
        (   var(C) ->
            '$allocate_constraint_type_alias/2'(chr_translate:'type_alias/2__0'(A,B,C), C, A, B)
        ;   true
        ),
        'type_alias/2__1'(A, B, C).
'type_alias/2__1'(_, _, A) :-
        '$activate_constraint_type_alias/2'(B, C, A, _),
        (   B==yes ->
            '$insert_in_store_type_alias/2'(A),
            'attach_type_alias/2'(C, A)
        ;   true
        ).
constraint_type(A, B) :-
        '$insert_constraint_internal_constraint_type/2'(C, A, B),
        '$insert_in_store_constraint_type/2'(C).
get_type_definition(A, _) :-
        \+ground(A), !,
        chr_error(type_error, 'Non-ground type in constraint definition: "~w".\n', [A]).
get_type_definition(A, B) :-
        hprolog:get_store('$chr_store_global_list_chr_translate:type_alias/2', C),
        member(D, C),
        D=suspension(_,E,_,_,_,F,G),
        get_mutable(active, E),
        nonvar(F),
        functor(F, H, I),
        functor(A, H, I),
        copy_term_nat((F,G), (J,K)),
        J=A, !,
        (   get_type_definition(K, B) ->
            true
        ;   chr_error(type_error, 'Could not find type definition for "~w" (accessed via alias "~w").\n', [K,J]),
            fail
        ).
get_type_definition(A, B) :-
        hprolog:get_store('$chr_store_global_list_chr_translate:type_definition/2', C),
        member(D, C),
        D=suspension(_,E,_,F,G),
        get_mutable(active, E),
        nonvar(F),
        functor(F, H, I),
        functor(A, H, I),
        copy_term_nat((F,G), (J,K)),
        J=A, !,
        B=K.
get_type_definition(A, B) :-
        builtin_type(A, _, _), !,
        B=[A].
get_type_definition(_, _) :-
        fail.
get_constraint_type(A, B) :-
        '$via1_multi_hash_constraint_type/2-1'(A, C),
        member(D, C),
        D=suspension(_,E,_,F),
        get_mutable(active, E), !,
        B=F.
get_constraint_type(_, _) :-
        fail.
add_type_information([], [], A) :- !,
        A=true.
add_type_information([A|B], [C|D], E) :-
        hprolog:get_store('$chr_store_global_ground_chr_translate:constraint_mode/2', F),
        member(G, F),
        G=suspension(_,H,_,I/J,K),
        get_mutable(active, H),
        functor(A, I, J), !,
        A=..[_|L],
        C=..[_|M],
        add_mode_info(K, L, N),
        E=(N,O),
        (   get_constraint_type(I/J, P) ->
            types2condition(P, L, M, K, Q),
            list2conj(Q, R),
            O=(R,S),
            add_type_information(B, D, S)
        ;   add_type_information(B, D, O)
        ).
add_type_information([A|_], _, _) :- !,
        functor(A, B, C),
        chr_error(internal, [['Mode information missing for ~w.'-[B/C]]]).
add_type_information(A, B, C) :-
        '$insert_constraint_internal_add_type_information/3'(D, A, B, C),
        '$insert_in_store_add_type_information/3'(D).
stored(A, B, yes) :-
        '$via1_multi_hash_occurrence/4-12'(k(A,B), C),
        member(D, C),
        D=suspension(_,E,_,_,_,_,F,G),
        get_mutable(active, E),
        '$via1_multi_hash_stored_complete/3-1'(A, H),
        member(I, H),
        I=suspension(_,J,_,_,K,L),
        get_mutable(active, J),
        B<K,
        '$via1_multi_hash_passive/2-12'(k(F,G), M),
        member(N, M),
        N=suspension(_,O,_,_,_),
        get_mutable(active, O), !,
        '$remove_constraint_internal_stored_complete/3'(I, P),
        (   P=yes ->
            '$delete_from_store_stored_complete/3'(I)
        ;   true
        ),
        Q is L-1,
        stored(A, B, maybe),
        stored_complete(A, K, Q).
stored(A, B, yes) :-
        '$via1_multi_hash_ai_not_observed/2-12'(k(A,B), C),
        member(D, C),
        D=suspension(_,E,_,_),
        get_mutable(active, E),
        '$via1_multi_hash_stored_complete/3-1'(A, F),
        member(G, F),
        G=suspension(_,H,_,_,I,J),
        get_mutable(active, H),
        B<I, !,
        '$remove_constraint_internal_stored_complete/3'(G, K),
        (   K=yes ->
            '$delete_from_store_stored_complete/3'(G)
        ;   true
        ),
        L is J-1,
        stored(A, B, maybe),
        stored_complete(A, I, L).
stored(A, B, C) :-
        '$insert_constraint_internal_stored/3'(D, A, B, C),
        '$insert_in_store_stored/3'(D).
stored_completing(A, B, C) :-
        '$via1_multi_hash_stored/3-12'(k(A,B), D),
        member(E, D),
        E=suspension(_,F,_,_,yes),
        get_mutable(active, F), !,
        G is B+1,
        H is C+1,
        stored_completing(A, G, H).
stored_completing(A, B, C) :-
        '$via1_multi_hash_stored/3-12'(k(A,B), D),
        member(E, D),
        E=suspension(_,F,_,_,maybe),
        get_mutable(active, F), !,
        G is B+1,
        stored_completing(A, G, C).
stored_completing(A, B, C) :-
        '$via1_multi_hash_stored/3-12'(k(A,B), D),
        member(E, D),
        E=suspension(_,F,_,_,no),
        get_mutable(active, F), !,
        stored_complete(A, B, C).
stored_completing(A, B, C) :-
        stored_complete(A, B, C).
stored_complete(A, B, C) :-
        'stored_complete/3__0'(A, B, C, _).
'stored_complete/3__0'(A, B, C, _) :-
        '$via1_multi_hash_occurrence/4-1'(A, D),
        member(E, D),
        E=suspension(_,F,_,_,_,G,H,I),
        get_mutable(active, F),
        G<B,
        '$via1_multi_hash_passive/2-12'(k(H,I), J),
        member(K, J),
        K=suspension(_,L,_,_,_),
        get_mutable(active, L),
        '$via1_multi_hash_stored/3-12'(k(A,G), M),
        member(N, M),
        N=suspension(_,O,_,_,yes),
        get_mutable(active, O), !,
        '$remove_constraint_internal_stored/3'(N, P),
        (   P=yes ->
            '$delete_from_store_stored/3'(N)
        ;   true
        ),
        Q is C-1,
        stored(A, G, maybe),
        stored_complete(A, B, Q).
'stored_complete/3__0'(A, B, C, _) :-
        '$via1_multi_hash_stored/3-1'(A, D),
        member(E, D),
        E=suspension(_,F,_,G,yes),
        get_mutable(active, F),
        G<B,
        '$via1_multi_hash_ai_not_observed/2-12'(k(A,G), H),
        member(I, H),
        I=suspension(_,J,_,_),
        get_mutable(active, J), !,
        '$remove_constraint_internal_stored/3'(E, K),
        (   K=yes ->
            '$delete_from_store_stored/3'(E)
        ;   true
        ),
        L is C-1,
        stored(A, G, maybe),
        stored_complete(A, B, L).
'stored_complete/3__0'(A, B, 0, C) :-
        '$via1_multi_hash_max_occurrence/2-1'(A, D), !,
        '$allocate_constraint_stored_complete/3'(C, A, B, 0),
        'stored_complete/3__0__0'(D, A, B, 0, C).
'stored_complete/3__0__0'([], A, B, C, D) :-
        'stored_complete/3__1'(A, B, C, D).
'stored_complete/3__0__0'([A|B], C, D, E, F) :-
        (   A=suspension(_,G,_,H,I),
            get_mutable(active, G),
            H==C,
            '$via1_multi_hash_occurrence/4-1'(C, J) ->
            'stored_complete/3__0__1'(J, I, A, B, C, D, E, F)
        ;   'stored_complete/3__0__0'(B, C, D, E, F)
        ).
'stored_complete/3__0__1'([], _, _, A, B, C, D, E) :-
        'stored_complete/3__0__0'(A, B, C, D, E).
'stored_complete/3__0__1'([A|B], C, D, E, F, G, H, I) :-
        (   A=suspension(_,J,_,_,K,_,L,_),
            get_mutable(active, J),
            K==F,
            '$via1_multi_hash_occurrence/4-3'(L, M) ->
            'stored_complete/3__0__2'(M, L, A, B, C, D, E, F, G, H, I)
        ;   'stored_complete/3__0__1'(B, C, D, E, F, G, H, I)
        ).
'stored_complete/3__0__2'([], _, _, A, B, C, D, E, F, G, H) :-
        'stored_complete/3__0__1'(A, B, C, D, E, F, G, H).
'stored_complete/3__0__2'([A|B], C, D, E, F, G, H, I, J, K, L) :-
        (   A=suspension(_,M,_,_,_,_,N,O),
            get_mutable(active, M),
            A\==D,
            N==C,
            P=t(115,A,D,L,G),
            '$novel_production'(A, P),
            '$novel_production'(D, P),
            '$novel_production'(L, P),
            '$novel_production'(G, P),
            J=<F ->
            '$extend_history'(L, P),
            '$activate_constraint_stored_complete/3'(Q, L),
            (   Q==yes ->
                '$insert_in_store_stored_complete/3'(L)
            ;   true
            ),
            passive(C, O),
            (   L=suspension(_,R,_,_,_,_),
                get_mutable(active, R) ->
                chr_runtime:'chr update_mutable'(inactive, R),
                'stored_complete/3__0__2'(B, C, D, E, F, G, H, I, J, K, L)
            ;   true
            )
        ;   'stored_complete/3__0__2'(B, C, D, E, F, G, H, I, J, K, L)
        ).
'stored_complete/3__0'(A, B, C, D) :-
        '$allocate_constraint_stored_complete/3'(D, A, B, C),
        'stored_complete/3__1'(A, B, C, D).
'stored_complete/3__1'(A, B, C, D) :-
        '$via1_multi_hash_occurrence/4-1'(A, E), !,
        'stored_complete/3__1__0'(E, A, B, C, D).
'stored_complete/3__1__0'([], A, B, C, D) :-
        'stored_complete/3__2'(A, B, C, D).
'stored_complete/3__1__0'([A|B], C, D, E, F) :-
        (   A=suspension(_,G,_,_,H,I,J,K),
            get_mutable(active, G),
            H==C,
            L=t(124,F,A),
            '$novel_production'(F, L),
            '$novel_production'(A, L),
            I>D ->
            '$extend_history'(F, L),
            '$activate_constraint_stored_complete/3'(M, F),
            (   M==yes ->
                '$insert_in_store_stored_complete/3'(F)
            ;   true
            ),
            passive(J, K),
            (   F=suspension(_,N,_,_,_,_),
                get_mutable(active, N) ->
                chr_runtime:'chr update_mutable'(inactive, N),
                'stored_complete/3__1__0'(B, C, D, E, F)
            ;   true
            )
        ;   'stored_complete/3__1__0'(B, C, D, E, F)
        ).
'stored_complete/3__1'(A, B, C, D) :-
        'stored_complete/3__2'(A, B, C, D).
'stored_complete/3__2'(_, _, _, A) :-
        '$activate_constraint_stored_complete/3'(B, A),
        (   B==yes ->
            '$insert_in_store_stored_complete/3'(A)
        ;   true
        ).
is_stored(A) :-
        '$via1_multi_hash_max_occurrence/2-1'(A, B),
        member(C, B),
        C=suspension(_,D,_,_,E),
        get_mutable(active, D),
        '$via1_multi_hash_stored_complete/3-1'(A, F),
        member(G, F),
        G=suspension(_,H,_,_,I,0),
        get_mutable(active, H),
        I=<E, !,
        fail.
is_stored(_).
is_finally_stored(A) :-
        '$via1_multi_hash_max_occurrence/2-1'(A, B),
        member(C, B),
        C=suspension(_,D,_,_,E),
        get_mutable(active, D),
        '$via1_multi_hash_stored_complete/3-1'(A, F),
        member(G, F),
        G=suspension(_,H,_,_,I,_),
        get_mutable(active, H),
        I=<E, !,
        fail.
is_finally_stored(_).
check_all_passive(A, [B|C]) :-
        '$via1_multi_hash_passive/2-12'(k(A,B), D),
        member(E, D),
        E=suspension(_,F,_,_,_),
        get_mutable(active, F), !,
        check_all_passive(A, C).
check_all_passive(A, []) :-
        '$via1_multi_hash_rule/2-1'(A, B),
        member(C, B),
        C=suspension(_,D,_,_,E),
        get_mutable(active, D), !,
        generate_format_rule(E, F, ['.'-[]]),
        chr_warning(weird_program, [['All heads passive in '-[]|F],['\tThis rule never fires. Please check your program.'-[]]]).
check_all_passive(A, B) :-
        '$insert_constraint_internal_check_all_passive/2'(C, A, B),
        '$insert_in_store_check_all_passive/2'(C).
constraints_code1([], A, B) :- !,
        A=B.
constraints_code1([A|B], C, D) :- !,
        constraint_code(A, C, E),
        constraints_code1(B, E, D).
constraints_code1(A, B, C) :-
        '$insert_constraint_internal_constraints_code1/3'(D, A, B, C),
        '$insert_in_store_constraints_code1/3'(D).
constraint_code(A, B, C) :-
        (   (   chr_pp_flag(debugable, on)
            ;   is_stored(A),
                (   has_active_occurrence(A)
                ;   chr_pp_flag(late_allocation, off)
                ),
                (   may_trigger(A)
                ;   get_allocation_occurrence(A, D),
                    get_max_occurrence(A, E),
                    E>=D
                )
            ) ->
            constraint_prelude(A, F),
            B=[F|G]
        ;   B=G
        ),
        H=[0],
        occurrences_code(A, 1, H, I, G, J),
        gen_cond_attach_clause(A, I, J, C).
has_active_occurrence(A) :-
        has_active_occurrence(A, 1).
has_active_occurrence(A, B) :-
        '$via1_multi_hash_max_occurrence/2-1'(A, C),
        member(D, C),
        D=suspension(_,E,_,_,F),
        get_mutable(active, E),
        B>F, !,
        fail.
has_active_occurrence(A, B) :-
        '$via1_multi_hash_occurrence/4-12'(k(A,B), C),
        member(D, C),
        D=suspension(_,E,_,_,_,_,F,G),
        get_mutable(active, E),
        '$via1_multi_hash_passive/2-12'(k(F,G), H),
        member(I, H),
        I=suspension(_,J,_,_,_),
        get_mutable(active, J), !,
        K is B+1,
        has_active_occurrence(A, K).
has_active_occurrence(_, _).
use_auxiliary_predicate(A) :-
        '$via1_multi_hash_use_auxiliary_predicate/1-1'(A, B),
        member(C, B),
        C=suspension(_,D,_),
        get_mutable(active, D), !.
use_auxiliary_predicate(A) :-
        '$insert_constraint_internal_use_auxiliary_predicate/1'(B, A),
        '$insert_in_store_use_auxiliary_predicate/1'(B).
use_auxiliary_predicate(A, B) :-
        '$via1_multi_hash_use_auxiliary_predicate/2-12'(k(A,B), C),
        member(D, C),
        D=suspension(_,E,_,_),
        get_mutable(active, E), !.
use_auxiliary_predicate(A, B) :-
        '$insert_constraint_internal_use_auxiliary_predicate/2'(C, A, B),
        '$insert_in_store_use_auxiliary_predicate/2'(C).
is_used_auxiliary_predicate(A) :-
        '$via1_multi_hash_use_auxiliary_predicate/1-1'(A, B),
        member(C, B),
        C=suspension(_,D,_),
        get_mutable(active, D), !.
is_used_auxiliary_predicate(A) :-
        '$via1_multi_hash_use_auxiliary_predicate/2-1'(A, B),
        member(C, B),
        C=suspension(_,D,_,_),
        get_mutable(active, D), !.
is_used_auxiliary_predicate(_) :-
        fail.
is_used_auxiliary_predicate(A, _) :-
        '$via1_multi_hash_use_auxiliary_predicate/1-1'(A, B),
        member(C, B),
        C=suspension(_,D,_),
        get_mutable(active, D), !.
is_used_auxiliary_predicate(A, B) :-
        '$via1_multi_hash_use_auxiliary_predicate/2-12'(k(A,B), C),
        member(D, C),
        D=suspension(_,E,_,_),
        get_mutable(active, E), !.
is_used_auxiliary_predicate(_, _) :-
        fail.
occurrences_code(A, B, C, D, E, F) :-
        '$via1_multi_hash_max_occurrence/2-1'(A, G),
        member(H, G),
        H=suspension(_,I,_,_,J),
        get_mutable(active, I),
        B>J, !,
        D=C,
        E=F.
occurrences_code(A, B, C, D, E, F) :-
        occurrence_code(A, B, C, G, E, H),
        I is B+1,
        occurrences_code(A, I, G, D, H, F).
occurrence_code(A, B, C, D, E, F) :-
        '$via1_multi_hash_occurrence/4-12'(k(A,B), G),
        member(H, G),
        H=suspension(_,I,_,_,_,_,J,K),
        get_mutable(active, I),
        '$via1_multi_hash_passive/2-12'(k(J,K), L),
        member(M, L),
        M=suspension(_,N,_,_,_),
        get_mutable(active, N), !,
        D=C,
        E=F.
occurrence_code(A, B, C, D, E, F) :-
        '$via1_multi_hash_occurrence/4-12'(k(A,B), G),
        member(H, G),
        H=suspension(_,I,_,_,_,_,J,K),
        get_mutable(active, I),
        '$via1_multi_hash_rule/2-1'(J, L),
        member(M, L),
        M=suspension(_,N,_,_,O),
        get_mutable(active, N), !,
        O=pragma(rule(P,Q,_,_),ids(R,S),_,_,_),
        (   select2(K, T, R, P, U, V) ->
            D=C,
            head1_code(T, V, U, O, A, B, C, E, F)
        ;   select2(K, W, S, Q, X, Y) ->
            head2_code(W, Y, X, O, A, B, C, E, Z),
            inc_id(C, D),
            (   unconditional_occurrence(A, B) ->
                Z=F
            ;   gen_alloc_inc_clause(A, B, C, Z, F)
            )
        ).
occurrence_code(A, B, _, _, _, _) :-
        chr_error(internal, [['occurrence_code/6: missing information to compile ~w:~w'-[A,B]]]).
functional_dependency(A, B, C, D) :-
        B>1,
        '$via1_multi_hash_occurrence/4-13'(k(A,B), E),
        member(F, E),
        F=suspension(_,G,_,_,_,H,_,_),
        get_mutable(active, G),
        '$via1_multi_hash_allocation_occurrence/2-1'(A, I),
        member(J, I),
        J=suspension(_,K,_,L),
        get_mutable(active, K),
        L>H, !,
        functional_dependency(A, 1, C, D).
functional_dependency(A, B, C, D) :-
        '$insert_constraint_internal_functional_dependency/4'(E, A, B, C, D),
        '$insert_in_store_functional_dependency/4'(E).
get_functional_dependency(A, B, C, D) :-
        '$via1_multi_hash_functional_dependency/4-1'(A, E),
        member(F, E),
        F=suspension(_,G,_,H,I,J),
        get_mutable(active, G),
        B>=H, !,
        C=I,
        D=J.
get_functional_dependency(_, _, _, _) :-
        fail.
initial_call_pattern(A) :-
        'initial_call_pattern/1__0'(A, _).
'initial_call_pattern/1__0'(A, _) :-
        '$via1_multi_hash_initial_call_pattern/1-1'(A, B),
        member(C, B),
        C=suspension(_,D,_,_,_),
        get_mutable(active, D), !.
'initial_call_pattern/1__0'(A, B) :-
        '$allocate_constraint_initial_call_pattern/1'(B, A),
        '$activate_constraint_initial_call_pattern/1'(C, B),
        (   C==yes ->
            '$insert_in_store_initial_call_pattern/1'(B)
        ;   true
        ),
        call_pattern(A),
        (   B=suspension(_,D,_,_,_),
            get_mutable(active, D) ->
            chr_runtime:'chr update_mutable'(inactive, D),
            'initial_call_pattern/1__1'(A, B)
        ;   true
        ).
'initial_call_pattern/1__1'(A, B) :-
        '$via1_multi_hash_final_answer_pattern/2-1'(A, C), !,
        'initial_call_pattern/1__1__0'(C, A, B).
'initial_call_pattern/1__1__0'([], A, B) :-
        'initial_call_pattern/1__2'(A, B).
'initial_call_pattern/1__1__0'([A|B], C, D) :-
        (   A=suspension(_,E,_,F,G),
            get_mutable(active, E),
            F==C,
            hprolog:get_store('$chr_store_global_ground_chr_translate:abstract_constraints/1', H) ->
            'initial_call_pattern/1__1__1'(H, G, A, B, C, D)
        ;   'initial_call_pattern/1__1__0'(B, C, D)
        ).
'initial_call_pattern/1__1__1'([], _, _, A, B, C) :-
        'initial_call_pattern/1__1__0'(A, B, C).
'initial_call_pattern/1__1__1'([A|B], C, D, E, F, G) :-
        (   A=suspension(_,H,_,_,I),
            get_mutable(active, H),
            J=t(163,G,D,A),
            '$novel_production'(G, J),
            '$novel_production'(D, J),
            '$novel_production'(A, J) ->
            '$extend_history'(G, J),
            '$activate_constraint_initial_call_pattern/1'(K, G),
            (   K==yes ->
                '$insert_in_store_initial_call_pattern/1'(G)
            ;   true
            ),
            ai_observation_schedule_new_calls(I, C),
            (   G=suspension(_,L,_,_,_),
                get_mutable(active, L) ->
                chr_runtime:'chr update_mutable'(inactive, L),
                'initial_call_pattern/1__1__1'(B, C, D, E, F, G)
            ;   true
            )
        ;   'initial_call_pattern/1__1__1'(B, C, D, E, F, G)
        ).
'initial_call_pattern/1__1'(A, B) :-
        'initial_call_pattern/1__2'(A, B).
'initial_call_pattern/1__2'(_, A) :-
        '$activate_constraint_initial_call_pattern/1'(B, A),
        (   B==yes ->
            '$insert_in_store_initial_call_pattern/1'(A)
        ;   true
        ).
call_pattern(A) :-
        'call_pattern/1__0'(A, _).
'call_pattern/1__0'(A, _) :-
        '$via1_multi_hash_call_pattern/1-1'(A, B),
        member(C, B),
        C=suspension(_,D,_,_,_),
        get_mutable(active, D), !.
'call_pattern/1__0'(A, B) :-
        A=odom(C,D),
        C=[],
        '$allocate_constraint_call_pattern/1'(B, A), !,
        '$activate_constraint_call_pattern/1'(E, B),
        (   E==yes ->
            '$insert_in_store_call_pattern/1'(B)
        ;   true
        ),
        final_answer_pattern(odom([],D), odom([],D)),
        (   B=suspension(_,F,_,_,_),
            get_mutable(active, F) ->
            chr_runtime:'chr update_mutable'(inactive, F),
            'call_pattern/1__1'(A, B)
        ;   true
        ).
'call_pattern/1__0'(A, B) :-
        '$allocate_constraint_call_pattern/1'(B, A),
        'call_pattern/1__1'(A, B).
'call_pattern/1__1'(A, B) :-
        A=odom(C,D),
        C=[E|F], !,
        '$activate_constraint_call_pattern/1'(G, B),
        (   G==yes ->
            '$insert_in_store_call_pattern/1'(B)
        ;   true
        ),
        H=odom(E,D),
        depends_on_goal(odom([E|F],D), H),
        call_pattern(H),
        (   B=suspension(_,I,_,_,_),
            get_mutable(active, I) ->
            chr_runtime:'chr update_mutable'(inactive, I),
            'call_pattern/1__2'(A, B)
        ;   true
        ).
'call_pattern/1__1'(A, B) :-
        'call_pattern/1__2'(A, B).
'call_pattern/1__2'(A, B) :-
        A=odom(C,D),
        C=builtin, !,
        '$activate_constraint_call_pattern/1'(E, B),
        (   E==yes ->
            '$insert_in_store_call_pattern/1'(B)
        ;   true
        ),
        ord_empty(F),
        final_answer_pattern(odom(builtin,D), odom([],F)),
        (   B=suspension(_,G,_,_,_),
            get_mutable(active, G) ->
            chr_runtime:'chr update_mutable'(inactive, G),
            'call_pattern/1__3'(A, B)
        ;   true
        ).
'call_pattern/1__2'(A, B) :-
        'call_pattern/1__3'(A, B).
'call_pattern/1__3'(A, B) :-
        A=odom(C,D),
        C=occ(E,F),
        '$via1_multi_hash_max_occurrence/2-1'(E, G), !,
        'call_pattern/1__3__0'(G, A, B, E, F, D).
'call_pattern/1__3__0'([], A, B, _, _, _) :-
        'call_pattern/1__4'(A, B).
'call_pattern/1__3__0'([A|B], C, D, E, F, G) :-
        (   A=suspension(_,H,_,I,J),
            get_mutable(active, H),
            I==E,
            K=t(171,D,A),
            '$novel_production'(D, K),
            '$novel_production'(A, K),
            F>J ->
            '$extend_history'(D, K),
            '$activate_constraint_call_pattern/1'(L, D),
            (   L==yes ->
                '$insert_in_store_call_pattern/1'(D)
            ;   true
            ),
            final_answer_pattern(odom(occ(E,F),G), odom([],G)),
            (   D=suspension(_,M,_,_,_),
                get_mutable(active, M) ->
                chr_runtime:'chr update_mutable'(inactive, M),
                'call_pattern/1__3__0'(B, C, D, E, F, G)
            ;   true
            )
        ;   'call_pattern/1__3__0'(B, C, D, E, F, G)
        ).
'call_pattern/1__3'(A, B) :-
        'call_pattern/1__4'(A, B).
'call_pattern/1__4'(A, B) :-
        A=odom(C,D),
        hprolog:get_store('$chr_store_global_ground_chr_translate:abstract_constraints/1', E), !,
        'call_pattern/1__4__0'(E, A, B, C, D).
'call_pattern/1__4__0'([], A, B, _, _) :-
        'call_pattern/1__5'(A, B).
'call_pattern/1__4__0'([A|B], C, D, E, F) :-
        (   A=suspension(_,G,_,_,H),
            get_mutable(active, G),
            I=t(172,D,A),
            '$novel_production'(D, I),
            '$novel_production'(A, I),
            memberchk_eq(E, H) ->
            '$extend_history'(D, I),
            '$activate_constraint_call_pattern/1'(J, D),
            (   J==yes ->
                '$insert_in_store_call_pattern/1'(D)
            ;   true
            ),
            K=odom(occ(E,1),F),
            call_pattern(K),
            depends_on(odom(E,F), K),
            (   D=suspension(_,L,_,_,_),
                get_mutable(active, L) ->
                chr_runtime:'chr update_mutable'(inactive, L),
                'call_pattern/1__4__0'(B, C, D, E, F)
            ;   true
            )
        ;   'call_pattern/1__4__0'(B, C, D, E, F)
        ).
'call_pattern/1__4'(A, B) :-
        'call_pattern/1__5'(A, B).
'call_pattern/1__5'(A, B) :-
        A=odom(C,D),
        C=occ(E,F),
        '$via1_multi_hash_occurrence/4-12'(k(E,F), G), !,
        'call_pattern/1__5__0'(G, A, B, E, F, D).
'call_pattern/1__5__0'([], A, B, _, _, _) :-
        'call_pattern/1__6'(A, B).
'call_pattern/1__5__0'([A|B], C, D, E, F, G) :-
        (   A=suspension(_,H,_,_,I,J,K,L),
            get_mutable(active, H),
            I==E,
            J==F,
            '$via1_multi_hash_rule/2-1'(K, M) ->
            'call_pattern/1__5__1'(M, K, L, A, B, C, D, E, F, G)
        ;   'call_pattern/1__5__0'(B, C, D, E, F, G)
        ).
'call_pattern/1__5__1'([], _, _, _, A, B, C, D, E, F) :-
        'call_pattern/1__5__0'(A, B, C, D, E, F).
'call_pattern/1__5__1'([A|B], C, D, E, F, G, H, I, J, K) :-
        (   A=suspension(_,L,_,M,N),
            get_mutable(active, L),
            M==C,
            hprolog:get_store('$chr_store_global_ground_chr_translate:abstract_constraints/1', O) ->
            'call_pattern/1__5__2'(O, N, A, B, C, D, E, F, G, H, I, J, K)
        ;   'call_pattern/1__5__1'(B, C, D, E, F, G, H, I, J, K)
        ).
'call_pattern/1__5__2'([], _, _, A, B, C, D, E, F, G, H, I, J) :-
        'call_pattern/1__5__1'(A, B, C, D, E, F, G, H, I, J).
'call_pattern/1__5__2'([A|B], C, D, E, F, G, H, I, J, K, L, M, N) :-
        (   A=suspension(_,O,_,_,_),
            get_mutable(active, O),
            P=t(173,K,A,H,D),
            '$novel_production'(K, P),
            '$novel_production'(A, P),
            '$novel_production'(H, P),
            '$novel_production'(D, P),
            C=pragma(rule(_,_,_,_),ids(Q,_),_,_,_),
            memberchk_eq(G, Q),
            is_passive(F, G) ->
            '$extend_history'(K, P),
            '$activate_constraint_call_pattern/1'(R, K),
            (   R==yes ->
                '$insert_in_store_call_pattern/1'(K)
            ;   true
            ),
            S is M+1,
            T=odom(occ(L,S),N),
            call_pattern(T),
            depends_on(odom(occ(L,M),N), T),
            (   K=suspension(_,U,_,_,_),
                get_mutable(active, U) ->
                chr_runtime:'chr update_mutable'(inactive, U),
                'call_pattern/1__5__2'(B, C, D, E, F, G, H, I, J, K, L, M, N)
            ;   true
            )
        ;   'call_pattern/1__5__2'(B, C, D, E, F, G, H, I, J, K, L, M, N)
        ).
'call_pattern/1__5'(A, B) :-
        'call_pattern/1__6'(A, B).
'call_pattern/1__6'(A, B) :-
        A=odom(C,D),
        C=occ(E,F),
        '$via1_multi_hash_occurrence/4-12'(k(E,F), G), !,
        'call_pattern/1__6__0'(G, A, B, E, F, D).
'call_pattern/1__6__0'([], A, B, _, _, _) :-
        'call_pattern/1__7'(A, B).
'call_pattern/1__6__0'([A|B], C, D, E, F, G) :-
        (   A=suspension(_,H,_,_,I,J,K,L),
            get_mutable(active, H),
            I==E,
            J==F,
            '$via1_multi_hash_rule/2-1'(K, M) ->
            'call_pattern/1__6__1'(M, K, L, A, B, C, D, E, F, G)
        ;   'call_pattern/1__6__0'(B, C, D, E, F, G)
        ).
'call_pattern/1__6__1'([], _, _, _, A, B, C, D, E, F) :-
        'call_pattern/1__6__0'(A, B, C, D, E, F).
'call_pattern/1__6__1'([A|B], C, D, E, F, G, H, I, J, K) :-
        (   A=suspension(_,L,_,M,N),
            get_mutable(active, L),
            M==C,
            hprolog:get_store('$chr_store_global_ground_chr_translate:abstract_constraints/1', O) ->
            'call_pattern/1__6__2'(O, N, A, B, C, D, E, F, G, H, I, J, K)
        ;   'call_pattern/1__6__1'(B, C, D, E, F, G, H, I, J, K)
        ).
'call_pattern/1__6__2'([], _, _, A, B, C, D, E, F, G, H, I, J) :-
        'call_pattern/1__6__1'(A, B, C, D, E, F, G, H, I, J).
'call_pattern/1__6__2'([A|B], C, D, E, F, G, H, I, J, K, L, M, N) :-
        (   A=suspension(_,O,_,_,P),
            get_mutable(active, O),
            Q=t(174,K,A,H,D),
            '$novel_production'(K, Q),
            '$novel_production'(A, Q),
            '$novel_production'(H, Q),
            '$novel_production'(D, Q),
            C=pragma(rule(R,S,T,U),ids(V,_),_,_,_),
            memberchk_eq(G, V),
            \+is_passive(F,G) ->
            '$extend_history'(K, Q),
            '$activate_constraint_call_pattern/1'(W, K),
            (   W==yes ->
                '$insert_in_store_call_pattern/1'(K)
            ;   true
            ),
            once(select2(G,_,V,R,_,X)),
            ai_observation_abstract_constraints(X, P, Y),
            ai_observation_observe_list(odom([],N), Y, odom([],Z)),
            ai_observation_abstract_constraints(S, P, A1),
            ai_observation_observe_list(odom([],Z), A1, odom([],B1)),
            ai_observation_abstract_goal_(R, S, T, U, P, C1),
            call_pattern(odom(C1,B1)),
            D1 is M+1,
            E1=odom(occ(L,D1),N),
            call_pattern(E1),
            depends_on_as(odom(occ(L,M),N), odom(C1,B1), E1),
            final_answer_pattern(odom(occ(L,M),N), odom([],N)),
            (   K=suspension(_,F1,_,_,_),
                get_mutable(active, F1) ->
                chr_runtime:'chr update_mutable'(inactive, F1),
                'call_pattern/1__6__2'(B, C, D, E, F, G, H, I, J, K, L, M, N)
            ;   true
            )
        ;   'call_pattern/1__6__2'(B, C, D, E, F, G, H, I, J, K, L, M, N)
        ).
'call_pattern/1__6'(A, B) :-
        'call_pattern/1__7'(A, B).
'call_pattern/1__7'(A, B) :-
        A=odom(C,D),
        C=occ(E,F),
        '$via1_multi_hash_occurrence/4-12'(k(E,F), G), !,
        'call_pattern/1__7__0'(G, A, B, E, F, D).
'call_pattern/1__7__0'([], A, B, _, _, _) :-
        'call_pattern/1__8'(A, B).
'call_pattern/1__7__0'([A|B], C, D, E, F, G) :-
        (   A=suspension(_,H,_,_,I,J,K,L),
            get_mutable(active, H),
            I==E,
            J==F,
            '$via1_multi_hash_rule/2-1'(K, M) ->
            'call_pattern/1__7__1'(M, K, L, A, B, C, D, E, F, G)
        ;   'call_pattern/1__7__0'(B, C, D, E, F, G)
        ).
'call_pattern/1__7__1'([], _, _, _, A, B, C, D, E, F) :-
        'call_pattern/1__7__0'(A, B, C, D, E, F).
'call_pattern/1__7__1'([A|B], C, D, E, F, G, H, I, J, K) :-
        (   A=suspension(_,L,_,M,N),
            get_mutable(active, L),
            M==C,
            hprolog:get_store('$chr_store_global_ground_chr_translate:abstract_constraints/1', O) ->
            'call_pattern/1__7__2'(O, N, A, B, C, D, E, F, G, H, I, J, K)
        ;   'call_pattern/1__7__1'(B, C, D, E, F, G, H, I, J, K)
        ).
'call_pattern/1__7__2'([], _, _, A, B, C, D, E, F, G, H, I, J) :-
        'call_pattern/1__7__1'(A, B, C, D, E, F, G, H, I, J).
'call_pattern/1__7__2'([A|B], C, D, E, F, G, H, I, J, K, L, M, N) :-
        (   A=suspension(_,O,_,_,_),
            get_mutable(active, O),
            P=t(176,K,A,H,D),
            '$novel_production'(K, P),
            '$novel_production'(A, P),
            '$novel_production'(H, P),
            '$novel_production'(D, P),
            C=pragma(rule(_,_,_,_),ids(_,Q),_,_,_),
            memberchk_eq(G, Q),
            is_passive(F, G) ->
            '$extend_history'(K, P),
            '$activate_constraint_call_pattern/1'(R, K),
            (   R==yes ->
                '$insert_in_store_call_pattern/1'(K)
            ;   true
            ),
            S is M+1,
            T=odom(occ(L,S),N),
            call_pattern(T),
            final_answer_pattern(odom(occ(L,M),N), odom([],N)),
            depends_on(odom(occ(L,M),N), T),
            (   K=suspension(_,U,_,_,_),
                get_mutable(active, U) ->
                chr_runtime:'chr update_mutable'(inactive, U),
                'call_pattern/1__7__2'(B, C, D, E, F, G, H, I, J, K, L, M, N)
            ;   true
            )
        ;   'call_pattern/1__7__2'(B, C, D, E, F, G, H, I, J, K, L, M, N)
        ).
'call_pattern/1__7'(A, B) :-
        'call_pattern/1__8'(A, B).
'call_pattern/1__8'(A, B) :-
        A=odom(C,D),
        C=occ(E,F),
        '$via1_multi_hash_occurrence/4-12'(k(E,F), G), !,
        'call_pattern/1__8__0'(G, A, B, E, F, D).
'call_pattern/1__8__0'([], A, B, _, _, _) :-
        'call_pattern/1__9'(A, B).
'call_pattern/1__8__0'([A|B], C, D, E, F, G) :-
        (   A=suspension(_,H,_,_,I,J,K,L),
            get_mutable(active, H),
            I==E,
            J==F,
            '$via1_multi_hash_rule/2-1'(K, M) ->
            'call_pattern/1__8__1'(M, K, L, A, B, C, D, E, F, G)
        ;   'call_pattern/1__8__0'(B, C, D, E, F, G)
        ).
'call_pattern/1__8__1'([], _, _, _, A, B, C, D, E, F) :-
        'call_pattern/1__8__0'(A, B, C, D, E, F).
'call_pattern/1__8__1'([A|B], C, D, E, F, G, H, I, J, K) :-
        (   A=suspension(_,L,_,M,N),
            get_mutable(active, L),
            M==C,
            hprolog:get_store('$chr_store_global_ground_chr_translate:abstract_constraints/1', O) ->
            'call_pattern/1__8__2'(O, N, A, B, C, D, E, F, G, H, I, J, K)
        ;   'call_pattern/1__8__1'(B, C, D, E, F, G, H, I, J, K)
        ).
'call_pattern/1__8__2'([], _, _, A, B, C, D, E, F, G, H, I, J) :-
        'call_pattern/1__8__1'(A, B, C, D, E, F, G, H, I, J).
'call_pattern/1__8__2'([A|B], C, D, E, F, G, H, I, J, K, L, M, N) :-
        (   A=suspension(_,O,_,_,P),
            get_mutable(active, O),
            Q=t(177,K,A,H,D),
            '$novel_production'(K, Q),
            '$novel_production'(A, Q),
            '$novel_production'(H, Q),
            '$novel_production'(D, Q),
            C=pragma(rule(R,S,T,U),ids(_,V),_,_,_),
            memberchk_eq(G, V),
            \+is_passive(F,G) ->
            '$extend_history'(K, Q),
            '$activate_constraint_call_pattern/1'(W, K),
            (   W==yes ->
                '$insert_in_store_call_pattern/1'(K)
            ;   true
            ),
            once(select2(G,_,V,S,_,X)),
            ai_observation_abstract_constraints(X, P, Y),
            ai_observation_observe_list(odom([],N), Y, odom([],Z)),
            ai_observation_abstract_constraints(R, P, A1),
            ai_observation_observe_list(odom([],Z), A1, odom([],B1)),
            ord_add_element(B1, L, C1),
            ai_observation_abstract_goal_(R, S, T, U, P, D1),
            call_pattern(odom(D1,C1)),
            (   ord_memberchk(L, B1) ->
                E1=no
            ;   E1=yes
            ),
            F1 is M+1,
            G1=odom(occ(L,F1),N),
            call_pattern(G1),
            depends_on_ap(odom(occ(L,M),N), odom(D1,C1), G1, E1),
            (   K=suspension(_,H1,_,_,_),
                get_mutable(active, H1) ->
                chr_runtime:'chr update_mutable'(inactive, H1),
                'call_pattern/1__8__2'(B, C, D, E, F, G, H, I, J, K, L, M, N)
            ;   true
            )
        ;   'call_pattern/1__8__2'(B, C, D, E, F, G, H, I, J, K, L, M, N)
        ).
'call_pattern/1__8'(A, B) :-
        'call_pattern/1__9'(A, B).
'call_pattern/1__9'(_, A) :-
        '$activate_constraint_call_pattern/1'(B, A),
        (   B==yes ->
            '$insert_in_store_call_pattern/1'(A)
        ;   true
        ).
final_answer_pattern(A, B) :-
        'final_answer_pattern/2__0'(A, B, _).
'final_answer_pattern/2__0'(A, B, _) :-
        '$via1_multi_hash_final_answer_pattern/2-1'(A, C),
        member(D, C),
        D=suspension(_,E,_,_,F),
        get_mutable(active, E),
        ai_observation_leq(B, F), !.
'final_answer_pattern/2__0'(A, B, C) :-
        '$via1_multi_hash_final_answer_pattern/2-1'(A, D), !,
        'final_answer_pattern/2__0__0'(D, A, B, C).
'final_answer_pattern/2__0__0'([], A, B, C) :-
        'final_answer_pattern/2__1'(A, B, C).
'final_answer_pattern/2__0__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,G,H),
            get_mutable(active, F),
            G==C,
            ai_observation_leq(H, D) ->
            '$remove_constraint_internal_final_answer_pattern/2'(A, I),
            (   I=yes ->
                '$delete_from_store_final_answer_pattern/2'(A)
            ;   true
            ),
            'final_answer_pattern/2__0__0'(B, C, D, E)
        ;   'final_answer_pattern/2__0__0'(B, C, D, E)
        ).
'final_answer_pattern/2__0'(A, B, C) :-
        'final_answer_pattern/2__1'(A, B, C).
'final_answer_pattern/2__1'(A, B, C) :-
        '$via1_multi_hash_initial_call_pattern/1-1'(A, D), !,
        '$allocate_constraint_final_answer_pattern/2'(C, A, B),
        'final_answer_pattern/2__1__0'(D, A, B, C).
'final_answer_pattern/2__1__0'([], A, B, C) :-
        'final_answer_pattern/2__2'(A, B, C).
'final_answer_pattern/2__1__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,_,G),
            get_mutable(active, F),
            G==C,
            hprolog:get_store('$chr_store_global_ground_chr_translate:abstract_constraints/1', H) ->
            'final_answer_pattern/2__1__1'(H, A, B, C, D, E)
        ;   'final_answer_pattern/2__1__0'(B, C, D, E)
        ).
'final_answer_pattern/2__1__1'([], _, A, B, C, D) :-
        'final_answer_pattern/2__1__0'(A, B, C, D).
'final_answer_pattern/2__1__1'([A|B], C, D, E, F, G) :-
        (   A=suspension(_,H,_,_,I),
            get_mutable(active, H),
            J=t(163,C,G,A),
            '$novel_production'(C, J),
            '$novel_production'(G, J),
            '$novel_production'(A, J) ->
            '$extend_history'(G, J),
            '$activate_constraint_final_answer_pattern/2'(K, G),
            (   K==yes ->
                '$insert_in_store_final_answer_pattern/2'(G)
            ;   true
            ),
            ai_observation_schedule_new_calls(I, F),
            (   G=suspension(_,L,_,_,_),
                get_mutable(active, L) ->
                chr_runtime:'chr update_mutable'(inactive, L),
                'final_answer_pattern/2__1__1'(B, C, D, E, F, G)
            ;   true
            )
        ;   'final_answer_pattern/2__1__1'(B, C, D, E, F, G)
        ).
'final_answer_pattern/2__1'(A, B, C) :-
        '$allocate_constraint_final_answer_pattern/2'(C, A, B),
        'final_answer_pattern/2__2'(A, B, C).
'final_answer_pattern/2__2'(A, B, C) :-
        '$via1_multi_hash_depends_on/2-2'(A, D), !,
        'final_answer_pattern/2__2__0'(D, A, B, C).
'final_answer_pattern/2__2__0'([], A, B, C) :-
        'final_answer_pattern/2__3'(A, B, C).
'final_answer_pattern/2__2__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,G,H),
            get_mutable(active, F),
            H==C,
            I=t(165,A,E),
            '$novel_production'(A, I),
            '$novel_production'(E, I) ->
            '$extend_history'(E, I),
            '$activate_constraint_final_answer_pattern/2'(J, E),
            (   J==yes ->
                '$insert_in_store_final_answer_pattern/2'(E)
            ;   true
            ),
            final_answer_pattern(G, D),
            (   E=suspension(_,K,_,_,_),
                get_mutable(active, K) ->
                chr_runtime:'chr update_mutable'(inactive, K),
                'final_answer_pattern/2__2__0'(B, C, D, E)
            ;   true
            )
        ;   'final_answer_pattern/2__2__0'(B, C, D, E)
        ).
'final_answer_pattern/2__2'(A, B, C) :-
        'final_answer_pattern/2__3'(A, B, C).
'final_answer_pattern/2__3'(A, B, C) :-
        '$via1_multi_hash_depends_on_goal/2-2'(A, D), !,
        'final_answer_pattern/2__3__0'(D, A, B, C).
'final_answer_pattern/2__3__0'([], A, B, C) :-
        'final_answer_pattern/2__4'(A, B, C).
'final_answer_pattern/2__3__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,G,H),
            get_mutable(active, F),
            H==C,
            '$via1_multi_hash_depends_on/2-1'(G, I) ->
            'final_answer_pattern/2__3__1'(I, G, A, B, C, D, E)
        ;   'final_answer_pattern/2__3__0'(B, C, D, E)
        ).
'final_answer_pattern/2__3__1'([], _, _, A, B, C, D) :-
        'final_answer_pattern/2__3__0'(A, B, C, D).
'final_answer_pattern/2__3__1'([A|B], C, D, E, F, G, H) :-
        (   A=suspension(_,I,_,J,_),
            get_mutable(active, I),
            J==C ->
            '$remove_constraint_internal_depends_on/2'(A, K),
            (   K=yes ->
                '$delete_from_store_depends_on/2'(A)
            ;   true
            ),
            'final_answer_pattern/2__3__1'(B, C, D, E, F, G, H)
        ;   'final_answer_pattern/2__3__1'(B, C, D, E, F, G, H)
        ).
'final_answer_pattern/2__3'(A, B, C) :-
        'final_answer_pattern/2__4'(A, B, C).
'final_answer_pattern/2__4'(A, B, C) :-
        '$via1_multi_hash_depends_on_goal/2-2'(A, D), !,
        'final_answer_pattern/2__4__0'(D, A, B, C).
'final_answer_pattern/2__4__0'([], A, B, C) :-
        'final_answer_pattern/2__5'(A, B, C).
'final_answer_pattern/2__4__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,G,H),
            get_mutable(active, F),
            H==C,
            I=t(169,A,E),
            '$novel_production'(A, I),
            '$novel_production'(E, I) ->
            '$extend_history'(E, I),
            '$activate_constraint_final_answer_pattern/2'(J, E),
            (   J==yes ->
                '$insert_in_store_final_answer_pattern/2'(E)
            ;   true
            ),
            G=odom([_|K],_),
            D=odom([],L),
            M=odom(K,L),
            call_pattern(M),
            depends_on(G, M),
            (   E=suspension(_,N,_,_,_),
                get_mutable(active, N) ->
                chr_runtime:'chr update_mutable'(inactive, N),
                'final_answer_pattern/2__4__0'(B, C, D, E)
            ;   true
            )
        ;   'final_answer_pattern/2__4__0'(B, C, D, E)
        ).
'final_answer_pattern/2__4'(A, B, C) :-
        'final_answer_pattern/2__5'(A, B, C).
'final_answer_pattern/2__5'(A, B, C) :-
        '$via1_multi_hash_depends_on_as/3-2'(A, D), !,
        'final_answer_pattern/2__5__0'(D, A, B, C).
'final_answer_pattern/2__5__0'([], A, B, C) :-
        'final_answer_pattern/2__6'(A, B, C).
'final_answer_pattern/2__5__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,G,H,I),
            get_mutable(active, F),
            H==C,
            '$via1_multi_hash_final_answer_pattern/2-1'(I, J) ->
            'final_answer_pattern/2__5__1'(J, G, I, A, B, C, D, E)
        ;   'final_answer_pattern/2__5__0'(B, C, D, E)
        ).
'final_answer_pattern/2__5__1'([], _, _, _, A, B, C, D) :-
        'final_answer_pattern/2__5__0'(A, B, C, D).
'final_answer_pattern/2__5__1'([A|B], C, D, E, F, G, H, I) :-
        (   A=suspension(_,J,_,K,L),
            get_mutable(active, J),
            K==D,
            M=t(175,E,I,A),
            '$novel_production'(E, M),
            '$novel_production'(I, M),
            '$novel_production'(A, M) ->
            '$extend_history'(I, M),
            '$activate_constraint_final_answer_pattern/2'(N, I),
            (   N==yes ->
                '$insert_in_store_final_answer_pattern/2'(I)
            ;   true
            ),
            ai_observation_lub(H, L, O),
            final_answer_pattern(C, O),
            (   I=suspension(_,P,_,_,_),
                get_mutable(active, P) ->
                chr_runtime:'chr update_mutable'(inactive, P),
                'final_answer_pattern/2__5__1'(B, C, D, E, F, G, H, I)
            ;   true
            )
        ;   'final_answer_pattern/2__5__1'(B, C, D, E, F, G, H, I)
        ).
'final_answer_pattern/2__5'(A, B, C) :-
        'final_answer_pattern/2__6'(A, B, C).
'final_answer_pattern/2__6'(A, B, C) :-
        '$via1_multi_hash_depends_on_as/3-3'(A, D), !,
        'final_answer_pattern/2__6__0'(D, A, B, C).
'final_answer_pattern/2__6__0'([], A, B, C) :-
        'final_answer_pattern/2__7'(A, B, C).
'final_answer_pattern/2__6__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,G,H,I),
            get_mutable(active, F),
            I==C,
            '$via1_multi_hash_final_answer_pattern/2-1'(H, J) ->
            'final_answer_pattern/2__6__1'(J, G, H, A, B, C, D, E)
        ;   'final_answer_pattern/2__6__0'(B, C, D, E)
        ).
'final_answer_pattern/2__6__1'([], _, _, _, A, B, C, D) :-
        'final_answer_pattern/2__6__0'(A, B, C, D).
'final_answer_pattern/2__6__1'([A|B], C, D, E, F, G, H, I) :-
        (   A=suspension(_,J,_,K,L),
            get_mutable(active, J),
            K==D,
            M=t(175,E,A,I),
            '$novel_production'(E, M),
            '$novel_production'(A, M),
            '$novel_production'(I, M) ->
            '$extend_history'(I, M),
            '$activate_constraint_final_answer_pattern/2'(N, I),
            (   N==yes ->
                '$insert_in_store_final_answer_pattern/2'(I)
            ;   true
            ),
            ai_observation_lub(L, H, O),
            final_answer_pattern(C, O),
            (   I=suspension(_,P,_,_,_),
                get_mutable(active, P) ->
                chr_runtime:'chr update_mutable'(inactive, P),
                'final_answer_pattern/2__6__1'(B, C, D, E, F, G, H, I)
            ;   true
            )
        ;   'final_answer_pattern/2__6__1'(B, C, D, E, F, G, H, I)
        ).
'final_answer_pattern/2__6'(A, B, C) :-
        'final_answer_pattern/2__7'(A, B, C).
'final_answer_pattern/2__7'(A, B, C) :-
        '$via1_multi_hash_depends_on_ap/4-3'(A, D), !,
        'final_answer_pattern/2__7__0'(D, A, B, C).
'final_answer_pattern/2__7__0'([], A, B, C) :-
        'final_answer_pattern/2__8'(A, B, C).
'final_answer_pattern/2__7__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,G,_,H,_),
            get_mutable(active, F),
            H==C,
            I=t(178,A,E),
            '$novel_production'(A, I),
            '$novel_production'(E, I) ->
            '$extend_history'(E, I),
            '$activate_constraint_final_answer_pattern/2'(J, E),
            (   J==yes ->
                '$insert_in_store_final_answer_pattern/2'(E)
            ;   true
            ),
            final_answer_pattern(G, D),
            (   E=suspension(_,K,_,_,_),
                get_mutable(active, K) ->
                chr_runtime:'chr update_mutable'(inactive, K),
                'final_answer_pattern/2__7__0'(B, C, D, E)
            ;   true
            )
        ;   'final_answer_pattern/2__7__0'(B, C, D, E)
        ).
'final_answer_pattern/2__7'(A, B, C) :-
        'final_answer_pattern/2__8'(A, B, C).
'final_answer_pattern/2__8'(A, B, C) :-
        '$via1_multi_hash_depends_on_ap/4-2'(A, D), !,
        'final_answer_pattern/2__8__0'(D, A, B, C).
'final_answer_pattern/2__8__0'([], A, B, C) :-
        'final_answer_pattern/2__9'(A, B, C).
'final_answer_pattern/2__8__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,G,H,I,J),
            get_mutable(active, F),
            H==C,
            '$via1_multi_hash_final_answer_pattern/2-1'(I, K) ->
            'final_answer_pattern/2__8__1'(K, G, I, J, A, B, C, D, E)
        ;   'final_answer_pattern/2__8__0'(B, C, D, E)
        ).
'final_answer_pattern/2__8__1'([], _, _, _, _, A, B, C, D) :-
        'final_answer_pattern/2__8__0'(A, B, C, D).
'final_answer_pattern/2__8__1'([A|B], C, D, E, F, G, H, I, J) :-
        (   A=suspension(_,K,_,L,M),
            get_mutable(active, K),
            L==D,
            N=t(179,F,J,A),
            '$novel_production'(F, N),
            '$novel_production'(J, N),
            '$novel_production'(A, N) ->
            '$extend_history'(J, N),
            '$activate_constraint_final_answer_pattern/2'(O, J),
            (   O==yes ->
                '$insert_in_store_final_answer_pattern/2'(J)
            ;   true
            ),
            C=odom(occ(P,Q),_),
            (   ai_observation_is_observed(I, P) ->
                ai_observed_internal(P, Q)
            ;   ai_not_observed_internal(P, Q)
            ),
            (   E==yes ->
                I=odom([],R),
                ord_del_element(R, P, S),
                T=odom([],S)
            ;   T=I
            ),
            ai_observation_lub(T, M, U),
            final_answer_pattern(C, U),
            (   J=suspension(_,V,_,_,_),
                get_mutable(active, V) ->
                chr_runtime:'chr update_mutable'(inactive, V),
                'final_answer_pattern/2__8__1'(B, C, D, E, F, G, H, I, J)
            ;   true
            )
        ;   'final_answer_pattern/2__8__1'(B, C, D, E, F, G, H, I, J)
        ).
'final_answer_pattern/2__8'(A, B, C) :-
        'final_answer_pattern/2__9'(A, B, C).
'final_answer_pattern/2__9'(A, B, C) :-
        '$via1_multi_hash_depends_on_ap/4-3'(A, D), !,
        'final_answer_pattern/2__9__0'(D, A, B, C).
'final_answer_pattern/2__9__0'([], A, B, C) :-
        'final_answer_pattern/2__10'(A, B, C).
'final_answer_pattern/2__9__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,G,H,I,J),
            get_mutable(active, F),
            I==C,
            '$via1_multi_hash_final_answer_pattern/2-1'(H, K) ->
            'final_answer_pattern/2__9__1'(K, G, H, J, A, B, C, D, E)
        ;   'final_answer_pattern/2__9__0'(B, C, D, E)
        ).
'final_answer_pattern/2__9__1'([], _, _, _, _, A, B, C, D) :-
        'final_answer_pattern/2__9__0'(A, B, C, D).
'final_answer_pattern/2__9__1'([A|B], C, D, E, F, G, H, I, J) :-
        (   A=suspension(_,K,_,L,M),
            get_mutable(active, K),
            L==D,
            N=t(179,F,A,J),
            '$novel_production'(F, N),
            '$novel_production'(A, N),
            '$novel_production'(J, N) ->
            '$extend_history'(J, N),
            '$activate_constraint_final_answer_pattern/2'(O, J),
            (   O==yes ->
                '$insert_in_store_final_answer_pattern/2'(J)
            ;   true
            ),
            C=odom(occ(P,Q),_),
            (   ai_observation_is_observed(M, P) ->
                ai_observed_internal(P, Q)
            ;   ai_not_observed_internal(P, Q)
            ),
            (   E==yes ->
                M=odom([],R),
                ord_del_element(R, P, S),
                T=odom([],S)
            ;   T=M
            ),
            ai_observation_lub(T, I, U),
            final_answer_pattern(C, U),
            (   J=suspension(_,V,_,_,_),
                get_mutable(active, V) ->
                chr_runtime:'chr update_mutable'(inactive, V),
                'final_answer_pattern/2__9__1'(B, C, D, E, F, G, H, I, J)
            ;   true
            )
        ;   'final_answer_pattern/2__9__1'(B, C, D, E, F, G, H, I, J)
        ).
'final_answer_pattern/2__9'(A, B, C) :-
        'final_answer_pattern/2__10'(A, B, C).
'final_answer_pattern/2__10'(_, _, A) :-
        '$activate_constraint_final_answer_pattern/2'(B, A),
        (   B==yes ->
            '$insert_in_store_final_answer_pattern/2'(A)
        ;   true
        ).
abstract_constraints(A) :-
        'abstract_constraints/1__0'(A, _).
'abstract_constraints/1__0'(A, B) :-
        hprolog:get_store('$chr_store_global_ground_chr_translate:initial_call_pattern/1', C), !,
        '$allocate_constraint_abstract_constraints/1'(B, A),
        'abstract_constraints/1__0__0'(C, A, B).
'abstract_constraints/1__0__0'([], A, B) :-
        'abstract_constraints/1__1'(A, B).
'abstract_constraints/1__0__0'([A|B], C, D) :-
        (   A=suspension(_,E,_,_,F),
            get_mutable(active, E),
            '$via1_multi_hash_final_answer_pattern/2-1'(F, G) ->
            'abstract_constraints/1__0__1'(G, F, A, B, C, D)
        ;   'abstract_constraints/1__0__0'(B, C, D)
        ).
'abstract_constraints/1__0__1'([], _, _, A, B, C) :-
        'abstract_constraints/1__0__0'(A, B, C).
'abstract_constraints/1__0__1'([A|B], C, D, E, F, G) :-
        (   A=suspension(_,H,_,I,J),
            get_mutable(active, H),
            I==C,
            K=t(163,D,A,G),
            '$novel_production'(D, K),
            '$novel_production'(A, K),
            '$novel_production'(G, K) ->
            '$extend_history'(G, K),
            '$activate_constraint_abstract_constraints/1'(L, G),
            (   L==yes ->
                '$insert_in_store_abstract_constraints/1'(G)
            ;   true
            ),
            ai_observation_schedule_new_calls(F, J),
            (   G=suspension(_,M,_,_,_),
                get_mutable(active, M) ->
                chr_runtime:'chr update_mutable'(inactive, M),
                'abstract_constraints/1__0__1'(B, C, D, E, F, G)
            ;   true
            )
        ;   'abstract_constraints/1__0__1'(B, C, D, E, F, G)
        ).
'abstract_constraints/1__0'(A, B) :-
        '$allocate_constraint_abstract_constraints/1'(B, A),
        'abstract_constraints/1__1'(A, B).
'abstract_constraints/1__1'(A, B) :-
        hprolog:get_store('$chr_store_global_ground_chr_translate:call_pattern/1', C), !,
        'abstract_constraints/1__1__0'(C, A, B).
'abstract_constraints/1__1__0'([], A, B) :-
        'abstract_constraints/1__2'(A, B).
'abstract_constraints/1__1__0'([A|B], C, D) :-
        (   A=suspension(_,E,_,_,F),
            get_mutable(active, E),
            F=odom(G,H),
            I=t(172,A,D),
            '$novel_production'(A, I),
            '$novel_production'(D, I),
            memberchk_eq(G, C) ->
            '$extend_history'(D, I),
            '$activate_constraint_abstract_constraints/1'(J, D),
            (   J==yes ->
                '$insert_in_store_abstract_constraints/1'(D)
            ;   true
            ),
            K=odom(occ(G,1),H),
            call_pattern(K),
            depends_on(odom(G,H), K),
            (   D=suspension(_,L,_,_,_),
                get_mutable(active, L) ->
                chr_runtime:'chr update_mutable'(inactive, L),
                'abstract_constraints/1__1__0'(B, C, D)
            ;   true
            )
        ;   'abstract_constraints/1__1__0'(B, C, D)
        ).
'abstract_constraints/1__1'(A, B) :-
        'abstract_constraints/1__2'(A, B).
'abstract_constraints/1__2'(A, B) :-
        hprolog:get_store('$chr_store_global_ground_chr_translate:occurrence/4', C), !,
        'abstract_constraints/1__2__0'(C, A, B).
'abstract_constraints/1__2__0'([], A, B) :-
        'abstract_constraints/1__3'(A, B).
'abstract_constraints/1__2__0'([A|B], C, D) :-
        (   A=suspension(_,E,_,_,F,G,H,I),
            get_mutable(active, E),
            hprolog:get_store('$chr_store_global_ground_chr_translate:call_pattern/1', J) ->
            'abstract_constraints/1__2__1'(J, F, G, H, I, A, B, C, D)
        ;   'abstract_constraints/1__2__0'(B, C, D)
        ).
'abstract_constraints/1__2__1'([], _, _, _, _, _, A, B, C) :-
        'abstract_constraints/1__2__0'(A, B, C).
'abstract_constraints/1__2__1'([A|B], C, D, E, F, G, H, I, J) :-
        (   A=suspension(_,K,_,_,L),
            get_mutable(active, K),
            L=odom(M,N),
            M=occ(O,P),
            O==C,
            P==D,
            '$via1_multi_hash_rule/2-1'(E, Q) ->
            'abstract_constraints/1__2__2'(Q, N, A, B, C, D, E, F, G, H, I, J)
        ;   'abstract_constraints/1__2__1'(B, C, D, E, F, G, H, I, J)
        ).
'abstract_constraints/1__2__2'([], _, _, A, B, C, D, E, F, G, H, I) :-
        'abstract_constraints/1__2__1'(A, B, C, D, E, F, G, H, I).
'abstract_constraints/1__2__2'([A|B], C, D, E, F, G, H, I, J, K, L, M) :-
        (   A=suspension(_,N,_,O,P),
            get_mutable(active, N),
            O==H,
            Q=t(173,D,M,J,A),
            '$novel_production'(D, Q),
            '$novel_production'(M, Q),
            '$novel_production'(J, Q),
            '$novel_production'(A, Q),
            P=pragma(rule(_,_,_,_),ids(R,_),_,_,_),
            memberchk_eq(I, R),
            is_passive(H, I) ->
            '$extend_history'(M, Q),
            '$activate_constraint_abstract_constraints/1'(S, M),
            (   S==yes ->
                '$insert_in_store_abstract_constraints/1'(M)
            ;   true
            ),
            T is G+1,
            U=odom(occ(F,T),C),
            call_pattern(U),
            depends_on(odom(occ(F,G),C), U),
            (   M=suspension(_,V,_,_,_),
                get_mutable(active, V) ->
                chr_runtime:'chr update_mutable'(inactive, V),
                'abstract_constraints/1__2__2'(B, C, D, E, F, G, H, I, J, K, L, M)
            ;   true
            )
        ;   'abstract_constraints/1__2__2'(B, C, D, E, F, G, H, I, J, K, L, M)
        ).
'abstract_constraints/1__2'(A, B) :-
        'abstract_constraints/1__3'(A, B).
'abstract_constraints/1__3'(A, B) :-
        hprolog:get_store('$chr_store_global_ground_chr_translate:occurrence/4', C), !,
        'abstract_constraints/1__3__0'(C, A, B).
'abstract_constraints/1__3__0'([], A, B) :-
        'abstract_constraints/1__4'(A, B).
'abstract_constraints/1__3__0'([A|B], C, D) :-
        (   A=suspension(_,E,_,_,F,G,H,I),
            get_mutable(active, E),
            hprolog:get_store('$chr_store_global_ground_chr_translate:call_pattern/1', J) ->
            'abstract_constraints/1__3__1'(J, F, G, H, I, A, B, C, D)
        ;   'abstract_constraints/1__3__0'(B, C, D)
        ).
'abstract_constraints/1__3__1'([], _, _, _, _, _, A, B, C) :-
        'abstract_constraints/1__3__0'(A, B, C).
'abstract_constraints/1__3__1'([A|B], C, D, E, F, G, H, I, J) :-
        (   A=suspension(_,K,_,_,L),
            get_mutable(active, K),
            L=odom(M,N),
            M=occ(O,P),
            O==C,
            P==D,
            '$via1_multi_hash_rule/2-1'(E, Q) ->
            'abstract_constraints/1__3__2'(Q, N, A, B, C, D, E, F, G, H, I, J)
        ;   'abstract_constraints/1__3__1'(B, C, D, E, F, G, H, I, J)
        ).
'abstract_constraints/1__3__2'([], _, _, A, B, C, D, E, F, G, H, I) :-
        'abstract_constraints/1__3__1'(A, B, C, D, E, F, G, H, I).
'abstract_constraints/1__3__2'([A|B], C, D, E, F, G, H, I, J, K, L, M) :-
        (   A=suspension(_,N,_,O,P),
            get_mutable(active, N),
            O==H,
            Q=t(174,D,M,J,A),
            '$novel_production'(D, Q),
            '$novel_production'(M, Q),
            '$novel_production'(J, Q),
            '$novel_production'(A, Q),
            P=pragma(rule(R,S,T,U),ids(V,_),_,_,_),
            memberchk_eq(I, V),
            \+is_passive(H,I) ->
            '$extend_history'(M, Q),
            '$activate_constraint_abstract_constraints/1'(W, M),
            (   W==yes ->
                '$insert_in_store_abstract_constraints/1'(M)
            ;   true
            ),
            once(select2(I,_,V,R,_,X)),
            ai_observation_abstract_constraints(X, L, Y),
            ai_observation_observe_list(odom([],C), Y, odom([],Z)),
            ai_observation_abstract_constraints(S, L, A1),
            ai_observation_observe_list(odom([],Z), A1, odom([],B1)),
            ai_observation_abstract_goal_(R, S, T, U, L, C1),
            call_pattern(odom(C1,B1)),
            D1 is G+1,
            E1=odom(occ(F,D1),C),
            call_pattern(E1),
            depends_on_as(odom(occ(F,G),C), odom(C1,B1), E1),
            final_answer_pattern(odom(occ(F,G),C), odom([],C)),
            (   M=suspension(_,F1,_,_,_),
                get_mutable(active, F1) ->
                chr_runtime:'chr update_mutable'(inactive, F1),
                'abstract_constraints/1__3__2'(B, C, D, E, F, G, H, I, J, K, L, M)
            ;   true
            )
        ;   'abstract_constraints/1__3__2'(B, C, D, E, F, G, H, I, J, K, L, M)
        ).
'abstract_constraints/1__3'(A, B) :-
        'abstract_constraints/1__4'(A, B).
'abstract_constraints/1__4'(A, B) :-
        hprolog:get_store('$chr_store_global_ground_chr_translate:occurrence/4', C), !,
        'abstract_constraints/1__4__0'(C, A, B).
'abstract_constraints/1__4__0'([], A, B) :-
        'abstract_constraints/1__5'(A, B).
'abstract_constraints/1__4__0'([A|B], C, D) :-
        (   A=suspension(_,E,_,_,F,G,H,I),
            get_mutable(active, E),
            hprolog:get_store('$chr_store_global_ground_chr_translate:call_pattern/1', J) ->
            'abstract_constraints/1__4__1'(J, F, G, H, I, A, B, C, D)
        ;   'abstract_constraints/1__4__0'(B, C, D)
        ).
'abstract_constraints/1__4__1'([], _, _, _, _, _, A, B, C) :-
        'abstract_constraints/1__4__0'(A, B, C).
'abstract_constraints/1__4__1'([A|B], C, D, E, F, G, H, I, J) :-
        (   A=suspension(_,K,_,_,L),
            get_mutable(active, K),
            L=odom(M,N),
            M=occ(O,P),
            O==C,
            P==D,
            '$via1_multi_hash_rule/2-1'(E, Q) ->
            'abstract_constraints/1__4__2'(Q, N, A, B, C, D, E, F, G, H, I, J)
        ;   'abstract_constraints/1__4__1'(B, C, D, E, F, G, H, I, J)
        ).
'abstract_constraints/1__4__2'([], _, _, A, B, C, D, E, F, G, H, I) :-
        'abstract_constraints/1__4__1'(A, B, C, D, E, F, G, H, I).
'abstract_constraints/1__4__2'([A|B], C, D, E, F, G, H, I, J, K, L, M) :-
        (   A=suspension(_,N,_,O,P),
            get_mutable(active, N),
            O==H,
            Q=t(176,D,M,J,A),
            '$novel_production'(D, Q),
            '$novel_production'(M, Q),
            '$novel_production'(J, Q),
            '$novel_production'(A, Q),
            P=pragma(rule(_,_,_,_),ids(_,R),_,_,_),
            memberchk_eq(I, R),
            is_passive(H, I) ->
            '$extend_history'(M, Q),
            '$activate_constraint_abstract_constraints/1'(S, M),
            (   S==yes ->
                '$insert_in_store_abstract_constraints/1'(M)
            ;   true
            ),
            T is G+1,
            U=odom(occ(F,T),C),
            call_pattern(U),
            final_answer_pattern(odom(occ(F,G),C), odom([],C)),
            depends_on(odom(occ(F,G),C), U),
            (   M=suspension(_,V,_,_,_),
                get_mutable(active, V) ->
                chr_runtime:'chr update_mutable'(inactive, V),
                'abstract_constraints/1__4__2'(B, C, D, E, F, G, H, I, J, K, L, M)
            ;   true
            )
        ;   'abstract_constraints/1__4__2'(B, C, D, E, F, G, H, I, J, K, L, M)
        ).
'abstract_constraints/1__4'(A, B) :-
        'abstract_constraints/1__5'(A, B).
'abstract_constraints/1__5'(A, B) :-
        hprolog:get_store('$chr_store_global_ground_chr_translate:occurrence/4', C), !,
        'abstract_constraints/1__5__0'(C, A, B).
'abstract_constraints/1__5__0'([], A, B) :-
        'abstract_constraints/1__6'(A, B).
'abstract_constraints/1__5__0'([A|B], C, D) :-
        (   A=suspension(_,E,_,_,F,G,H,I),
            get_mutable(active, E),
            hprolog:get_store('$chr_store_global_ground_chr_translate:call_pattern/1', J) ->
            'abstract_constraints/1__5__1'(J, F, G, H, I, A, B, C, D)
        ;   'abstract_constraints/1__5__0'(B, C, D)
        ).
'abstract_constraints/1__5__1'([], _, _, _, _, _, A, B, C) :-
        'abstract_constraints/1__5__0'(A, B, C).
'abstract_constraints/1__5__1'([A|B], C, D, E, F, G, H, I, J) :-
        (   A=suspension(_,K,_,_,L),
            get_mutable(active, K),
            L=odom(M,N),
            M=occ(O,P),
            O==C,
            P==D,
            '$via1_multi_hash_rule/2-1'(E, Q) ->
            'abstract_constraints/1__5__2'(Q, N, A, B, C, D, E, F, G, H, I, J)
        ;   'abstract_constraints/1__5__1'(B, C, D, E, F, G, H, I, J)
        ).
'abstract_constraints/1__5__2'([], _, _, A, B, C, D, E, F, G, H, I) :-
        'abstract_constraints/1__5__1'(A, B, C, D, E, F, G, H, I).
'abstract_constraints/1__5__2'([A|B], C, D, E, F, G, H, I, J, K, L, M) :-
        (   A=suspension(_,N,_,O,P),
            get_mutable(active, N),
            O==H,
            Q=t(177,D,M,J,A),
            '$novel_production'(D, Q),
            '$novel_production'(M, Q),
            '$novel_production'(J, Q),
            '$novel_production'(A, Q),
            P=pragma(rule(R,S,T,U),ids(_,V),_,_,_),
            memberchk_eq(I, V),
            \+is_passive(H,I) ->
            '$extend_history'(M, Q),
            '$activate_constraint_abstract_constraints/1'(W, M),
            (   W==yes ->
                '$insert_in_store_abstract_constraints/1'(M)
            ;   true
            ),
            once(select2(I,_,V,S,_,X)),
            ai_observation_abstract_constraints(X, L, Y),
            ai_observation_observe_list(odom([],C), Y, odom([],Z)),
            ai_observation_abstract_constraints(R, L, A1),
            ai_observation_observe_list(odom([],Z), A1, odom([],B1)),
            ord_add_element(B1, F, C1),
            ai_observation_abstract_goal_(R, S, T, U, L, D1),
            call_pattern(odom(D1,C1)),
            (   ord_memberchk(F, B1) ->
                E1=no
            ;   E1=yes
            ),
            F1 is G+1,
            G1=odom(occ(F,F1),C),
            call_pattern(G1),
            depends_on_ap(odom(occ(F,G),C), odom(D1,C1), G1, E1),
            (   M=suspension(_,H1,_,_,_),
                get_mutable(active, H1) ->
                chr_runtime:'chr update_mutable'(inactive, H1),
                'abstract_constraints/1__5__2'(B, C, D, E, F, G, H, I, J, K, L, M)
            ;   true
            )
        ;   'abstract_constraints/1__5__2'(B, C, D, E, F, G, H, I, J, K, L, M)
        ).
'abstract_constraints/1__5'(A, B) :-
        'abstract_constraints/1__6'(A, B).
'abstract_constraints/1__6'(_, A) :-
        '$activate_constraint_abstract_constraints/1'(B, A),
        (   B==yes ->
            '$insert_in_store_abstract_constraints/1'(A)
        ;   true
        ).
depends_on(A, B) :-
        'depends_on/2__0'(A, B, _).
'depends_on/2__0'(A, B, C) :-
        '$via1_multi_hash_final_answer_pattern/2-1'(B, D), !,
        '$allocate_constraint_depends_on/2'(C, A, B),
        'depends_on/2__0__0'(D, A, B, C).
'depends_on/2__0__0'([], A, B, C) :-
        'depends_on/2__1'(A, B, C).
'depends_on/2__0__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,G,H),
            get_mutable(active, F),
            G==D,
            I=t(165,E,A),
            '$novel_production'(E, I),
            '$novel_production'(A, I) ->
            '$extend_history'(E, I),
            '$activate_constraint_depends_on/2'(J, E),
            (   J==yes ->
                '$insert_in_store_depends_on/2'(E)
            ;   true
            ),
            final_answer_pattern(C, H),
            (   E=suspension(_,K,_,_,_),
                get_mutable(active, K) ->
                chr_runtime:'chr update_mutable'(inactive, K),
                'depends_on/2__0__0'(B, C, D, E)
            ;   true
            )
        ;   'depends_on/2__0__0'(B, C, D, E)
        ).
'depends_on/2__0'(A, B, C) :-
        '$allocate_constraint_depends_on/2'(C, A, B),
        'depends_on/2__1'(A, B, C).
'depends_on/2__1'(_, _, A) :-
        '$activate_constraint_depends_on/2'(B, A),
        (   B==yes ->
            '$insert_in_store_depends_on/2'(A)
        ;   true
        ).
depends_on_ap(A, B, C, D) :-
        'depends_on_ap/4__0'(A, B, C, D, _).
'depends_on_ap/4__0'(A, B, C, D, E) :-
        '$via1_multi_hash_final_answer_pattern/2-1'(C, F), !,
        '$allocate_constraint_depends_on_ap/4'(E, A, B, C, D),
        'depends_on_ap/4__0__0'(F, A, B, C, D, E).
'depends_on_ap/4__0__0'([], A, B, C, D, E) :-
        'depends_on_ap/4__1'(A, B, C, D, E).
'depends_on_ap/4__0__0'([A|B], C, D, E, F, G) :-
        (   A=suspension(_,H,_,I,J),
            get_mutable(active, H),
            I==E,
            K=t(178,G,A),
            '$novel_production'(G, K),
            '$novel_production'(A, K) ->
            '$extend_history'(G, K),
            '$activate_constraint_depends_on_ap/4'(L, G),
            (   L==yes ->
                '$insert_in_store_depends_on_ap/4'(G)
            ;   true
            ),
            final_answer_pattern(C, J),
            (   G=suspension(_,M,_,_,_,_,_),
                get_mutable(active, M) ->
                chr_runtime:'chr update_mutable'(inactive, M),
                'depends_on_ap/4__0__0'(B, C, D, E, F, G)
            ;   true
            )
        ;   'depends_on_ap/4__0__0'(B, C, D, E, F, G)
        ).
'depends_on_ap/4__0'(A, B, C, D, E) :-
        '$allocate_constraint_depends_on_ap/4'(E, A, B, C, D),
        'depends_on_ap/4__1'(A, B, C, D, E).
'depends_on_ap/4__1'(A, B, C, D, E) :-
        '$via1_multi_hash_final_answer_pattern/2-1'(B, F), !,
        'depends_on_ap/4__1__0'(F, A, B, C, D, E).
'depends_on_ap/4__1__0'([], A, B, C, D, E) :-
        'depends_on_ap/4__2'(A, B, C, D, E).
'depends_on_ap/4__1__0'([A|B], C, D, E, F, G) :-
        (   A=suspension(_,H,_,I,J),
            get_mutable(active, H),
            I==D,
            '$via1_multi_hash_final_answer_pattern/2-1'(E, K) ->
            'depends_on_ap/4__1__1'(K, J, A, B, C, D, E, F, G)
        ;   'depends_on_ap/4__1__0'(B, C, D, E, F, G)
        ).
'depends_on_ap/4__1__1'([], _, _, A, B, C, D, E, F) :-
        'depends_on_ap/4__1__0'(A, B, C, D, E, F).
'depends_on_ap/4__1__1'([A|B], C, D, E, F, G, H, I, J) :-
        (   A=suspension(_,K,_,L,M),
            get_mutable(active, K),
            A\==D,
            L==H,
            N=t(179,J,D,A),
            '$novel_production'(J, N),
            '$novel_production'(D, N),
            '$novel_production'(A, N) ->
            '$extend_history'(J, N),
            '$activate_constraint_depends_on_ap/4'(O, J),
            (   O==yes ->
                '$insert_in_store_depends_on_ap/4'(J)
            ;   true
            ),
            F=odom(occ(P,Q),_),
            (   ai_observation_is_observed(C, P) ->
                ai_observed_internal(P, Q)
            ;   ai_not_observed_internal(P, Q)
            ),
            (   I==yes ->
                C=odom([],R),
                ord_del_element(R, P, S),
                T=odom([],S)
            ;   T=C
            ),
            ai_observation_lub(T, M, U),
            final_answer_pattern(F, U),
            (   J=suspension(_,V,_,_,_,_,_),
                get_mutable(active, V) ->
                chr_runtime:'chr update_mutable'(inactive, V),
                'depends_on_ap/4__1__1'(B, C, D, E, F, G, H, I, J)
            ;   true
            )
        ;   'depends_on_ap/4__1__1'(B, C, D, E, F, G, H, I, J)
        ).
'depends_on_ap/4__1'(A, B, C, D, E) :-
        'depends_on_ap/4__2'(A, B, C, D, E).
'depends_on_ap/4__2'(_, _, _, _, A) :-
        '$activate_constraint_depends_on_ap/4'(B, A),
        (   B==yes ->
            '$insert_in_store_depends_on_ap/4'(A)
        ;   true
        ).
depends_on_goal(A, B) :-
        'depends_on_goal/2__0'(A, B, _).
'depends_on_goal/2__0'(A, B, C) :-
        '$via1_multi_hash_depends_on/2-1'(A, D), !,
        'depends_on_goal/2__0__0'(D, A, B, C).
'depends_on_goal/2__0__0'([], A, B, C) :-
        'depends_on_goal/2__1'(A, B, C).
'depends_on_goal/2__0__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,G,_),
            get_mutable(active, F),
            G==C,
            '$via1_multi_hash_final_answer_pattern/2-1'(D, H),
            member(I, H),
            I=suspension(_,J,_,_,_),
            get_mutable(active, J) ->
            '$remove_constraint_internal_depends_on/2'(A, K),
            (   K=yes ->
                '$delete_from_store_depends_on/2'(A)
            ;   true
            ),
            'depends_on_goal/2__0__0'(B, C, D, E)
        ;   'depends_on_goal/2__0__0'(B, C, D, E)
        ).
'depends_on_goal/2__0'(A, B, C) :-
        'depends_on_goal/2__1'(A, B, C).
'depends_on_goal/2__1'(A, B, C) :-
        '$via1_multi_hash_final_answer_pattern/2-1'(B, D), !,
        '$allocate_constraint_depends_on_goal/2'(C, A, B),
        'depends_on_goal/2__1__0'(D, A, B, C).
'depends_on_goal/2__1__0'([], A, B, C) :-
        'depends_on_goal/2__2'(A, B, C).
'depends_on_goal/2__1__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,G,H),
            get_mutable(active, F),
            G==D,
            I=t(169,E,A),
            '$novel_production'(E, I),
            '$novel_production'(A, I) ->
            '$extend_history'(E, I),
            '$activate_constraint_depends_on_goal/2'(J, E),
            (   J==yes ->
                '$insert_in_store_depends_on_goal/2'(E)
            ;   true
            ),
            C=odom([_|K],_),
            H=odom([],L),
            M=odom(K,L),
            call_pattern(M),
            depends_on(C, M),
            (   E=suspension(_,N,_,_,_),
                get_mutable(active, N) ->
                chr_runtime:'chr update_mutable'(inactive, N),
                'depends_on_goal/2__1__0'(B, C, D, E)
            ;   true
            )
        ;   'depends_on_goal/2__1__0'(B, C, D, E)
        ).
'depends_on_goal/2__1'(A, B, C) :-
        '$allocate_constraint_depends_on_goal/2'(C, A, B),
        'depends_on_goal/2__2'(A, B, C).
'depends_on_goal/2__2'(_, _, A) :-
        '$activate_constraint_depends_on_goal/2'(B, A),
        (   B==yes ->
            '$insert_in_store_depends_on_goal/2'(A)
        ;   true
        ).
ai_observed_internal(A, B) :-
        '$via1_multi_hash_ai_not_observed_internal/2-12'(k(A,B), C), !,
        'ai_observed_internal/2__0__0'(C, A, B).
'ai_observed_internal/2__0__0'([], A, B) :-
        'ai_observed_internal/2__1'(A, B).
'ai_observed_internal/2__0__0'([A|B], C, D) :-
        (   A=suspension(_,E,_,F,G),
            get_mutable(active, E),
            F==C,
            G==D ->
            '$remove_constraint_internal_ai_not_observed_internal/2'(A, H),
            (   H=yes ->
                '$delete_from_store_ai_not_observed_internal/2'(A)
            ;   true
            ),
            'ai_observed_internal/2__0__0'(B, C, D)
        ;   'ai_observed_internal/2__0__0'(B, C, D)
        ).
ai_observed_internal(A, B) :-
        'ai_observed_internal/2__1'(A, B).
'ai_observed_internal/2__1'(A, B) :-
        '$via1_multi_hash_ai_observed_internal/2-12'(k(A,B), C),
        member(D, C),
        D=suspension(_,E,_,_,_),
        get_mutable(active, E), !.
'ai_observed_internal/2__1'(A, B) :-
        hprolog:get_store('$chr_store_global_ground_chr_translate:ai_observation_gather_results/0', C),
        member(D, C),
        D=suspension(_,E,_),
        get_mutable(active, E), !,
        ai_observed(A, B).
'ai_observed_internal/2__1'(A, B) :-
        '$insert_constraint_internal_ai_observed_internal/2'(C, A, B),
        '$insert_in_store_ai_observed_internal/2'(C).
ai_observed(A, B) :-
        '$insert_constraint_internal_ai_observed/2'(C, A, B),
        '$insert_in_store_ai_observed/2'(C).
ai_not_observed_internal(A, B) :-
        '$via1_multi_hash_ai_observed_internal/2-12'(k(A,B), C),
        member(D, C),
        D=suspension(_,E,_,_,_),
        get_mutable(active, E), !.
ai_not_observed_internal(A, B) :-
        '$via1_multi_hash_ai_not_observed_internal/2-12'(k(A,B), C),
        member(D, C),
        D=suspension(_,E,_,_,_),
        get_mutable(active, E), !.
ai_not_observed_internal(A, B) :-
        hprolog:get_store('$chr_store_global_ground_chr_translate:ai_observation_gather_results/0', C),
        member(D, C),
        D=suspension(_,E,_),
        get_mutable(active, E), !,
        ai_not_observed(A, B).
ai_not_observed_internal(A, B) :-
        '$insert_constraint_internal_ai_not_observed_internal/2'(C, A, B),
        '$insert_in_store_ai_not_observed_internal/2'(C).
ai_not_observed(A, B) :-
        'ai_not_observed/2__0'(A, B, _).
'ai_not_observed/2__0'(A, B, C) :-
        '$via1_multi_hash_stored/3-12'(k(A,B), D), !,
        '$allocate_constraint_ai_not_observed/2'(C, A, B),
        'ai_not_observed/2__0__0'(D, A, B, C).
'ai_not_observed/2__0__0'([], A, B, C) :-
        'ai_not_observed/2__1'(A, B, C).
'ai_not_observed/2__0__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,G,H,I),
            get_mutable(active, F),
            G==C,
            H==D,
            I=yes,
            '$via1_multi_hash_stored_complete/3-1'(C, J),
            member(K, J),
            K=suspension(_,L,_,_,M,N),
            get_mutable(active, L),
            D<M ->
            '$remove_constraint_internal_stored/3'(A, O),
            (   O=yes ->
                '$delete_from_store_stored/3'(A)
            ;   true
            ),
            '$remove_constraint_internal_stored_complete/3'(K, P),
            (   P=yes ->
                '$delete_from_store_stored_complete/3'(K)
            ;   true
            ),
            '$activate_constraint_ai_not_observed/2'(Q, E),
            (   Q==yes ->
                '$insert_in_store_ai_not_observed/2'(E)
            ;   true
            ),
            R is N-1,
            stored(C, D, maybe),
            stored_complete(C, M, R),
            (   E=suspension(_,S,_,_),
                get_mutable(active, S) ->
                chr_runtime:'chr update_mutable'(inactive, S),
                'ai_not_observed/2__0__0'(B, C, D, E)
            ;   true
            )
        ;   'ai_not_observed/2__0__0'(B, C, D, E)
        ).
'ai_not_observed/2__0'(A, B, C) :-
        '$allocate_constraint_ai_not_observed/2'(C, A, B),
        'ai_not_observed/2__1'(A, B, C).
'ai_not_observed/2__1'(_, _, A) :-
        '$activate_constraint_ai_not_observed/2'(B, A),
        (   B==yes ->
            '$insert_in_store_ai_not_observed/2'(A)
        ;   true
        ).
ai_is_observed(A, B) :-
        '$via1_multi_hash_ai_not_observed/2-12'(k(A,B), C),
        member(D, C),
        D=suspension(_,E,_,_),
        get_mutable(active, E), !,
        fail.
ai_is_observed(_, _).
depends_on_as(A, B, C) :-
        'depends_on_as/3__0'(A, B, C, _).
'depends_on_as/3__0'(A, B, C, D) :-
        '$via1_multi_hash_final_answer_pattern/2-1'(B, E), !,
        '$allocate_constraint_depends_on_as/3'(D, A, B, C),
        'depends_on_as/3__0__0'(E, A, B, C, D).
'depends_on_as/3__0__0'([], A, B, C, D) :-
        'depends_on_as/3__1'(A, B, C, D).
'depends_on_as/3__0__0'([A|B], C, D, E, F) :-
        (   A=suspension(_,G,_,H,I),
            get_mutable(active, G),
            H==D,
            '$via1_multi_hash_final_answer_pattern/2-1'(E, J) ->
            'depends_on_as/3__0__1'(J, I, A, B, C, D, E, F)
        ;   'depends_on_as/3__0__0'(B, C, D, E, F)
        ).
'depends_on_as/3__0__1'([], _, _, A, B, C, D, E) :-
        'depends_on_as/3__0__0'(A, B, C, D, E).
'depends_on_as/3__0__1'([A|B], C, D, E, F, G, H, I) :-
        (   A=suspension(_,J,_,K,L),
            get_mutable(active, J),
            A\==D,
            K==H,
            M=t(175,I,D,A),
            '$novel_production'(I, M),
            '$novel_production'(D, M),
            '$novel_production'(A, M) ->
            '$extend_history'(I, M),
            '$activate_constraint_depends_on_as/3'(N, I),
            (   N==yes ->
                '$insert_in_store_depends_on_as/3'(I)
            ;   true
            ),
            ai_observation_lub(C, L, O),
            final_answer_pattern(F, O),
            (   I=suspension(_,P,_,_,_,_),
                get_mutable(active, P) ->
                chr_runtime:'chr update_mutable'(inactive, P),
                'depends_on_as/3__0__1'(B, C, D, E, F, G, H, I)
            ;   true
            )
        ;   'depends_on_as/3__0__1'(B, C, D, E, F, G, H, I)
        ).
'depends_on_as/3__0'(A, B, C, D) :-
        '$allocate_constraint_depends_on_as/3'(D, A, B, C),
        'depends_on_as/3__1'(A, B, C, D).
'depends_on_as/3__1'(_, _, _, A) :-
        '$activate_constraint_depends_on_as/3'(B, A),
        (   B==yes ->
            '$insert_in_store_depends_on_as/3'(A)
        ;   true
        ).
ai_observation_gather_results :-
        'ai_observation_gather_results/0__0'(_).
'ai_observation_gather_results/0__0'(A) :-
        hprolog:get_store('$chr_store_global_ground_chr_translate:ai_observed_internal/2', B), !,
        '$allocate_constraint_ai_observation_gather_results/0'(A),
        'ai_observation_gather_results/0__0__0'(B, A).
'ai_observation_gather_results/0__0__0'([], A) :-
        'ai_observation_gather_results/0__1'(A).
'ai_observation_gather_results/0__0__0'([A|B], C) :-
        (   A=suspension(_,D,_,E,F),
            get_mutable(active, D) ->
            '$remove_constraint_internal_ai_observed_internal/2'(A, G),
            (   G=yes ->
                '$delete_from_store_ai_observed_internal/2'(A)
            ;   true
            ),
            '$activate_constraint_ai_observation_gather_results/0'(H, C),
            (   H==yes ->
                '$insert_in_store_ai_observation_gather_results/0'(C)
            ;   true
            ),
            ai_observed(E, F),
            (   C=suspension(_,I,_),
                get_mutable(active, I) ->
                chr_runtime:'chr update_mutable'(inactive, I),
                'ai_observation_gather_results/0__0__0'(B, C)
            ;   true
            )
        ;   'ai_observation_gather_results/0__0__0'(B, C)
        ).
'ai_observation_gather_results/0__0'(A) :-
        '$allocate_constraint_ai_observation_gather_results/0'(A),
        'ai_observation_gather_results/0__1'(A).
'ai_observation_gather_results/0__1'(A) :-
        hprolog:get_store('$chr_store_global_ground_chr_translate:ai_not_observed_internal/2', B), !,
        'ai_observation_gather_results/0__1__0'(B, A).
'ai_observation_gather_results/0__1__0'([], A) :-
        'ai_observation_gather_results/0__2'(A).
'ai_observation_gather_results/0__1__0'([A|B], C) :-
        (   A=suspension(_,D,_,E,F),
            get_mutable(active, D) ->
            '$remove_constraint_internal_ai_not_observed_internal/2'(A, G),
            (   G=yes ->
                '$delete_from_store_ai_not_observed_internal/2'(A)
            ;   true
            ),
            '$activate_constraint_ai_observation_gather_results/0'(H, C),
            (   H==yes ->
                '$insert_in_store_ai_observation_gather_results/0'(C)
            ;   true
            ),
            ai_not_observed(E, F),
            (   C=suspension(_,I,_),
                get_mutable(active, I) ->
                chr_runtime:'chr update_mutable'(inactive, I),
                'ai_observation_gather_results/0__1__0'(B, C)
            ;   true
            )
        ;   'ai_observation_gather_results/0__1__0'(B, C)
        ).
'ai_observation_gather_results/0__1'(A) :-
        'ai_observation_gather_results/0__2'(A).
'ai_observation_gather_results/0__2'(A) :-
        (   var(A) ->
            true
        ;   '$remove_constraint_internal_ai_observation_gather_results/0'(A, B),
            (   B=yes ->
                '$delete_from_store_ai_observation_gather_results/0'(A)
            ;   true
            )
        ).
phase_end(A) :-
        'phase_end/1__0'(A, _).
'phase_end/1__0'(A, B) :-
        '$via1_multi_hash_delay_phase_end/2-1'(A, C), !,
        '$allocate_constraint_phase_end/1'(B, A),
        'phase_end/1__0__0'(C, A, B).
'phase_end/1__0__0'([], A, B) :-
        'phase_end/1__1'(A, B).
'phase_end/1__0__0'([A|B], C, D) :-
        (   A=suspension(_,E,F,G),
            get_mutable(active, E),
            F==C ->
            '$remove_constraint_internal_delay_phase_end/2'(A, H),
            (   H=yes ->
                '$delete_from_store_delay_phase_end/2'(A)
            ;   true
            ),
            '$activate_constraint_phase_end/1'(I, D),
            (   I==yes ->
                '$insert_in_store_phase_end/1'(D)
            ;   true
            ),
            call(G),
            (   D=suspension(_,J,_),
                get_mutable(active, J) ->
                chr_runtime:'chr update_mutable'(inactive, J),
                'phase_end/1__0__0'(B, C, D)
            ;   true
            )
        ;   'phase_end/1__0__0'(B, C, D)
        ).
'phase_end/1__0'(A, B) :-
        '$allocate_constraint_phase_end/1'(B, A),
        'phase_end/1__1'(A, B).
'phase_end/1__1'(_, A) :-
        (   var(A) ->
            true
        ;   '$remove_constraint_internal_phase_end/1'(A, B),
            (   B=yes ->
                '$delete_from_store_phase_end/1'(A)
            ;   true
            )
        ).
delay_phase_end(A, B) :-
        '$via1_multi_hash_phase_end/1-1'(A, C),
        member(D, C),
        D=suspension(_,E,_),
        get_mutable(active, E), !,
        call(B).
delay_phase_end(A, B) :-
        '$insert_constraint_internal_delay_phase_end/2'(C, A, B),
        '$insert_in_store_delay_phase_end/2'(C).
does_use_history(A) :-
        'does_use_history/1__0'(A, _).
'does_use_history/1__0'(A, B) :-
        (   chr_runtime:'chr newvia_1'(A, C) ->
            hpattvars:get_attr(C, chr_translate, D),
            D=v(_,_,_,E)
        ;   hprolog:get_store('$chr_store_global_list_chr_translate:does_use_history/1', E)
        ),
        member(F, E),
        F=suspension(_,G,_,_,_,H),
        get_mutable(active, G),
        H==A, !,
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_does_use_history/1'(B, I, J),
            (   J==yes ->
                '$delete_from_store_does_use_history/1'(B),
                'detach_does_use_history/1'(I, B)
            ;   true
            )
        ).
'does_use_history/1__0'(A, B) :-
        (   var(B) ->
            '$insert_constraint_internal_does_use_history/1'(C, D, B, chr_translate:'does_use_history/1__0'(A,B), A)
        ;   '$activate_constraint_does_use_history/1'(C, D, B, _)
        ),
        (   C==yes ->
            '$insert_in_store_does_use_history/1'(B),
            'attach_does_use_history/1'(D, B)
        ;   true
        ).
uses_history(A) :-
        (   chr_runtime:'chr newvia_1'(A, B) ->
            hpattvars:get_attr(B, chr_translate, C),
            C=v(_,_,_,D)
        ;   hprolog:get_store('$chr_store_global_list_chr_translate:does_use_history/1', D)
        ),
        member(E, D),
        E=suspension(_,F,_,_,_,G),
        get_mutable(active, F),
        G==A, !.
uses_history(_) :-
        fail.
novel_production_call(A, B, C) :-
        (   chr_runtime:'chr newvia_1'(A, D) ->
            hpattvars:get_attr(D, chr_translate, E),
            E=v(_,_,_,F)
        ;   hprolog:get_store('$chr_store_global_list_chr_translate:does_use_history/1', F)
        ),
        member(G, F),
        G=suspension(_,H,_,_,_,I),
        get_mutable(active, H),
        I==A, !,
        C=B.
novel_production_call(_, _, true).
(:-bb_get(chr_discontiguous_stack,[A|B]),bb_put(chr_discontiguous_stack,B),set_prolog_flag(discontiguous_warnings,A)).
(:-bb_get(chr_discontiguous_stack,[A|B]),bb_put(chr_discontiguous_stack,B),set_prolog_flag(discontiguous_warnings,A)).
end_of_file.
