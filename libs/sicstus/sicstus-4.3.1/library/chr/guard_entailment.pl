/*  Generated by CHR bootstrap compiler
    From: guard_entailment.chr
    Date: 27-11-2014 9:32:12

    DO NOT EDIT.  EDIT THE CHR FILE INSTEAD
*/

(:-module(guard_entailment,[entails_guard/2,simplify_guards/5])).
(:-use_module(chr_runtime)).
(:-use_module(chr_hashtable_store)).
(:-use_module(hpattvars)).
(:-use_module(b_globval)).
(:-use_module(hprolog)).
(:-current_prolog_flag(discontiguous_warnings,A),(bb_get(chr_discontiguous_stack,B)->bb_put(chr_discontiguous_stack,[A|B]);bb_put(chr_discontiguous_stack,[A])),set_prolog_flag(discontiguous_warnings,off)).
(:-include(chr_op)).
(:-use_module(hprolog)).
(:-use_module(builtins)).
(:-use_module(chr_compiler_errors)).
entails_guard(A, B) :-
        copy_term_nat((A,B), (C,D)),
        chr_term_variables(C, E),
        variables(E),
        sort(C, F),
        entails_guard2(F), !,
        test(D), !,
        cleanup.
entails_guard2([]).
entails_guard2([A|B]) :-
        known(A),
        entails_guard2(B).
simplify_guards(A, B, C, D, E) :-
        copy_term_nat((A,C), (F,G)),
        chr_term_variables(F, H),
        variables(H),
        entails_guard2(F), !,
        simplify(G, I),
        simplified(C, I, D, B, E), !,
        cleanup.
simplified([], [], [], A, A).
simplified([A|B], [keep|C], [A|D], E, F) :-
        simplified(B, C, D, E, F).
simplified([_|_], [fail|_], fail, A, A).
simplified([A|B], [true|C], [D|E], F, G) :-
        builtins:binds_b(A, H),
        chr_term_variables(B, I),
        intersect_eq(H, I, J), !,
        (   J=[] ->
            chr_term_variables(F, K),
            intersect_eq(H, K, L), !,
            (   L=[] ->
                D=true,
                G=M
            ;   D=true,
                G=(A,M)
            )
        ;   D=A,
            G=M
        ),
        simplified(B, C, E, F, M).
simplify([], []).
simplify([A|B], [C|D]) :-
        (   \+try(true,A) ->
            C=true
        ;   builtins:negate_b(A, E),
            (   \+try(true,E) ->
                C=fail
            ;   C=keep
            )
        ),
        known(A),
        simplify(B, D).
try(A, B) :-
        (   known(A) ->
            true
        ;   chr_error(internal, [['Entailment Checker: try/2.'-[]]])
        ),
        (   test(B) ->
            fail
        ;   true
        ).
add_args_unif([], [], true).
add_args_unif([A|B], [C|D], (A=C,E)) :-
        add_args_unif(B, D, E).
add_args_nunif([], [], fail).
add_args_nunif([A|B], [C|D], (A\=C;E)) :-
        add_args_nunif(B, D, E).
add_args_nmatch([], [], fail).
add_args_nmatch([A|B], [C|D], (A\==C;E)) :-
        add_args_nmatch(B, D, E).
all_unique_vars(A, B) :-
        all_unique_vars(A, B, []).
all_unique_vars([], _, _).
all_unique_vars([A|B], C, D) :-
        var(A),
        \+memberchk_eq(A,C),
        \+memberchk_eq(A,D),
        all_unique_vars(B, [A|D]).
(:-current_prolog_flag(discontiguous_warnings,A),(bb_get(chr_discontiguous_stack,B)->bb_put(chr_discontiguous_stack,[A|B]);bb_put(chr_discontiguous_stack,[A])),set_prolog_flag(discontiguous_warnings,off)).
'attach_known/1'([], _).
'attach_known/1'([A|B], C) :-
        (   hpattvars:get_attr(A, guard_entailment, D) ->
            D=v(E,F,G),
            (   E/\1=:=1 ->
                hpattvars:put_attr(A, guard_entailment, v(E,[C|F],G))
            ;   H is E\/1,
                hpattvars:put_attr(A, guard_entailment, v(H,[C],G))
            )
        ;   hpattvars:put_attr(A, guard_entailment, v(1,[C],[]))
        ),
        true,
        'attach_known/1'(B, C).
'detach_known/1'([], _).
'detach_known/1'([A|B], C) :-
        (   hpattvars:get_attr(A, guard_entailment, D) ->
            D=v(E,F,G),
            (   E/\1=:=1 ->
                chr_runtime:'chr sbag_del_element'(F, C, H),
                (   H==[] ->
                    I is E/\ -2,
                    (   I==0 ->
                        hpattvars:del_attr(A, guard_entailment)
                    ;   hpattvars:put_attr(A, guard_entailment, v(I,[],G))
                    )
                ;   hpattvars:put_attr(A, guard_entailment, v(E,H,G))
                )
            ;   true
            )
        ;   true
        ),
        'detach_known/1'(B, C).
'attach_variables/1'([], _).
'attach_variables/1'([A|B], C) :-
        (   hpattvars:get_attr(A, guard_entailment, D) ->
            D=v(E,F,G),
            (   E/\2=:=2 ->
                hpattvars:put_attr(A, guard_entailment, v(E,F,[C|G]))
            ;   H is E\/2,
                hpattvars:put_attr(A, guard_entailment, v(H,F,[C]))
            )
        ;   hpattvars:put_attr(A, guard_entailment, v(2,[],[C]))
        ),
        true,
        'attach_variables/1'(B, C).
'detach_variables/1'([], _).
'detach_variables/1'([A|B], C) :-
        (   hpattvars:get_attr(A, guard_entailment, D) ->
            D=v(E,F,G),
            (   E/\2=:=2 ->
                chr_runtime:'chr sbag_del_element'(G, C, H),
                (   H==[] ->
                    I is E/\ -3,
                    (   I==0 ->
                        hpattvars:del_attr(A, guard_entailment)
                    ;   hpattvars:put_attr(A, guard_entailment, v(I,F,[]))
                    )
                ;   hpattvars:put_attr(A, guard_entailment, v(E,F,H))
                )
            ;   true
            )
        ;   true
        ),
        'detach_variables/1'(B, C).
attach_increment([], _).
attach_increment([A|B], v(C,D,E)) :-
        chr_runtime:'chr not_locked'(A),
        (   hpattvars:get_attr(A, guard_entailment, F) ->
            F=v(G,H,I),
            sort(H, J),
            chr_runtime:'chr merge_attributes'(D, J, K),
            sort(I, L),
            chr_runtime:'chr merge_attributes'(E, L, M),
            N is C\/G,
            hpattvars:put_attr(A, guard_entailment, v(N,K,M))
        ;   hpattvars:put_attr(A, guard_entailment, v(C,D,E))
        ),
        attach_increment(B, v(C,D,E)).
attr_unify_hook(v(A,B,C), D) :-
        sort(B, E),
        sort(C, F),
        (   var(D) ->
            (   hpattvars:get_attr(D, guard_entailment, G) ->
                G=v(H,I,J),
                sort(I, K),
                chr_runtime:'chr merge_attributes'(E, K, L),
                sort(J, M),
                chr_runtime:'chr merge_attributes'(F, M, N),
                O is A\/H,
                hpattvars:put_attr(D, guard_entailment, v(O,L,N)),
                '$run_suspensions_known/1'(L),
                '$run_suspensions_variables/1'(N),
                true
            ;   hpattvars:put_attr(D, guard_entailment, v(A,E,F)),
                '$run_suspensions_known/1'(E),
                '$run_suspensions_variables/1'(F),
                true
            )
        ;   (   compound(D) ->
                hprolog:chr_term_variables(D, P),
                attach_increment(P, v(A,E,F))
            ;   true
            ),
            '$run_suspensions_known/1'(E),
            '$run_suspensions_variables/1'(F),
            true
        ).
'$activate_constraint_known/1'(A, B, C, D) :-
        arg(2, C, E),
        chr_runtime:'chr get_mutable'(F, E),
        chr_runtime:'chr update_mutable'(active, E),
        arg(4, C, G),
        chr_runtime:'chr get_mutable'(H, G),
        D is H+1,
        chr_runtime:'chr update_mutable'(D, G),
        (   F==not_stored_yet ->
            A=yes,
            C=suspension(_,_,_,_,_,_,I),
            hprolog:chr_term_variables([I], B),
            chr_runtime:'chr none_locked'(B)
        ;   B=[],
            A=no
        ).
'$activate_constraint_variables/1'(A, B, C, D) :-
        arg(2, C, E),
        chr_runtime:'chr get_mutable'(F, E),
        chr_runtime:'chr update_mutable'(active, E),
        arg(3, C, G),
        chr_runtime:'chr get_mutable'(H, G),
        D is H+1,
        chr_runtime:'chr update_mutable'(D, G),
        (   F==not_stored_yet ->
            A=yes,
            C=suspension(_,_,_,_,_,I),
            hprolog:chr_term_variables([I], B),
            chr_runtime:'chr none_locked'(B)
        ;   B=[],
            A=no
        ).
'$remove_constraint_internal_known/1'(suspension(_,A,_,_,_,_,B), C, D) :-
        chr_runtime:'chr get_mutable'(E, A),
        chr_runtime:'chr update_mutable'(removed, A),
        (   E==not_stored_yet ->
            C=[],
            D=no
        ;   D=yes,
            hprolog:chr_term_variables([B], C)
        ).
'$remove_constraint_internal_variables/1'(suspension(_,A,_,_,_,B), C, D) :-
        chr_runtime:'chr get_mutable'(E, A),
        chr_runtime:'chr update_mutable'(removed, A),
        (   E==not_stored_yet ->
            C=[],
            D=no
        ;   D=yes,
            hprolog:chr_term_variables([B], C)
        ).
'$allocate_constraint_known/1'(A, suspension(B,C,D,E,A,_,F), F) :-
        chr_runtime:'chr create_mutable'(0, E),
        chr_runtime:'chr create_mutable'(empty, D),
        chr_runtime:'chr create_mutable'(not_stored_yet, C),
        chr_runtime:'chr gen_id'(B).
'$insert_constraint_internal_variables/1'(yes, A, suspension(B,C,D,E,_,F), E, F) :-
        hprolog:chr_term_variables([F], A),
        chr_runtime:'chr none_locked'(A),
        chr_runtime:'chr create_mutable'(active, C),
        chr_runtime:'chr create_mutable'(0, D),
        true,
        chr_runtime:'chr gen_id'(B).
'$novel_production'(A, B) :-
        arg(3, A, C),
        chr_runtime:'chr get_mutable'(D, C),
        (   hprolog:get_ds(B, D, _) ->
            fail
        ;   true
        ).
'$extend_history'(A, B) :-
        arg(3, A, C),
        chr_runtime:'chr get_mutable'(D, C),
        hprolog:put_ds(B, D, x, E),
        chr_runtime:'chr update_mutable'(E, C).
'$run_suspensions_known/1'([]).
'$run_suspensions_known/1'([A|B]) :-
        arg(2, A, C),
        chr_runtime:'chr get_mutable'(D, C),
        (   D==active ->
            chr_runtime:'chr update_mutable'(triggered, C),
            arg(4, A, E),
            chr_runtime:'chr get_mutable'(F, E),
            G is F+1,
            chr_runtime:'chr update_mutable'(G, E),
            arg(5, A, H),
            call(H),
            chr_runtime:'chr get_mutable'(I, C),
            (   I==triggered ->
                chr_runtime:'chr update_mutable'(active, C)
            ;   true
            )
        ;   true
        ),
        '$run_suspensions_known/1'(B).
'$run_suspensions_variables/1'([]).
'$run_suspensions_variables/1'([A|B]) :-
        arg(2, A, C),
        chr_runtime:'chr get_mutable'(D, C),
        (   D==active ->
            chr_runtime:'chr update_mutable'(triggered, C),
            arg(3, A, E),
            chr_runtime:'chr get_mutable'(F, E),
            G is F+1,
            chr_runtime:'chr update_mutable'(G, E),
            arg(4, A, H),
            call(H),
            chr_runtime:'chr get_mutable'(I, C),
            (   I==triggered ->
                chr_runtime:'chr update_mutable'(active, C)
            ;   true
            )
        ;   true
        ),
        '$run_suspensions_variables/1'(B).
'$insert_in_store_known/1'(A) :-
        true,
        hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', B),
        hprolog:update_store('$chr_store_global_list_guard_entailment:known/1', [A|B]).
'$delete_from_store_known/1'(A) :-
        true,
        hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', B),
        chr_runtime:'chr sbag_del_element'(B, A, C),
        hprolog:update_store('$chr_store_global_list_guard_entailment:known/1', C).
'$insert_in_store_variables/1'(A) :-
        true,
        hprolog:get_store('$chr_store_global_list_guard_entailment:variables/1', B),
        hprolog:update_store('$chr_store_global_list_guard_entailment:variables/1', [A|B]).
'$delete_from_store_variables/1'(A) :-
        true,
        hprolog:get_store('$chr_store_global_list_guard_entailment:variables/1', B),
        chr_runtime:'chr sbag_del_element'(B, A, C),
        hprolog:update_store('$chr_store_global_list_guard_entailment:variables/1', C).
'$enumerate_constraints'(A) :-
        (   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', B),
            member(C, B),
            C=suspension(_,_,_,_,_,_,D),
            A=..[known,D]
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:variables/1', E),
            member(F, E),
            F=suspension(_,_,_,_,_,G),
            A=..[variables,G]
        ).
'$chr_initialization' :-
        hprolog:init_store('$chr_store_global_list_guard_entailment:variables/1', []),
        hprolog:init_store('$chr_store_global_list_guard_entailment:cleanup/0', []),
        hprolog:init_store('$chr_store_global_list_guard_entailment:test/1', []),
        hprolog:init_store('$chr_store_global_list_guard_entailment:known/1', []),
        true.
(:-'$chr_initialization').
known(A) :-
        'known/1__0'(A, _).
'known/1__0'(A, B) :-
        (   chr_runtime:'chr newvia_1'(A, C) ->
            hpattvars:get_attr(C, guard_entailment, D),
            D=v(_,E,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', E)
        ),
        member(F, E),
        F=suspension(_,G,_,_,_,_,H),
        get_mutable(active, G),
        H==A, !,
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, I, J),
            (   J==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(I, B)
            ;   true
            )
        ).
'known/1__0'(A, B) :-
        nonvar(A),
        A=(C>D), !,
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, E, F),
            (   F==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(E, B)
            ;   true
            )
        ),
        known(D<C).
'known/1__0'(A, B) :-
        nonvar(A),
        A=(C>=D), !,
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, E, F),
            (   F==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(E, B)
            ;   true
            )
        ),
        known(D=<C).
'known/1__0'(A, B) :-
        nonvar(A),
        A=(C<D), !,
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, E, F),
            (   F==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(E, B)
            ;   true
            )
        ),
        known(C=<D),
        known(C=\=D).
'known/1__0'(A, B) :-
        nonvar(A),
        A=(C is D), !,
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, E, F),
            (   F==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(E, B)
            ;   true
            )
        ),
        known(C=:=D).
'known/1__0'(A, B) :-
        nonvar(A),
        A=(C==D),
        (   var(B) ->
            '$allocate_constraint_known/1'(guard_entailment:'known/1__0'(A,B), B, A)
        ;   true
        ),
        '$novel_production'(B, 21),
        number(C), !,
        '$extend_history'(B, 21),
        '$activate_constraint_known/1'(E, F, B, G),
        (   E==yes ->
            '$insert_in_store_known/1'(B),
            'attach_known/1'(F, B)
        ;   true
        ),
        known(C=:=D),
        (   B=suspension(_,H,_,I,_,_,_),
            get_mutable(active, H),
            get_mutable(G, I) ->
            chr_runtime:'chr update_mutable'(inactive, H),
            'known/1__1'(A, B)
        ;   true
        ).
'known/1__0'(A, B) :-
        (   var(B) ->
            '$allocate_constraint_known/1'(guard_entailment:'known/1__0'(A,B), B, A)
        ;   true
        ),
        'known/1__1'(A, B).
'known/1__1'(A, B) :-
        nonvar(A),
        A=(C==D),
        '$novel_production'(B, 22),
        number(D), !,
        '$extend_history'(B, 22),
        '$activate_constraint_known/1'(E, F, B, G),
        (   E==yes ->
            '$insert_in_store_known/1'(B),
            'attach_known/1'(F, B)
        ;   true
        ),
        known(C=:=D),
        (   B=suspension(_,H,_,I,_,_,_),
            get_mutable(active, H),
            get_mutable(G, I) ->
            chr_runtime:'chr update_mutable'(inactive, H),
            'known/1__2'(A, B)
        ;   true
        ).
'known/1__1'(A, B) :-
        'known/1__2'(A, B).
'known/1__2'(A, B) :-
        nonvar(A),
        A=(C\==D),
        '$novel_production'(B, 23),
        number(C), !,
        '$extend_history'(B, 23),
        '$activate_constraint_known/1'(E, F, B, G),
        (   E==yes ->
            '$insert_in_store_known/1'(B),
            'attach_known/1'(F, B)
        ;   true
        ),
        known(C=\=D),
        (   B=suspension(_,H,_,I,_,_,_),
            get_mutable(active, H),
            get_mutable(G, I) ->
            chr_runtime:'chr update_mutable'(inactive, H),
            'known/1__3'(A, B)
        ;   true
        ).
'known/1__2'(A, B) :-
        'known/1__3'(A, B).
'known/1__3'(A, B) :-
        nonvar(A),
        A=(C\==D),
        '$novel_production'(B, 24),
        number(D), !,
        '$extend_history'(B, 24),
        '$activate_constraint_known/1'(E, F, B, G),
        (   E==yes ->
            '$insert_in_store_known/1'(B),
            'attach_known/1'(F, B)
        ;   true
        ),
        known(C=\=D),
        (   B=suspension(_,H,_,I,_,_,_),
            get_mutable(active, H),
            get_mutable(G, I) ->
            chr_runtime:'chr update_mutable'(inactive, H),
            'known/1__4'(A, B)
        ;   true
        ).
'known/1__3'(A, B) :-
        'known/1__4'(A, B).
'known/1__4'(_, A) :-
        hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', B),
        member(C, B),
        C=suspension(_,D,_,_,_,_,E),
        get_mutable(active, D),
        E==fail, !,
        (   var(A) ->
            true
        ;   '$remove_constraint_internal_known/1'(A, F, G),
            (   G==yes ->
                '$delete_from_store_known/1'(A),
                'detach_known/1'(F, A)
            ;   true
            )
        ).
'known/1__4'(A, B) :-
        A==fail,
        hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', C), !,
        'known/1__4__0'(C, A, B).
'known/1__4__0'([], A, B) :-
        'known/1__5'(A, B).
'known/1__4__0'([A|B], C, D) :-
        (   A=suspension(_,E,_,_,_,_,_),
            get_mutable(active, E) ->
            '$remove_constraint_internal_known/1'(A, F, G),
            (   G==yes ->
                '$delete_from_store_known/1'(A),
                'detach_known/1'(F, A)
            ;   true
            ),
            'known/1__4__0'(B, C, D)
        ;   'known/1__4__0'(B, C, D)
        ).
'known/1__4'(A, B) :-
        'known/1__5'(A, B).
'known/1__5'(A, B) :-
        nonvar(A),
        A=(C,D), !,
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, E, F),
            (   F==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(E, B)
            ;   true
            )
        ),
        known(C),
        known(D).
'known/1__5'(A, B) :-
        nonvar(A),
        A=(C=:=D),
        D==C, !,
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, E, F),
            (   F==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(E, B)
            ;   true
            )
        ).
'known/1__5'(A, B) :-
        nonvar(A),
        A=(C==D),
        D==C, !,
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, E, F),
            (   F==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(E, B)
            ;   true
            )
        ).
'known/1__5'(A, B) :-
        nonvar(A),
        A=(C=<D),
        D==C, !,
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, E, F),
            (   F==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(E, B)
            ;   true
            )
        ).
'known/1__5'(A, B) :-
        nonvar(A),
        A=(C=D),
        D==C, !,
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, E, F),
            (   F==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(E, B)
            ;   true
            )
        ).
'known/1__5'(A, B) :-
        nonvar(A),
        A=(C=D),
        var(C), !,
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, E, F),
            (   F==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(E, B)
            ;   true
            )
        ),
        C=D.
'known/1__5'(A, B) :-
        nonvar(A),
        A=(C=D),
        var(D), !,
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, E, F),
            (   F==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(E, B)
            ;   true
            )
        ),
        C=D.
'known/1__5'(A, B) :-
        nonvar(A),
        A=(C\=D),
        ground(D),
        ground(C),
        chr_runtime:'chr lock'(C),
        chr_runtime:'chr lock'(D),
        C=D,
        chr_runtime:'chr unlock'(C),
        chr_runtime:'chr unlock'(D), !,
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, E, F),
            (   F==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(E, B)
            ;   true
            )
        ),
        known(fail).
'known/1__5'(A, B) :-
        nonvar(A),
        A=functor(C,D,E),
        ground(E),
        ground(D),
        var(C),
        hprolog:get_store('$chr_store_global_list_guard_entailment:variables/1', F),
        member(G, F),
        G=suspension(_,H,_,_,_,I),
        get_mutable(active, H), !,
        '$remove_constraint_internal_variables/1'(G, J, K),
        (   K==yes ->
            '$delete_from_store_variables/1'(G),
            'detach_variables/1'(J, G)
        ;   true
        ),
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, L, M),
            (   M==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(L, B)
            ;   true
            )
        ),
        functor(C, D, E),
        C=..[_|N],
        append(N, I, O),
        variables(O).
'known/1__5'(A, B) :-
        nonvar(A),
        A=functor(C,D,E),
        nonvar(C),
        chr_runtime:'chr lock'(C),
        chr_runtime:'chr lock'(D),
        chr_runtime:'chr lock'(E),
        \+functor(C,D,E),
        chr_runtime:'chr unlock'(C),
        chr_runtime:'chr unlock'(D),
        chr_runtime:'chr unlock'(E), !,
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, F, G),
            (   G==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(F, B)
            ;   true
            )
        ),
        known(fail).
'known/1__5'(A, B) :-
        nonvar(A),
        A=(\+C),
        nonvar(C),
        C=functor(D,E,F),
        nonvar(D),
        chr_runtime:'chr lock'(D),
        chr_runtime:'chr lock'(E),
        chr_runtime:'chr lock'(F),
        functor(D, E, F),
        chr_runtime:'chr unlock'(D),
        chr_runtime:'chr unlock'(E),
        chr_runtime:'chr unlock'(F), !,
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, G, H),
            (   H==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(G, B)
            ;   true
            )
        ),
        known(fail).
'known/1__5'(A, B) :-
        nonvar(A),
        A=functor(C,D,E),
        nonvar(E),
        nonvar(D),
        (   chr_runtime:'chr newvia_1'(C, F) ->
            hpattvars:get_attr(F, guard_entailment, G),
            G=v(_,H,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', H)
        ),
        member(I, H),
        I=suspension(_,J,_,_,_,_,functor(K,L,M)),
        get_mutable(active, J),
        nonvar(functor(K,L,M)),
        K==C,
        nonvar(M),
        nonvar(L), !,
        '$remove_constraint_internal_known/1'(I, N, O),
        (   O==yes ->
            '$delete_from_store_known/1'(I),
            'detach_known/1'(N, I)
        ;   true
        ),
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, P, Q),
            (   Q==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(P, B)
            ;   true
            )
        ),
        known(fail).
'known/1__5'(A, B) :-
        nonvar(A),
        A=(C\=D),
        D==C, !,
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, E, F),
            (   F==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(E, B)
            ;   true
            )
        ),
        known(fail).
'known/1__5'(A, B) :-
        nonvar(A),
        A=(C=D),
        chr_runtime:'chr lock'(C),
        functor(C, E, F),
        chr_runtime:'chr unlock'(C), !,
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, G, H),
            (   H==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(G, B)
            ;   true
            )
        ),
        (   functor(D, E, F),
            C=D ->
            true
        ;   known(fail)
        ).
'known/1__5'(A, B) :-
        nonvar(A),
        A=(C\=D),
        nonvar(D),
        var(C),
        chr_runtime:'chr lock'(D),
        functor(D, E, F),
        F>0,
        chr_runtime:'chr unlock'(D), !,
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, G, H),
            (   H==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(G, B)
            ;   true
            )
        ),
        length(I, F),
        D=..[E|J],
        K=..[E|I],
        add_args_nunif(J, I, L),
        M=(\+functor(C,E,F);C=K,L),
        known(M).
'known/1__5'(A, B) :-
        nonvar(A),
        A=(C\=D),
        nonvar(D),
        nonvar(C),
        chr_runtime:'chr lock'(C),
        functor(C, E, F),
        chr_runtime:'chr unlock'(C), !,
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, G, H),
            (   H==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(G, B)
            ;   true
            )
        ),
        (   functor(D, E, F) ->
            C=..[E|I],
            D=..[E|J],
            add_args_nunif(I, J, K),
            known(K)
        ;   true
        ).
'known/1__5'(A, B) :-
        nonvar(A),
        A=(C\=D),
        '$novel_production'(B, 42), !,
        '$extend_history'(B, 42),
        '$activate_constraint_known/1'(E, F, B, G),
        (   E==yes ->
            '$insert_in_store_known/1'(B),
            'attach_known/1'(F, B)
        ;   true
        ),
        known(D\=C),
        (   B=suspension(_,H,_,I,_,_,_),
            get_mutable(active, H),
            get_mutable(G, I) ->
            chr_runtime:'chr update_mutable'(inactive, H),
            'known/1__6'(A, B)
        ;   true
        ).
'known/1__5'(A, B) :-
        'known/1__6'(A, B).
'known/1__6'(A, B) :-
        nonvar(A),
        A=(C=<D),
        number(D),
        number(C),
        C>D, !,
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, E, F),
            (   F==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(E, B)
            ;   true
            )
        ),
        known(fail).
'known/1__6'(A, B) :-
        nonvar(A),
        A=(C=<D),
        number(D),
        (   chr_runtime:'chr newvia_1'(C, E) ->
            hpattvars:get_attr(E, guard_entailment, F),
            F=v(_,G,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', G)
        ),
        member(H, G),
        H=suspension(_,I,_,_,_,_,J=<K),
        get_mutable(active, I),
        nonvar(J=<K),
        J==C,
        number(K),
        K=<D, !,
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, L, M),
            (   M==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(L, B)
            ;   true
            )
        ).
'known/1__6'(A, B) :-
        nonvar(A),
        A=(C=<D),
        (   chr_runtime:'chr newvia_1'(C, E) ->
            hpattvars:get_attr(E, guard_entailment, F),
            F=v(_,G,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', G)
        ), !,
        'known/1__6__0'(G, A, B, C, D).
'known/1__6__0'([], A, B, _, _) :-
        'known/1__7'(A, B).
'known/1__6__0'([A|B], C, D, E, F) :-
        (   A=suspension(_,G,_,_,_,_,H),
            get_mutable(active, G),
            nonvar(H),
            H=(I=<J),
            I==E,
            number(J),
            number(F),
            F=<J ->
            '$remove_constraint_internal_known/1'(A, K, L),
            (   L==yes ->
                '$delete_from_store_known/1'(A),
                'detach_known/1'(K, A)
            ;   true
            ),
            'known/1__6__0'(B, C, D, E, F)
        ;   'known/1__6__0'(B, C, D, E, F)
        ).
'known/1__6'(A, B) :-
        'known/1__7'(A, B).
'known/1__7'(A, B) :-
        nonvar(A),
        A=(C=<D),
        number(C),
        (   chr_runtime:'chr newvia_1'(D, E) ->
            hpattvars:get_attr(E, guard_entailment, F),
            F=v(_,G,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', G)
        ),
        member(H, G),
        H=suspension(_,I,_,_,_,_,J=<K),
        get_mutable(active, I),
        nonvar(J=<K),
        K==D,
        number(J),
        C=<J, !,
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, L, M),
            (   M==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(L, B)
            ;   true
            )
        ).
'known/1__7'(A, B) :-
        nonvar(A),
        A=(C=<D),
        (   chr_runtime:'chr newvia_1'(D, E) ->
            hpattvars:get_attr(E, guard_entailment, F),
            F=v(_,G,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', G)
        ), !,
        'known/1__7__0'(G, A, B, C, D).
'known/1__7__0'([], A, B, _, _) :-
        'known/1__8'(A, B).
'known/1__7__0'([A|B], C, D, E, F) :-
        (   A=suspension(_,G,_,_,_,_,H),
            get_mutable(active, G),
            nonvar(H),
            H=(I=<J),
            J==F,
            number(E),
            number(I),
            I=<E ->
            '$remove_constraint_internal_known/1'(A, K, L),
            (   L==yes ->
                '$delete_from_store_known/1'(A),
                'detach_known/1'(K, A)
            ;   true
            ),
            'known/1__7__0'(B, C, D, E, F)
        ;   'known/1__7__0'(B, C, D, E, F)
        ).
'known/1__7'(A, B) :-
        'known/1__8'(A, B).
'known/1__8'(A, B) :-
        nonvar(A),
        A=(C=<D),
        (   chr_runtime:'chr newvia_2'(C, D, E) ->
            hpattvars:get_attr(E, guard_entailment, F),
            F=v(_,G,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', G)
        ),
        member(H, G),
        H=suspension(_,I,_,_,_,_,J=<K),
        get_mutable(active, I),
        nonvar(J=<K),
        J==D,
        K==C, !,
        '$remove_constraint_internal_known/1'(H, L, M),
        (   M==yes ->
            '$delete_from_store_known/1'(H),
            'detach_known/1'(L, H)
        ;   true
        ),
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, N, O),
            (   O==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(N, B)
            ;   true
            )
        ),
        known(C=:=D).
'known/1__8'(A, B) :-
        nonvar(A),
        A=(C=<D),
        (   chr_runtime:'chr newvia_1'(D, E) ->
            hpattvars:get_attr(E, guard_entailment, F),
            F=v(_,G,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', G)
        ), !,
        'known/1__8__0'(G, A, B, C, D).
'known/1__8__0'([], A, B, _, _) :-
        'known/1__9'(A, B).
'known/1__8__0'([A|B], C, D, E, F) :-
        (   A=suspension(_,G,_,_,_,_,H),
            get_mutable(active, G),
            nonvar(H),
            H=(I=<J),
            I==F,
            K=t(47,D,A),
            '$novel_production'(D, K),
            '$novel_production'(A, K) ->
            '$extend_history'(D, K),
            '$activate_constraint_known/1'(L, M, D, N),
            (   L==yes ->
                '$insert_in_store_known/1'(D),
                'attach_known/1'(M, D)
            ;   true
            ),
            known(E=<J),
            (   D=suspension(_,O,_,P,_,_,_),
                get_mutable(active, O),
                get_mutable(N, P) ->
                chr_runtime:'chr update_mutable'(inactive, O),
                'known/1__8__0'(B, C, D, E, F)
            ;   true
            )
        ;   'known/1__8__0'(B, C, D, E, F)
        ).
'known/1__8'(A, B) :-
        'known/1__9'(A, B).
'known/1__9'(A, B) :-
        nonvar(A),
        A=(C=<D),
        (   chr_runtime:'chr newvia_1'(C, E) ->
            hpattvars:get_attr(E, guard_entailment, F),
            F=v(_,G,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', G)
        ), !,
        'known/1__9__0'(G, A, B, C, D).
'known/1__9__0'([], A, B, _, _) :-
        'known/1__10'(A, B).
'known/1__9__0'([A|B], C, D, E, F) :-
        (   A=suspension(_,G,_,_,_,_,H),
            get_mutable(active, G),
            nonvar(H),
            H=(I=<J),
            J==E,
            K=t(47,A,D),
            '$novel_production'(A, K),
            '$novel_production'(D, K) ->
            '$extend_history'(D, K),
            '$activate_constraint_known/1'(L, M, D, N),
            (   L==yes ->
                '$insert_in_store_known/1'(D),
                'attach_known/1'(M, D)
            ;   true
            ),
            known(I=<F),
            (   D=suspension(_,O,_,P,_,_,_),
                get_mutable(active, O),
                get_mutable(N, P) ->
                chr_runtime:'chr update_mutable'(inactive, O),
                'known/1__9__0'(B, C, D, E, F)
            ;   true
            )
        ;   'known/1__9__0'(B, C, D, E, F)
        ).
'known/1__9'(A, B) :-
        'known/1__10'(A, B).
'known/1__10'(A, B) :-
        nonvar(A),
        A=(C=<D),
        (   chr_runtime:'chr newvia_1'(D, E) ->
            hpattvars:get_attr(E, guard_entailment, F),
            F=v(_,G,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', G)
        ), !,
        'known/1__10__0'(G, A, B, C, D).
'known/1__10__0'([], A, B, _, _) :-
        'known/1__11'(A, B).
'known/1__10__0'([A|B], C, D, E, F) :-
        (   A=suspension(_,G,_,_,_,_,H),
            get_mutable(active, G),
            nonvar(H),
            H=(I=\=J),
            I==F,
            (   chr_runtime:'chr newvia_2'(F, J, K) ->
                hpattvars:get_attr(K, guard_entailment, L),
                L=v(_,M,_)
            ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', M)
            ) ->
            'known/1__10__1'(M, J, A, B, C, D, E, F)
        ;   'known/1__10__0'(B, C, D, E, F)
        ).
'known/1__10__1'([], _, _, A, B, C, D, E) :-
        'known/1__10__0'(A, B, C, D, E).
'known/1__10__1'([A|B], C, D, E, F, G, H, I) :-
        (   A=suspension(_,J,_,_,_,_,K),
            get_mutable(active, J),
            nonvar(K),
            K=(L=<M),
            L==I,
            M==C,
            (   chr_runtime:'chr newvia_2'(H, I, N) ->
                hpattvars:get_attr(N, guard_entailment, O),
                O=v(_,P,_)
            ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', P)
            ) ->
            'known/1__10__2'(P, A, B, C, D, E, F, G, H, I)
        ;   'known/1__10__1'(B, C, D, E, F, G, H, I)
        ).
'known/1__10__2'([], _, A, B, C, D, E, F, G, H) :-
        'known/1__10__1'(A, B, C, D, E, F, G, H).
'known/1__10__2'([A|B], C, D, E, F, G, H, I, J, K) :-
        (   A=suspension(_,L,_,_,_,_,M),
            get_mutable(active, L),
            A\==F,
            nonvar(M),
            M=(N=\=O),
            N==J,
            O==K,
            P=t(48,I,A,C,F),
            '$novel_production'(I, P),
            '$novel_production'(A, P),
            '$novel_production'(C, P),
            '$novel_production'(F, P) ->
            '$extend_history'(I, P),
            '$activate_constraint_known/1'(Q, R, I, S),
            (   Q==yes ->
                '$insert_in_store_known/1'(I),
                'attach_known/1'(R, I)
            ;   true
            ),
            known(J=\=E),
            (   I=suspension(_,T,_,U,_,_,_),
                get_mutable(active, T),
                get_mutable(S, U) ->
                chr_runtime:'chr update_mutable'(inactive, T),
                'known/1__10__2'(B, C, D, E, F, G, H, I, J, K)
            ;   true
            )
        ;   'known/1__10__2'(B, C, D, E, F, G, H, I, J, K)
        ).
'known/1__10'(A, B) :-
        'known/1__11'(A, B).
'known/1__11'(A, B) :-
        nonvar(A),
        A=(C=\=D),
        (   chr_runtime:'chr newvia_1'(D, E) ->
            hpattvars:get_attr(E, guard_entailment, F),
            F=v(_,G,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', G)
        ), !,
        'known/1__11__0'(G, A, B, C, D).
'known/1__11__0'([], A, B, _, _) :-
        'known/1__12'(A, B).
'known/1__11__0'([A|B], C, D, E, F) :-
        (   A=suspension(_,G,_,_,_,_,H),
            get_mutable(active, G),
            nonvar(H),
            H=(I=\=J),
            I==F,
            (   chr_runtime:'chr newvia_2'(F, J, K) ->
                hpattvars:get_attr(K, guard_entailment, L),
                L=v(_,M,_)
            ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', M)
            ) ->
            'known/1__11__1'(M, J, A, B, C, D, E, F)
        ;   'known/1__11__0'(B, C, D, E, F)
        ).
'known/1__11__1'([], _, _, A, B, C, D, E) :-
        'known/1__11__0'(A, B, C, D, E).
'known/1__11__1'([A|B], C, D, E, F, G, H, I) :-
        (   A=suspension(_,J,_,_,_,_,K),
            get_mutable(active, J),
            nonvar(K),
            K=(L=<M),
            L==I,
            M==C,
            (   chr_runtime:'chr newvia_2'(H, I, N) ->
                hpattvars:get_attr(N, guard_entailment, O),
                O=v(_,P,_)
            ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', P)
            ) ->
            'known/1__11__2'(P, A, B, C, D, E, F, G, H, I)
        ;   'known/1__11__1'(B, C, D, E, F, G, H, I)
        ).
'known/1__11__2'([], _, A, B, C, D, E, F, G, H) :-
        'known/1__11__1'(A, B, C, D, E, F, G, H).
'known/1__11__2'([A|B], C, D, E, F, G, H, I, J, K) :-
        (   A=suspension(_,L,_,_,_,_,M),
            get_mutable(active, L),
            A\==C,
            nonvar(M),
            M=(N=<O),
            N==J,
            O==K,
            P=t(48,A,I,C,F),
            '$novel_production'(A, P),
            '$novel_production'(I, P),
            '$novel_production'(C, P),
            '$novel_production'(F, P) ->
            '$extend_history'(I, P),
            '$activate_constraint_known/1'(Q, R, I, S),
            (   Q==yes ->
                '$insert_in_store_known/1'(I),
                'attach_known/1'(R, I)
            ;   true
            ),
            known(J=\=E),
            (   I=suspension(_,T,_,U,_,_,_),
                get_mutable(active, T),
                get_mutable(S, U) ->
                chr_runtime:'chr update_mutable'(inactive, T),
                'known/1__11__2'(B, C, D, E, F, G, H, I, J, K)
            ;   true
            )
        ;   'known/1__11__2'(B, C, D, E, F, G, H, I, J, K)
        ).
'known/1__11'(A, B) :-
        'known/1__12'(A, B).
'known/1__12'(A, B) :-
        nonvar(A),
        A=(C=<D),
        (   chr_runtime:'chr newvia_1'(C, E) ->
            hpattvars:get_attr(E, guard_entailment, F),
            F=v(_,G,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', G)
        ), !,
        'known/1__12__0'(G, A, B, C, D).
'known/1__12__0'([], A, B, _, _) :-
        'known/1__13'(A, B).
'known/1__12__0'([A|B], C, D, E, F) :-
        (   A=suspension(_,G,_,_,_,_,H),
            get_mutable(active, G),
            nonvar(H),
            H=(I=<J),
            J==E,
            (   chr_runtime:'chr newvia_2'(E, F, K) ->
                hpattvars:get_attr(K, guard_entailment, L),
                L=v(_,M,_)
            ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', M)
            ) ->
            'known/1__12__1'(M, I, A, B, C, D, E, F)
        ;   'known/1__12__0'(B, C, D, E, F)
        ).
'known/1__12__1'([], _, _, A, B, C, D, E) :-
        'known/1__12__0'(A, B, C, D, E).
'known/1__12__1'([A|B], C, D, E, F, G, H, I) :-
        (   A=suspension(_,J,_,_,_,_,K),
            get_mutable(active, J),
            nonvar(K),
            K=(L=\=M),
            L==H,
            M==I,
            (   chr_runtime:'chr newvia_2'(C, H, N) ->
                hpattvars:get_attr(N, guard_entailment, O),
                O=v(_,P,_)
            ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', P)
            ) ->
            'known/1__12__2'(P, A, B, C, D, E, F, G, H, I)
        ;   'known/1__12__1'(B, C, D, E, F, G, H, I)
        ).
'known/1__12__2'([], _, A, B, C, D, E, F, G, H) :-
        'known/1__12__1'(A, B, C, D, E, F, G, H).
'known/1__12__2'([A|B], C, D, E, F, G, H, I, J, K) :-
        (   A=suspension(_,L,_,_,_,_,M),
            get_mutable(active, L),
            A\==C,
            nonvar(M),
            M=(N=\=O),
            N==E,
            O==J,
            P=t(48,F,A,I,C),
            '$novel_production'(F, P),
            '$novel_production'(A, P),
            '$novel_production'(I, P),
            '$novel_production'(C, P) ->
            '$extend_history'(I, P),
            '$activate_constraint_known/1'(Q, R, I, S),
            (   Q==yes ->
                '$insert_in_store_known/1'(I),
                'attach_known/1'(R, I)
            ;   true
            ),
            known(E=\=K),
            (   I=suspension(_,T,_,U,_,_,_),
                get_mutable(active, T),
                get_mutable(S, U) ->
                chr_runtime:'chr update_mutable'(inactive, T),
                'known/1__12__2'(B, C, D, E, F, G, H, I, J, K)
            ;   true
            )
        ;   'known/1__12__2'(B, C, D, E, F, G, H, I, J, K)
        ).
'known/1__12'(A, B) :-
        'known/1__13'(A, B).
'known/1__13'(A, B) :-
        nonvar(A),
        A=(C=\=D),
        (   chr_runtime:'chr newvia_1'(C, E) ->
            hpattvars:get_attr(E, guard_entailment, F),
            F=v(_,G,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', G)
        ), !,
        'known/1__13__0'(G, A, B, C, D).
'known/1__13__0'([], A, B, _, _) :-
        'known/1__14'(A, B).
'known/1__13__0'([A|B], C, D, E, F) :-
        (   A=suspension(_,G,_,_,_,_,H),
            get_mutable(active, G),
            nonvar(H),
            H=(I=<J),
            J==E,
            (   chr_runtime:'chr newvia_2'(E, F, K) ->
                hpattvars:get_attr(K, guard_entailment, L),
                L=v(_,M,_)
            ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', M)
            ) ->
            'known/1__13__1'(M, I, A, B, C, D, E, F)
        ;   'known/1__13__0'(B, C, D, E, F)
        ).
'known/1__13__1'([], _, _, A, B, C, D, E) :-
        'known/1__13__0'(A, B, C, D, E).
'known/1__13__1'([A|B], C, D, E, F, G, H, I) :-
        (   A=suspension(_,J,_,_,_,_,K),
            get_mutable(active, J),
            A\==D,
            nonvar(K),
            K=(L=<M),
            L==H,
            M==I,
            (   chr_runtime:'chr newvia_2'(C, H, N) ->
                hpattvars:get_attr(N, guard_entailment, O),
                O=v(_,P,_)
            ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', P)
            ) ->
            'known/1__13__2'(P, A, B, C, D, E, F, G, H, I)
        ;   'known/1__13__1'(B, C, D, E, F, G, H, I)
        ).
'known/1__13__2'([], _, A, B, C, D, E, F, G, H) :-
        'known/1__13__1'(A, B, C, D, E, F, G, H).
'known/1__13__2'([A|B], C, D, E, F, G, H, I, J, K) :-
        (   A=suspension(_,L,_,_,_,_,M),
            get_mutable(active, L),
            nonvar(M),
            M=(N=\=O),
            N==E,
            O==J,
            P=t(48,F,A,C,I),
            '$novel_production'(F, P),
            '$novel_production'(A, P),
            '$novel_production'(C, P),
            '$novel_production'(I, P) ->
            '$extend_history'(I, P),
            '$activate_constraint_known/1'(Q, R, I, S),
            (   Q==yes ->
                '$insert_in_store_known/1'(I),
                'attach_known/1'(R, I)
            ;   true
            ),
            known(E=\=K),
            (   I=suspension(_,T,_,U,_,_,_),
                get_mutable(active, T),
                get_mutable(S, U) ->
                chr_runtime:'chr update_mutable'(inactive, T),
                'known/1__13__2'(B, C, D, E, F, G, H, I, J, K)
            ;   true
            )
        ;   'known/1__13__2'(B, C, D, E, F, G, H, I, J, K)
        ).
'known/1__13'(A, B) :-
        'known/1__14'(A, B).
'known/1__14'(A, B) :-
        nonvar(A),
        A=(C=:=D),
        number(D),
        number(C),
        C=\=D, !,
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, E, F),
            (   F==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(E, B)
            ;   true
            )
        ),
        known(fail).
'known/1__14'(A, B) :-
        nonvar(A),
        A=(C=\=D),
        number(D),
        number(C),
        C=:=D, !,
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, E, F),
            (   F==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(E, B)
            ;   true
            )
        ),
        known(fail).
'known/1__14'(A, B) :-
        nonvar(A),
        A=(C=\=D),
        D==C, !,
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, E, F),
            (   F==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(E, B)
            ;   true
            )
        ),
        known(fail).
'known/1__14'(A, B) :-
        nonvar(A),
        A=(C=:=D),
        (   chr_runtime:'chr newvia_2'(C, D, E) ->
            hpattvars:get_attr(E, guard_entailment, F),
            F=v(_,G,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', G)
        ),
        member(H, G),
        H=suspension(_,I,_,_,_,_,J=\=K),
        get_mutable(active, I),
        nonvar(J=\=K),
        J==C,
        K==D, !,
        '$remove_constraint_internal_known/1'(H, L, M),
        (   M==yes ->
            '$delete_from_store_known/1'(H),
            'detach_known/1'(L, H)
        ;   true
        ),
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, N, O),
            (   O==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(N, B)
            ;   true
            )
        ),
        known(fail).
'known/1__14'(A, B) :-
        nonvar(A),
        A=(C=\=D),
        (   chr_runtime:'chr newvia_2'(C, D, E) ->
            hpattvars:get_attr(E, guard_entailment, F),
            F=v(_,G,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', G)
        ),
        member(H, G),
        H=suspension(_,I,_,_,_,_,J=:=K),
        get_mutable(active, I),
        nonvar(J=:=K),
        J==C,
        K==D, !,
        '$remove_constraint_internal_known/1'(H, L, M),
        (   M==yes ->
            '$delete_from_store_known/1'(H),
            'detach_known/1'(L, H)
        ;   true
        ),
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, N, O),
            (   O==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(N, B)
            ;   true
            )
        ),
        known(fail).
'known/1__14'(A, B) :-
        nonvar(A),
        A=(C=:=D),
        (   chr_runtime:'chr newvia_1'(D, E) ->
            hpattvars:get_attr(E, guard_entailment, F),
            F=v(_,G,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', G)
        ), !,
        'known/1__14__0'(G, A, B, C, D).
'known/1__14__0'([], A, B, _, _) :-
        'known/1__15'(A, B).
'known/1__14__0'([A|B], C, D, E, F) :-
        (   A=suspension(_,G,_,_,_,_,H),
            get_mutable(active, G),
            nonvar(H),
            H=(I=:=J),
            I==F,
            K=t(53,D,A),
            '$novel_production'(D, K),
            '$novel_production'(A, K),
            E\==J ->
            '$extend_history'(D, K),
            '$activate_constraint_known/1'(L, M, D, N),
            (   L==yes ->
                '$insert_in_store_known/1'(D),
                'attach_known/1'(M, D)
            ;   true
            ),
            known(E=:=J),
            (   D=suspension(_,O,_,P,_,_,_),
                get_mutable(active, O),
                get_mutable(N, P) ->
                chr_runtime:'chr update_mutable'(inactive, O),
                'known/1__14__0'(B, C, D, E, F)
            ;   true
            )
        ;   'known/1__14__0'(B, C, D, E, F)
        ).
'known/1__14'(A, B) :-
        'known/1__15'(A, B).
'known/1__15'(A, B) :-
        nonvar(A),
        A=(C=:=D),
        (   chr_runtime:'chr newvia_1'(C, E) ->
            hpattvars:get_attr(E, guard_entailment, F),
            F=v(_,G,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', G)
        ), !,
        'known/1__15__0'(G, A, B, C, D).
'known/1__15__0'([], A, B, _, _) :-
        'known/1__16'(A, B).
'known/1__15__0'([A|B], C, D, E, F) :-
        (   A=suspension(_,G,_,_,_,_,H),
            get_mutable(active, G),
            nonvar(H),
            H=(I=:=J),
            J==E,
            K=t(53,A,D),
            '$novel_production'(A, K),
            '$novel_production'(D, K),
            I\==F ->
            '$extend_history'(D, K),
            '$activate_constraint_known/1'(L, M, D, N),
            (   L==yes ->
                '$insert_in_store_known/1'(D),
                'attach_known/1'(M, D)
            ;   true
            ),
            known(I=:=F),
            (   D=suspension(_,O,_,P,_,_,_),
                get_mutable(active, O),
                get_mutable(N, P) ->
                chr_runtime:'chr update_mutable'(inactive, O),
                'known/1__15__0'(B, C, D, E, F)
            ;   true
            )
        ;   'known/1__15__0'(B, C, D, E, F)
        ).
'known/1__15'(A, B) :-
        'known/1__16'(A, B).
'known/1__16'(A, B) :-
        nonvar(A),
        A=(C=:=D),
        '$novel_production'(B, 54), !,
        '$extend_history'(B, 54),
        '$activate_constraint_known/1'(E, F, B, G),
        (   E==yes ->
            '$insert_in_store_known/1'(B),
            'attach_known/1'(F, B)
        ;   true
        ),
        known(D=:=C),
        (   B=suspension(_,H,_,I,_,_,_),
            get_mutable(active, H),
            get_mutable(G, I) ->
            chr_runtime:'chr update_mutable'(inactive, H),
            'known/1__17'(A, B)
        ;   true
        ).
'known/1__16'(A, B) :-
        'known/1__17'(A, B).
'known/1__17'(A, B) :-
        nonvar(A),
        A=(C=\=D),
        '$novel_production'(B, 55), !,
        '$extend_history'(B, 55),
        '$activate_constraint_known/1'(E, F, B, G),
        (   E==yes ->
            '$insert_in_store_known/1'(B),
            'attach_known/1'(F, B)
        ;   true
        ),
        known(D=\=C),
        (   B=suspension(_,H,_,I,_,_,_),
            get_mutable(active, H),
            get_mutable(G, I) ->
            chr_runtime:'chr update_mutable'(inactive, H),
            'known/1__18'(A, B)
        ;   true
        ).
'known/1__17'(A, B) :-
        'known/1__18'(A, B).
'known/1__18'(A, B) :-
        nonvar(A),
        A=number(C),
        nonvar(C),
        \+number(C), !,
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, D, E),
            (   E==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(D, B)
            ;   true
            )
        ),
        known(fail).
'known/1__18'(A, B) :-
        nonvar(A),
        A=float(C),
        nonvar(C),
        \+float(C), !,
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, D, E),
            (   E==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(D, B)
            ;   true
            )
        ),
        known(fail).
'known/1__18'(A, B) :-
        nonvar(A),
        A=integer(C),
        nonvar(C),
        \+integer(C), !,
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, D, E),
            (   E==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(D, B)
            ;   true
            )
        ),
        known(fail).
'known/1__18'(A, B) :-
        nonvar(A),
        A=integer(C),
        '$novel_production'(B, 59), !,
        '$extend_history'(B, 59),
        '$activate_constraint_known/1'(D, E, B, F),
        (   D==yes ->
            '$insert_in_store_known/1'(B),
            'attach_known/1'(E, B)
        ;   true
        ),
        known(number(C)),
        (   B=suspension(_,G,_,H,_,_,_),
            get_mutable(active, G),
            get_mutable(F, H) ->
            chr_runtime:'chr update_mutable'(inactive, G),
            'known/1__19'(A, B)
        ;   true
        ).
'known/1__18'(A, B) :-
        'known/1__19'(A, B).
'known/1__19'(A, B) :-
        nonvar(A),
        A=float(C),
        '$novel_production'(B, 60), !,
        '$extend_history'(B, 60),
        '$activate_constraint_known/1'(D, E, B, F),
        (   D==yes ->
            '$insert_in_store_known/1'(B),
            'attach_known/1'(E, B)
        ;   true
        ),
        known(number(C)),
        (   B=suspension(_,G,_,H,_,_,_),
            get_mutable(active, G),
            get_mutable(F, H) ->
            chr_runtime:'chr update_mutable'(inactive, G),
            'known/1__20'(A, B)
        ;   true
        ).
'known/1__19'(A, B) :-
        'known/1__20'(A, B).
'known/1__20'(A, B) :-
        (   chr_runtime:'chr newvia_1'(A, C) ->
            hpattvars:get_attr(C, guard_entailment, D),
            D=v(_,E,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', E)
        ),
        member(F, E),
        F=suspension(_,G,_,_,_,_,\+H),
        get_mutable(active, G),
        nonvar(\+H),
        H==A, !,
        '$remove_constraint_internal_known/1'(F, I, J),
        (   J==yes ->
            '$delete_from_store_known/1'(F),
            'detach_known/1'(I, F)
        ;   true
        ),
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, K, L),
            (   L==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(K, B)
            ;   true
            )
        ),
        known(fail).
'known/1__20'(A, B) :-
        nonvar(A),
        A=(\+C),
        (   chr_runtime:'chr newvia_1'(C, D) ->
            hpattvars:get_attr(D, guard_entailment, E),
            E=v(_,F,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', F)
        ),
        member(G, F),
        G=suspension(_,H,_,_,_,_,I),
        get_mutable(active, H),
        I==C, !,
        '$remove_constraint_internal_known/1'(G, J, K),
        (   K==yes ->
            '$delete_from_store_known/1'(G),
            'detach_known/1'(J, G)
        ;   true
        ),
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, L, M),
            (   M==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(L, B)
            ;   true
            )
        ),
        known(fail).
'known/1__20'(A, B) :-
        nonvar(A),
        A=(C\==D),
        (   chr_runtime:'chr newvia_2'(C, D, E) ->
            hpattvars:get_attr(E, guard_entailment, F),
            F=v(_,G,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', G)
        ),
        member(H, G),
        H=suspension(_,I,_,_,_,_,J==K),
        get_mutable(active, I),
        nonvar(J==K),
        J==C,
        K==D, !,
        '$remove_constraint_internal_known/1'(H, L, M),
        (   M==yes ->
            '$delete_from_store_known/1'(H),
            'detach_known/1'(L, H)
        ;   true
        ),
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, N, O),
            (   O==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(N, B)
            ;   true
            )
        ),
        known(fail).
'known/1__20'(A, B) :-
        nonvar(A),
        A=(C==D),
        (   chr_runtime:'chr newvia_2'(C, D, E) ->
            hpattvars:get_attr(E, guard_entailment, F),
            F=v(_,G,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', G)
        ),
        member(H, G),
        H=suspension(_,I,_,_,_,_,J\==K),
        get_mutable(active, I),
        nonvar(J\==K),
        J==C,
        K==D, !,
        '$remove_constraint_internal_known/1'(H, L, M),
        (   M==yes ->
            '$delete_from_store_known/1'(H),
            'detach_known/1'(L, H)
        ;   true
        ),
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, N, O),
            (   O==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(N, B)
            ;   true
            )
        ),
        known(fail).
'known/1__20'(A, B) :-
        nonvar(A),
        A=(C==D),
        (   chr_runtime:'chr newvia_1'(D, E) ->
            hpattvars:get_attr(E, guard_entailment, F),
            F=v(_,G,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', G)
        ), !,
        'known/1__20__0'(G, A, B, C, D).
'known/1__20__0'([], A, B, _, _) :-
        'known/1__21'(A, B).
'known/1__20__0'([A|B], C, D, E, F) :-
        (   A=suspension(_,G,_,_,_,_,H),
            get_mutable(active, G),
            nonvar(H),
            H=(I==J),
            I==F,
            K=t(63,D,A),
            '$novel_production'(D, K),
            '$novel_production'(A, K) ->
            '$extend_history'(D, K),
            '$activate_constraint_known/1'(L, M, D, N),
            (   L==yes ->
                '$insert_in_store_known/1'(D),
                'attach_known/1'(M, D)
            ;   true
            ),
            known(E==J),
            (   D=suspension(_,O,_,P,_,_,_),
                get_mutable(active, O),
                get_mutable(N, P) ->
                chr_runtime:'chr update_mutable'(inactive, O),
                'known/1__20__0'(B, C, D, E, F)
            ;   true
            )
        ;   'known/1__20__0'(B, C, D, E, F)
        ).
'known/1__20'(A, B) :-
        'known/1__21'(A, B).
'known/1__21'(A, B) :-
        nonvar(A),
        A=(C==D),
        (   chr_runtime:'chr newvia_1'(C, E) ->
            hpattvars:get_attr(E, guard_entailment, F),
            F=v(_,G,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', G)
        ), !,
        'known/1__21__0'(G, A, B, C, D).
'known/1__21__0'([], A, B, _, _) :-
        'known/1__22'(A, B).
'known/1__21__0'([A|B], C, D, E, F) :-
        (   A=suspension(_,G,_,_,_,_,H),
            get_mutable(active, G),
            nonvar(H),
            H=(I==J),
            J==E,
            K=t(63,A,D),
            '$novel_production'(A, K),
            '$novel_production'(D, K) ->
            '$extend_history'(D, K),
            '$activate_constraint_known/1'(L, M, D, N),
            (   L==yes ->
                '$insert_in_store_known/1'(D),
                'attach_known/1'(M, D)
            ;   true
            ),
            known(I==F),
            (   D=suspension(_,O,_,P,_,_,_),
                get_mutable(active, O),
                get_mutable(N, P) ->
                chr_runtime:'chr update_mutable'(inactive, O),
                'known/1__21__0'(B, C, D, E, F)
            ;   true
            )
        ;   'known/1__21__0'(B, C, D, E, F)
        ).
'known/1__21'(A, B) :-
        'known/1__22'(A, B).
'known/1__22'(A, B) :-
        nonvar(A),
        A=(C==D),
        (   chr_runtime:'chr newvia_1'(D, E) ->
            hpattvars:get_attr(E, guard_entailment, F),
            F=v(_,G,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', G)
        ), !,
        'known/1__22__0'(G, A, B, C, D).
'known/1__22__0'([], A, B, _, _) :-
        'known/1__23'(A, B).
'known/1__22__0'([A|B], C, D, E, F) :-
        (   A=suspension(_,G,_,_,_,_,H),
            get_mutable(active, G),
            nonvar(H),
            H=(I\==J),
            I==F,
            K=t(64,D,A),
            '$novel_production'(D, K),
            '$novel_production'(A, K) ->
            '$extend_history'(D, K),
            '$activate_constraint_known/1'(L, M, D, N),
            (   L==yes ->
                '$insert_in_store_known/1'(D),
                'attach_known/1'(M, D)
            ;   true
            ),
            known(E\==J),
            (   D=suspension(_,O,_,P,_,_,_),
                get_mutable(active, O),
                get_mutable(N, P) ->
                chr_runtime:'chr update_mutable'(inactive, O),
                'known/1__22__0'(B, C, D, E, F)
            ;   true
            )
        ;   'known/1__22__0'(B, C, D, E, F)
        ).
'known/1__22'(A, B) :-
        'known/1__23'(A, B).
'known/1__23'(A, B) :-
        nonvar(A),
        A=(C\==D),
        (   chr_runtime:'chr newvia_1'(C, E) ->
            hpattvars:get_attr(E, guard_entailment, F),
            F=v(_,G,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', G)
        ), !,
        'known/1__23__0'(G, A, B, C, D).
'known/1__23__0'([], A, B, _, _) :-
        'known/1__24'(A, B).
'known/1__23__0'([A|B], C, D, E, F) :-
        (   A=suspension(_,G,_,_,_,_,H),
            get_mutable(active, G),
            nonvar(H),
            H=(I==J),
            J==E,
            K=t(64,A,D),
            '$novel_production'(A, K),
            '$novel_production'(D, K) ->
            '$extend_history'(D, K),
            '$activate_constraint_known/1'(L, M, D, N),
            (   L==yes ->
                '$insert_in_store_known/1'(D),
                'attach_known/1'(M, D)
            ;   true
            ),
            known(I\==F),
            (   D=suspension(_,O,_,P,_,_,_),
                get_mutable(active, O),
                get_mutable(N, P) ->
                chr_runtime:'chr update_mutable'(inactive, O),
                'known/1__23__0'(B, C, D, E, F)
            ;   true
            )
        ;   'known/1__23__0'(B, C, D, E, F)
        ).
'known/1__23'(A, B) :-
        'known/1__24'(A, B).
'known/1__24'(A, B) :-
        nonvar(A),
        A=(C==D),
        '$novel_production'(B, 65), !,
        '$extend_history'(B, 65),
        '$activate_constraint_known/1'(E, F, B, G),
        (   E==yes ->
            '$insert_in_store_known/1'(B),
            'attach_known/1'(F, B)
        ;   true
        ),
        known(D==C),
        (   B=suspension(_,H,_,I,_,_,_),
            get_mutable(active, H),
            get_mutable(G, I) ->
            chr_runtime:'chr update_mutable'(inactive, H),
            'known/1__25'(A, B)
        ;   true
        ).
'known/1__24'(A, B) :-
        'known/1__25'(A, B).
'known/1__25'(A, B) :-
        nonvar(A),
        A=(C\==D),
        '$novel_production'(B, 66), !,
        '$extend_history'(B, 66),
        '$activate_constraint_known/1'(E, F, B, G),
        (   E==yes ->
            '$insert_in_store_known/1'(B),
            'attach_known/1'(F, B)
        ;   true
        ),
        known(D\==C),
        (   B=suspension(_,H,_,I,_,_,_),
            get_mutable(active, H),
            get_mutable(G, I) ->
            chr_runtime:'chr update_mutable'(inactive, H),
            'known/1__26'(A, B)
        ;   true
        ).
'known/1__25'(A, B) :-
        'known/1__26'(A, B).
'known/1__26'(A, B) :-
        nonvar(A),
        A=(C\==D),
        D==C,
        '$novel_production'(B, 67), !,
        '$extend_history'(B, 67),
        '$activate_constraint_known/1'(E, F, B, G),
        (   E==yes ->
            '$insert_in_store_known/1'(B),
            'attach_known/1'(F, B)
        ;   true
        ),
        known(fail),
        (   B=suspension(_,H,_,I,_,_,_),
            get_mutable(active, H),
            get_mutable(G, I) ->
            chr_runtime:'chr update_mutable'(inactive, H),
            'known/1__27'(A, B)
        ;   true
        ).
'known/1__26'(A, B) :-
        'known/1__27'(A, B).
'known/1__27'(A, B) :-
        nonvar(A),
        A=(C\==D),
        nonvar(D),
        nonvar(C),
        chr_runtime:'chr lock'(C),
        functor(C, E, F),
        chr_runtime:'chr unlock'(C), !,
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, G, H),
            (   H==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(G, B)
            ;   true
            )
        ),
        (   functor(D, E, F) ->
            C=..[E|I],
            D=..[E|J],
            add_args_nmatch(I, J, K),
            known(K)
        ;   true
        ).
'known/1__27'(A, B) :-
        nonvar(A),
        A=(C==D),
        '$novel_production'(B, 69), !,
        '$extend_history'(B, 69),
        '$activate_constraint_known/1'(E, F, B, G),
        (   E==yes ->
            '$insert_in_store_known/1'(B),
            'attach_known/1'(F, B)
        ;   true
        ),
        known(C=D),
        (   B=suspension(_,H,_,I,_,_,_),
            get_mutable(active, H),
            get_mutable(G, I) ->
            chr_runtime:'chr update_mutable'(inactive, H),
            'known/1__28'(A, B)
        ;   true
        ).
'known/1__27'(A, B) :-
        'known/1__28'(A, B).
'known/1__28'(A, B) :-
        nonvar(A),
        A=ground(C),
        '$novel_production'(B, 70), !,
        '$extend_history'(B, 70),
        '$activate_constraint_known/1'(D, E, B, F),
        (   D==yes ->
            '$insert_in_store_known/1'(B),
            'attach_known/1'(E, B)
        ;   true
        ),
        known(nonvar(C)),
        (   B=suspension(_,G,_,H,_,_,_),
            get_mutable(active, G),
            get_mutable(F, H) ->
            chr_runtime:'chr update_mutable'(inactive, G),
            'known/1__29'(A, B)
        ;   true
        ).
'known/1__28'(A, B) :-
        'known/1__29'(A, B).
'known/1__29'(A, B) :-
        nonvar(A),
        A=compound(C),
        '$novel_production'(B, 71), !,
        '$extend_history'(B, 71),
        '$activate_constraint_known/1'(D, E, B, F),
        (   D==yes ->
            '$insert_in_store_known/1'(B),
            'attach_known/1'(E, B)
        ;   true
        ),
        known(nonvar(C)),
        (   B=suspension(_,G,_,H,_,_,_),
            get_mutable(active, G),
            get_mutable(F, H) ->
            chr_runtime:'chr update_mutable'(inactive, G),
            'known/1__30'(A, B)
        ;   true
        ).
'known/1__29'(A, B) :-
        'known/1__30'(A, B).
'known/1__30'(A, B) :-
        nonvar(A),
        A=atomic(C),
        '$novel_production'(B, 72), !,
        '$extend_history'(B, 72),
        '$activate_constraint_known/1'(D, E, B, F),
        (   D==yes ->
            '$insert_in_store_known/1'(B),
            'attach_known/1'(E, B)
        ;   true
        ),
        known(nonvar(C)),
        (   B=suspension(_,G,_,H,_,_,_),
            get_mutable(active, G),
            get_mutable(F, H) ->
            chr_runtime:'chr update_mutable'(inactive, G),
            'known/1__31'(A, B)
        ;   true
        ).
'known/1__30'(A, B) :-
        'known/1__31'(A, B).
'known/1__31'(A, B) :-
        nonvar(A),
        A=number(C),
        '$novel_production'(B, 73), !,
        '$extend_history'(B, 73),
        '$activate_constraint_known/1'(D, E, B, F),
        (   D==yes ->
            '$insert_in_store_known/1'(B),
            'attach_known/1'(E, B)
        ;   true
        ),
        known(nonvar(C)),
        (   B=suspension(_,G,_,H,_,_,_),
            get_mutable(active, G),
            get_mutable(F, H) ->
            chr_runtime:'chr update_mutable'(inactive, G),
            'known/1__32'(A, B)
        ;   true
        ).
'known/1__31'(A, B) :-
        'known/1__32'(A, B).
'known/1__32'(A, B) :-
        nonvar(A),
        A=atom(C),
        '$novel_production'(B, 74), !,
        '$extend_history'(B, 74),
        '$activate_constraint_known/1'(D, E, B, F),
        (   D==yes ->
            '$insert_in_store_known/1'(B),
            'attach_known/1'(E, B)
        ;   true
        ),
        known(nonvar(C)),
        (   B=suspension(_,G,_,H,_,_,_),
            get_mutable(active, G),
            get_mutable(F, H) ->
            chr_runtime:'chr update_mutable'(inactive, G),
            'known/1__33'(A, B)
        ;   true
        ).
'known/1__32'(A, B) :-
        'known/1__33'(A, B).
'known/1__33'(A, B) :-
        nonvar(A),
        A=var(C),
        (   chr_runtime:'chr newvia_1'(C, D) ->
            hpattvars:get_attr(D, guard_entailment, E),
            E=v(_,F,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', F)
        ),
        member(G, F),
        G=suspension(_,H,_,_,_,_,nonvar(I)),
        get_mutable(active, H),
        nonvar(nonvar(I)),
        I==C, !,
        '$remove_constraint_internal_known/1'(G, J, K),
        (   K==yes ->
            '$delete_from_store_known/1'(G),
            'detach_known/1'(J, G)
        ;   true
        ),
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, L, M),
            (   M==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(L, B)
            ;   true
            )
        ),
        known(fail).
'known/1__33'(A, B) :-
        nonvar(A),
        A=nonvar(C),
        (   chr_runtime:'chr newvia_1'(C, D) ->
            hpattvars:get_attr(D, guard_entailment, E),
            E=v(_,F,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', F)
        ),
        member(G, F),
        G=suspension(_,H,_,_,_,_,var(I)),
        get_mutable(active, H),
        nonvar(var(I)),
        I==C, !,
        '$remove_constraint_internal_known/1'(G, J, K),
        (   K==yes ->
            '$delete_from_store_known/1'(G),
            'detach_known/1'(J, G)
        ;   true
        ),
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, L, M),
            (   M==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(L, B)
            ;   true
            )
        ),
        known(fail).
'known/1__33'(A, B) :-
        nonvar(A),
        A=(C;D),
        nonvar(C),
        C=(\+E),
        (   chr_runtime:'chr newvia_1'(E, F) ->
            hpattvars:get_attr(F, guard_entailment, G),
            G=v(_,H,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', H)
        ),
        member(I, H),
        I=suspension(_,J,_,_,_,_,K),
        get_mutable(active, J),
        K==E, !,
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, L, M),
            (   M==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(L, B)
            ;   true
            )
        ),
        known(D).
'known/1__33'(A, B) :-
        (   chr_runtime:'chr newvia_1'(A, C) ->
            hpattvars:get_attr(C, guard_entailment, D),
            D=v(_,E,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', E)
        ), !,
        'known/1__33__0'(E, A, B).
'known/1__33__0'([], A, B) :-
        'known/1__34'(A, B).
'known/1__33__0'([A|B], C, D) :-
        (   A=suspension(_,E,_,_,_,_,F),
            get_mutable(active, E),
            nonvar(F),
            F=(G;H),
            nonvar(G),
            G=(\+I),
            I==C ->
            '$remove_constraint_internal_known/1'(A, J, K),
            (   K==yes ->
                '$delete_from_store_known/1'(A),
                'detach_known/1'(J, A)
            ;   true
            ),
            '$activate_constraint_known/1'(L, M, D, N),
            (   L==yes ->
                '$insert_in_store_known/1'(D),
                'attach_known/1'(M, D)
            ;   true
            ),
            known(H),
            (   D=suspension(_,O,_,P,_,_,_),
                get_mutable(active, O),
                get_mutable(N, P) ->
                chr_runtime:'chr update_mutable'(inactive, O),
                'known/1__33__0'(B, C, D)
            ;   true
            )
        ;   'known/1__33__0'(B, C, D)
        ).
'known/1__33'(A, B) :-
        'known/1__34'(A, B).
'known/1__34'(A, B) :-
        nonvar(A),
        A=(C;D),
        nonvar(C),
        C=(E,_),
        nonvar(E),
        E=(\+F),
        (   chr_runtime:'chr newvia_1'(F, G) ->
            hpattvars:get_attr(G, guard_entailment, H),
            H=v(_,I,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', I)
        ),
        member(J, I),
        J=suspension(_,K,_,_,_,_,L),
        get_mutable(active, K),
        L==F, !,
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, M, N),
            (   N==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(M, B)
            ;   true
            )
        ),
        known(D).
'known/1__34'(A, B) :-
        (   chr_runtime:'chr newvia_1'(A, C) ->
            hpattvars:get_attr(C, guard_entailment, D),
            D=v(_,E,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', E)
        ), !,
        'known/1__34__0'(E, A, B).
'known/1__34__0'([], A, B) :-
        'known/1__35'(A, B).
'known/1__34__0'([A|B], C, D) :-
        (   A=suspension(_,E,_,_,_,_,F),
            get_mutable(active, E),
            nonvar(F),
            F=(G;H),
            nonvar(G),
            G=(I,_),
            nonvar(I),
            I=(\+J),
            J==C ->
            '$remove_constraint_internal_known/1'(A, K, L),
            (   L==yes ->
                '$delete_from_store_known/1'(A),
                'detach_known/1'(K, A)
            ;   true
            ),
            '$activate_constraint_known/1'(M, N, D, O),
            (   M==yes ->
                '$insert_in_store_known/1'(D),
                'attach_known/1'(N, D)
            ;   true
            ),
            known(H),
            (   D=suspension(_,P,_,Q,_,_,_),
                get_mutable(active, P),
                get_mutable(O, Q) ->
                chr_runtime:'chr update_mutable'(inactive, P),
                'known/1__34__0'(B, C, D)
            ;   true
            )
        ;   'known/1__34__0'(B, C, D)
        ).
'known/1__34'(A, B) :-
        'known/1__35'(A, B).
'known/1__35'(A, B) :-
        nonvar(A),
        A=(C;D),
        (   chr_runtime:'chr newvia_1'(C, E) ->
            hpattvars:get_attr(E, guard_entailment, F),
            F=v(_,G,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', G)
        ),
        member(H, G),
        H=suspension(_,I,_,_,_,_,\+J),
        get_mutable(active, I),
        nonvar(\+J),
        J==C, !,
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, K, L),
            (   L==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(K, B)
            ;   true
            )
        ),
        known(D).
'known/1__35'(A, B) :-
        nonvar(A),
        A=(\+C),
        (   chr_runtime:'chr newvia_1'(C, D) ->
            hpattvars:get_attr(D, guard_entailment, E),
            E=v(_,F,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', F)
        ), !,
        'known/1__35__0'(F, A, B, C).
'known/1__35__0'([], A, B, _) :-
        'known/1__36'(A, B).
'known/1__35__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,_,_,_,G),
            get_mutable(active, F),
            nonvar(G),
            G=(H;I),
            H==E ->
            '$remove_constraint_internal_known/1'(A, J, K),
            (   K==yes ->
                '$delete_from_store_known/1'(A),
                'detach_known/1'(J, A)
            ;   true
            ),
            '$activate_constraint_known/1'(L, M, D, N),
            (   L==yes ->
                '$insert_in_store_known/1'(D),
                'attach_known/1'(M, D)
            ;   true
            ),
            known(I),
            (   D=suspension(_,O,_,P,_,_,_),
                get_mutable(active, O),
                get_mutable(N, P) ->
                chr_runtime:'chr update_mutable'(inactive, O),
                'known/1__35__0'(B, C, D, E)
            ;   true
            )
        ;   'known/1__35__0'(B, C, D, E)
        ).
'known/1__35'(A, B) :-
        'known/1__36'(A, B).
'known/1__36'(A, B) :-
        nonvar(A),
        A=(C;D),
        nonvar(C),
        C=(E,_),
        (   chr_runtime:'chr newvia_1'(E, F) ->
            hpattvars:get_attr(F, guard_entailment, G),
            G=v(_,H,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', H)
        ),
        member(I, H),
        I=suspension(_,J,_,_,_,_,\+K),
        get_mutable(active, J),
        nonvar(\+K),
        K==E, !,
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, L, M),
            (   M==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(L, B)
            ;   true
            )
        ),
        known(D).
'known/1__36'(A, B) :-
        nonvar(A),
        A=(\+C),
        (   chr_runtime:'chr newvia_1'(C, D) ->
            hpattvars:get_attr(D, guard_entailment, E),
            E=v(_,F,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', F)
        ), !,
        'known/1__36__0'(F, A, B, C).
'known/1__36__0'([], A, B, _) :-
        'known/1__37'(A, B).
'known/1__36__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,_,_,_,G),
            get_mutable(active, F),
            nonvar(G),
            G=(H;I),
            nonvar(H),
            H=(J,_),
            J==E ->
            '$remove_constraint_internal_known/1'(A, K, L),
            (   L==yes ->
                '$delete_from_store_known/1'(A),
                'detach_known/1'(K, A)
            ;   true
            ),
            '$activate_constraint_known/1'(M, N, D, O),
            (   M==yes ->
                '$insert_in_store_known/1'(D),
                'attach_known/1'(N, D)
            ;   true
            ),
            known(I),
            (   D=suspension(_,P,_,Q,_,_,_),
                get_mutable(active, P),
                get_mutable(O, Q) ->
                chr_runtime:'chr update_mutable'(inactive, P),
                'known/1__36__0'(B, C, D, E)
            ;   true
            )
        ;   'known/1__36__0'(B, C, D, E)
        ).
'known/1__36'(A, B) :-
        'known/1__37'(A, B).
'known/1__37'(A, B) :-
        nonvar(A),
        A=(C;D),
        C==fail, !,
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, E, F),
            (   F==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(E, B)
            ;   true
            )
        ),
        known(D).
'known/1__37'(A, B) :-
        nonvar(A),
        A=(C;D),
        D==fail, !,
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, E, F),
            (   F==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(E, B)
            ;   true
            )
        ),
        known(C).
'known/1__37'(A, B) :-
        nonvar(A),
        A=(C;_),
        C==true, !,
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, D, E),
            (   E==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(D, B)
            ;   true
            )
        ).
'known/1__37'(A, B) :-
        nonvar(A),
        A=(_;C),
        C==true, !,
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, D, E),
            (   E==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(D, B)
            ;   true
            )
        ).
'known/1__37'(A, B) :-
        nonvar(A),
        A=(C;_),
        nonvar(C),
        C=(\+D),
        nonvar(D),
        D=functor(E,_,_),
        (   chr_runtime:'chr newvia_1'(E, F) ->
            hpattvars:get_attr(F, guard_entailment, G),
            G=v(_,H,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', H)
        ),
        member(I, H),
        I=suspension(_,J,_,_,_,_,functor(K,L,M)),
        get_mutable(active, J),
        nonvar(functor(K,L,M)),
        K==E, !,
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, N, O),
            (   O==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(N, B)
            ;   true
            )
        ).
'known/1__37'(A, B) :-
        nonvar(A),
        A=functor(C,_,_),
        (   chr_runtime:'chr newvia_1'(C, D) ->
            hpattvars:get_attr(D, guard_entailment, E),
            E=v(_,F,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', F)
        ), !,
        'known/1__37__0'(F, A, B, C).
'known/1__37__0'([], A, B, _) :-
        'known/1__38'(A, B).
'known/1__37__0'([A|B], C, D, E) :-
        (   A=suspension(_,F,_,_,_,_,G),
            get_mutable(active, F),
            nonvar(G),
            G=(H;_),
            nonvar(H),
            H=(\+I),
            nonvar(I),
            I=functor(J,_,_),
            J==E ->
            '$remove_constraint_internal_known/1'(A, K, L),
            (   L==yes ->
                '$delete_from_store_known/1'(A),
                'detach_known/1'(K, A)
            ;   true
            ),
            'known/1__37__0'(B, C, D, E)
        ;   'known/1__37__0'(B, C, D, E)
        ).
'known/1__37'(A, B) :-
        'known/1__38'(A, B).
'known/1__38'(A, B) :-
        nonvar(A),
        A=(C;D),
        nonvar(C),
        C=(\+E),
        nonvar(E),
        E=functor(F,G,H),
        nonvar(F),
        chr_runtime:'chr lock'(F),
        chr_runtime:'chr lock'(G),
        chr_runtime:'chr lock'(H),
        functor(F, G, H),
        chr_runtime:'chr unlock'(F),
        chr_runtime:'chr unlock'(G),
        chr_runtime:'chr unlock'(H), !,
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, I, J),
            (   J==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(I, B)
            ;   true
            )
        ),
        known(D).
'known/1__38'(A, B) :-
        nonvar(A),
        A=(C;_),
        nonvar(C),
        C=(\+D),
        nonvar(D),
        D=functor(E,_,_),
        nonvar(E), !,
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_known/1'(B, F, G),
            (   G==yes ->
                '$delete_from_store_known/1'(B),
                'detach_known/1'(F, B)
            ;   true
            )
        ).
'known/1__38'(_, A) :-
        '$activate_constraint_known/1'(B, C, A, _),
        (   B==yes ->
            '$insert_in_store_known/1'(A),
            'attach_known/1'(C, A)
        ;   true
        ).
test(_) :-
        hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', A),
        member(B, A),
        B=suspension(_,C,_,_,_,_,D),
        get_mutable(active, C),
        D==fail, !.
test(A) :-
        (   chr_runtime:'chr newvia_1'(A, B) ->
            hpattvars:get_attr(B, guard_entailment, C),
            C=v(_,D,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', D)
        ),
        member(E, D),
        E=suspension(_,F,_,_,_,_,G),
        get_mutable(active, F),
        G==A, !.
test(A) :-
        nonvar(A),
        A=(B\==C),
        nonvar(C),
        chr_runtime:'chr lock'(C),
        functor(C, D, E),
        chr_runtime:'chr unlock'(C), !,
        C=..[_|F],
        length(G, E),
        H=..[D|G],
        add_args_nmatch(G, F, I),
        J=(\+functor(B,D,E);functor(B,D,E),B=H,I),
        test(J).
test(A) :-
        nonvar(A),
        A=(B\==C),
        nonvar(B), !,
        test(C\==B).
test(A) :-
        nonvar(A),
        A=(B=<C),
        (   chr_runtime:'chr newvia_2'(B, C, D) ->
            hpattvars:get_attr(D, guard_entailment, E),
            E=v(_,F,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', F)
        ),
        member(G, F),
        G=suspension(_,H,_,_,_,_,I=:=J),
        get_mutable(active, H),
        nonvar(I=:=J),
        I==B,
        J==C, !.
test(A) :-
        nonvar(A),
        A=(B=<C),
        number(C),
        (   chr_runtime:'chr newvia_1'(B, D) ->
            hpattvars:get_attr(D, guard_entailment, E),
            E=v(_,F,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', F)
        ),
        member(G, F),
        G=suspension(_,H,_,_,_,_,I=:=J),
        get_mutable(active, H),
        nonvar(I=:=J),
        I==B,
        number(J),
        J=<C, !.
test(A) :-
        nonvar(A),
        A=(B=<C),
        number(B),
        (   chr_runtime:'chr newvia_1'(C, D) ->
            hpattvars:get_attr(D, guard_entailment, E),
            E=v(_,F,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', F)
        ),
        member(G, F),
        G=suspension(_,H,_,_,_,_,I=:=J),
        get_mutable(active, H),
        nonvar(I=:=J),
        I==C,
        number(J),
        B=<J, !.
test(A) :-
        nonvar(A),
        A=(B=<C),
        number(C),
        (   chr_runtime:'chr newvia_1'(B, D) ->
            hpattvars:get_attr(D, guard_entailment, E),
            E=v(_,F,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', F)
        ),
        member(G, F),
        G=suspension(_,H,_,_,_,_,I=<J),
        get_mutable(active, H),
        nonvar(I=<J),
        I==B,
        number(J),
        J=<C, !.
test(A) :-
        nonvar(A),
        A=(B=<C),
        number(B),
        (   chr_runtime:'chr newvia_1'(C, D) ->
            hpattvars:get_attr(D, guard_entailment, E),
            E=v(_,F,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', F)
        ),
        member(G, F),
        G=suspension(_,H,_,_,_,_,I=<J),
        get_mutable(active, H),
        nonvar(I=<J),
        J==C,
        number(I),
        B=<I, !.
test(A) :-
        nonvar(A),
        A=(B=\=C),
        number(C),
        (   chr_runtime:'chr newvia_1'(B, D) ->
            hpattvars:get_attr(D, guard_entailment, E),
            E=v(_,F,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', F)
        ),
        member(G, F),
        G=suspension(_,H,_,_,_,_,I=<J),
        get_mutable(active, H),
        nonvar(I=<J),
        I==B,
        number(J),
        C>J, !.
test(A) :-
        nonvar(A),
        A=(B=\=C),
        number(C),
        (   chr_runtime:'chr newvia_1'(B, D) ->
            hpattvars:get_attr(D, guard_entailment, E),
            E=v(_,F,_)
        ;   hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', F)
        ),
        member(G, F),
        G=suspension(_,H,_,_,_,_,I=<J),
        get_mutable(active, H),
        nonvar(I=<J),
        J==B,
        number(I),
        C<I, !.
test(A) :-
        nonvar(A),
        A=(B>C), !,
        test(C<B).
test(A) :-
        nonvar(A),
        A=(B>=C), !,
        test(C=<B).
test(A) :-
        nonvar(A),
        A=(B<C), !,
        test((B=<C,B=\=C)).
test(A) :-
        nonvar(A),
        A=(B is C), !,
        test(B=:=C).
test(A) :-
        nonvar(A),
        A=(B;C),
        B==fail, !,
        test(C).
test(A) :-
        nonvar(A),
        A=(B;C),
        C==fail, !,
        test(B).
test(A) :-
        nonvar(A),
        A=(B=C),
        chr_runtime:'chr lock'(B),
        chr_runtime:'chr lock'(C),
        B=C,
        chr_runtime:'chr unlock'(B),
        chr_runtime:'chr unlock'(C), !,
        B=C.
test(A) :-
        nonvar(A),
        A=(B=C),
        ground(C),
        ground(B), !,
        B=C.
test(A) :-
        nonvar(A),
        A=(B=C),
        var(C),
        nonvar(B), !,
        test(C=B).
test(A) :-
        nonvar(A),
        A=(B=C),
        nonvar(C),
        var(B),
        hprolog:get_store('$chr_store_global_list_guard_entailment:variables/1', D),
        member(E, D),
        E=suspension(_,F,_,_,_,G),
        get_mutable(active, F),
        chr_runtime:'chr lock'(G),
        chr_runtime:'chr lock'(C),
        functor(C, H, I),
        I>0,
        C=..[H|J],
        \+all_unique_vars(J,G),
        chr_runtime:'chr unlock'(G),
        chr_runtime:'chr unlock'(C), !,
        K=(functor(B,H,I),B=C),
        test(K).
test(A) :-
        nonvar(A),
        A=(B=C),
        nonvar(C),
        var(B),
        chr_runtime:'chr lock'(C),
        functor(C, D, E),
        C=..[D|_],
        chr_runtime:'chr unlock'(C), !,
        F=functor(B,D,E),
        test(F).
test(A) :-
        nonvar(A),
        A=(B=C),
        nonvar(B),
        chr_runtime:'chr lock'(C),
        functor(C, D, E),
        C=..[D|F],
        chr_runtime:'chr unlock'(C), !,
        functor(B, D, E),
        B=..[D|G],
        add_args_unif(G, F, H),
        test(H).
test(A) :-
        nonvar(A),
        A=functor(B,C,D),
        ground(D),
        ground(C),
        var(B),
        hprolog:get_store('$chr_store_global_list_guard_entailment:variables/1', E),
        member(F, E),
        F=suspension(_,G,_,_,_,H),
        get_mutable(active, G),
        chr_runtime:'chr lock'(H),
        chr_runtime:'chr lock'(B),
        \+memberchk_eq(B,H),
        chr_runtime:'chr unlock'(H),
        chr_runtime:'chr unlock'(B), !,
        functor(B, C, D).
test(A) :-
        A==true, !.
test(A) :-
        nonvar(A),
        A=(B==C),
        B==C, !.
test(A) :-
        nonvar(A),
        A=(B=:=C),
        B==C, !.
test(A) :-
        nonvar(A),
        A=(B=<C),
        B==C, !.
test(A) :-
        nonvar(A),
        A=(B=<C),
        ground(C),
        ground(B),
        B=<C, !.
test(A) :-
        nonvar(A),
        A=(B=<C),
        ground(C),
        ground(B), !,
        fail.
test(A) :-
        nonvar(A),
        A=(B=:=C),
        ground(C),
        ground(B),
        B=:=C, !.
test(A) :-
        nonvar(A),
        A=(B=:=C),
        ground(C),
        ground(B), !,
        fail.
test(A) :-
        nonvar(A),
        A=(B=\=C),
        ground(C),
        ground(B),
        B=\=C, !.
test(A) :-
        nonvar(A),
        A=(B=\=C),
        ground(C),
        ground(B), !,
        fail.
test(A) :-
        nonvar(A),
        A=functor(B,C,D),
        nonvar(B),
        chr_runtime:'chr lock'(B),
        chr_runtime:'chr lock'(C),
        chr_runtime:'chr lock'(D),
        functor(B, C, D),
        chr_runtime:'chr unlock'(B),
        chr_runtime:'chr unlock'(C),
        chr_runtime:'chr unlock'(D), !.
test(A) :-
        nonvar(A),
        A=functor(B,_,_),
        nonvar(B), !,
        fail.
test(A) :-
        nonvar(A),
        A=ground(B),
        ground(B), !.
test(A) :-
        nonvar(A),
        A=number(B),
        number(B), !.
test(A) :-
        nonvar(A),
        A=float(B),
        float(B), !.
test(A) :-
        nonvar(A),
        A=integer(B),
        integer(B), !.
test(A) :-
        nonvar(A),
        A=number(B),
        nonvar(B), !,
        fail.
test(A) :-
        nonvar(A),
        A=float(B),
        nonvar(B), !,
        fail.
test(A) :-
        nonvar(A),
        A=integer(B),
        nonvar(B), !,
        fail.
test(A) :-
        nonvar(A),
        A=(\+B),
        nonvar(B),
        B=functor(C,D,E),
        nonvar(C),
        chr_runtime:'chr lock'(C),
        chr_runtime:'chr lock'(D),
        chr_runtime:'chr lock'(E),
        functor(C, D, E),
        chr_runtime:'chr unlock'(C),
        chr_runtime:'chr unlock'(D),
        chr_runtime:'chr unlock'(E), !,
        fail.
test(A) :-
        nonvar(A),
        A=(\+B),
        nonvar(B),
        B=functor(C,_,_),
        nonvar(C), !.
test(A) :-
        nonvar(A),
        A=(\+B),
        nonvar(B),
        B=ground(C),
        ground(C), !,
        fail.
test(A) :-
        nonvar(A),
        A=(\+B),
        nonvar(B),
        B=number(C),
        number(C), !,
        fail.
test(A) :-
        nonvar(A),
        A=(\+B),
        nonvar(B),
        B=float(C),
        float(C), !,
        fail.
test(A) :-
        nonvar(A),
        A=(\+B),
        nonvar(B),
        B=integer(C),
        integer(C), !,
        fail.
test(A) :-
        nonvar(A),
        A=(\+B),
        nonvar(B),
        B=number(C),
        nonvar(C), !.
test(A) :-
        nonvar(A),
        A=(\+B),
        nonvar(B),
        B=float(C),
        nonvar(C), !.
test(A) :-
        nonvar(A),
        A=(\+B),
        nonvar(B),
        B=integer(C),
        nonvar(C), !.
test(A) :-
        nonvar(A),
        A=(B,C), !,
        test(B),
        known(B),
        test(C).
test(A) :-
        nonvar(A),
        A=(B;C), !,
        negate_b(B, D),
        negate_b(C, E),
        (   known(E),
            test(B)
        ;   known(D),
            test(C)
        ).
test(A) :-
        hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', B),
        member(C, B),
        C=suspension(_,D,_,_,_,_,(E;F)),
        get_mutable(active, D),
        nonvar((E;F)), !,
        '$remove_constraint_internal_known/1'(C, G, H),
        (   H==yes ->
            '$delete_from_store_known/1'(C),
            'detach_known/1'(G, C)
        ;   true
        ),
        \+try(E,A), !,
        negate_b(E, I),
        known(I),
        \+try(F,A).
test(_) :-
        fail.
cleanup :-
        hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', A), !,
        'cleanup/0__0__0'(A).
'cleanup/0__0__0'([]) :-
        'cleanup/0__1'.
'cleanup/0__0__0'([A|B]) :-
        (   A=suspension(_,C,_,_,_,_,_),
            get_mutable(active, C) ->
            '$remove_constraint_internal_known/1'(A, D, E),
            (   E==yes ->
                '$delete_from_store_known/1'(A),
                'detach_known/1'(D, A)
            ;   true
            ),
            'cleanup/0__0__0'(B)
        ;   'cleanup/0__0__0'(B)
        ).
cleanup :-
        'cleanup/0__1'.
'cleanup/0__1' :-
        hprolog:get_store('$chr_store_global_list_guard_entailment:variables/1', A), !,
        'cleanup/0__1__0'(A).
'cleanup/0__1__0'([]) :-
        'cleanup/0__2'.
'cleanup/0__1__0'([A|B]) :-
        (   A=suspension(_,C,_,_,_,_),
            get_mutable(active, C) ->
            '$remove_constraint_internal_variables/1'(A, D, E),
            (   E==yes ->
                '$delete_from_store_variables/1'(A),
                'detach_variables/1'(D, A)
            ;   true
            ),
            'cleanup/0__1__0'(B)
        ;   'cleanup/0__1__0'(B)
        ).
'cleanup/0__1' :-
        'cleanup/0__2'.
'cleanup/0__2'.
variables(A) :-
        'variables/1__0'(A, _).
'variables/1__0'(A, B) :-
        hprolog:get_store('$chr_store_global_list_guard_entailment:known/1', C),
        member(D, C),
        D=suspension(_,E,_,_,_,_,functor(F,G,H)),
        get_mutable(active, E),
        nonvar(functor(F,G,H)),
        ground(H),
        ground(G),
        var(F), !,
        '$remove_constraint_internal_known/1'(D, I, J),
        (   J==yes ->
            '$delete_from_store_known/1'(D),
            'detach_known/1'(I, D)
        ;   true
        ),
        (   var(B) ->
            true
        ;   '$remove_constraint_internal_variables/1'(B, K, L),
            (   L==yes ->
                '$delete_from_store_variables/1'(B),
                'detach_variables/1'(K, B)
            ;   true
            )
        ),
        functor(F, G, H),
        F=..[_|M],
        append(M, A, N),
        variables(N).
'variables/1__0'(A, B) :-
        (   var(B) ->
            '$insert_constraint_internal_variables/1'(C, D, B, guard_entailment:'variables/1__0'(A,B), A)
        ;   '$activate_constraint_variables/1'(C, D, B, _)
        ),
        (   C==yes ->
            '$insert_in_store_variables/1'(B),
            'attach_variables/1'(D, B)
        ;   true
        ).
:- multifile
        chr:'$chr_module'/1.
chr:'$chr_module'(guard_entailment).
(:-bb_get(chr_discontiguous_stack,[A|B]),bb_put(chr_discontiguous_stack,B),set_prolog_flag(discontiguous_warnings,A)).
(:-bb_get(chr_discontiguous_stack,[A|B]),bb_put(chr_discontiguous_stack,B),set_prolog_flag(discontiguous_warnings,A)).
end_of_file.
