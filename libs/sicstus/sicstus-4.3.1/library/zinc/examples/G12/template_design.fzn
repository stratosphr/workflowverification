predicate all_different_int(array [int] of var int: x);
predicate all_equal_int(array [int] of var int: x);
predicate among_sicstus(var int: n, array [int] of var int: x, set of int: v);
predicate bin_packing_capa_sicstus(array [int] of int: c, array [int] of var int: bin, array [int] of int: w, int: min_index);
predicate bin_packing_load_sicstus(array [int] of var int: l, array [int] of var int: bin, array [int] of int: w, int: min_index);
predicate bin_packing_sicstus(int: c, array [int] of var int: bin, array [int] of int: w);
predicate circuit_sicstus(array [int] of var int: x, set of int: y);
predicate cumulative(array [int] of var int: s, array [int] of var int: d, array [int] of var int: r, var int: b);
predicate diffn_sicstus(array [int] of var int: x, array [int] of var int: y, array [int] of var int: dx, array [int] of var int: dy);
predicate distribute_sicstus(array [int] of var int: card, array [int] of var int: representation, array [int] of var int: base);
predicate element_bool_sicstus(var int: i, array [int] of var bool: x, var bool: y, int: min_index);
predicate element_int_sicstus(var int: i, array [int] of var int: x, var int: y, int: min_index);
predicate global_cardinality_low_up_sicstus(array [int] of var int: x, array [int] of int: cover, array [int] of int: lbound, array [int] of int: ubound, int: closed);
predicate global_cardinality_sicstus(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts, int: closed);
predicate inverse_sicstus(array [int] of var int: f, array [int] of var int: invf, int: min_index_f, int: min_index_invf);
predicate lex2_bool_sicstus(array [int] of var bool: x, int: nrows, int: ncolumns, int: relop);
predicate lex2_int_sicstus(array [int] of var int: x, int: nrows, int: ncolumns, int: relop);
predicate lex_bool_sicstus(array [int] of var bool: x, array [int] of var bool: y, int: relop);
predicate lex_int_sicstus(array [int] of var int: x, array [int] of var int: y, int: relop);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate member_bool(array [int] of var bool: x, var bool: y);
predicate member_int(array [int] of var int: x, var int: y);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate nvalue(var int: n, array [int] of var int: x);
predicate pairwise_relation_bool_sicstus(array [int] of var bool: x, int: relop);
predicate pairwise_relation_int_sicstus(array [int] of var int: x, int: relop);
predicate regular_sicstus(array [int] of var int: x, int: Q, int: S, array [int] of int: d, int: q0, set of int: F);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate sum_pred_sicstus(var int: i, array [int] of set of int: sets, array [int] of int: cs, var int: s, int: min_index);
predicate table_bool_sicstus(array [int] of var bool: x, array [int] of bool: t);
predicate table_int_sicstus(array [int] of var int: x, array [int] of int: t);
predicate value_precede_chain_sicstus(array [int] of int: c, array [int] of var int: x);
predicate value_precede_sicstus(int: s, int: t, array [int] of var int: x);
array [1..7] of int: d = [250, 255, 260, 500, 500, 800, 1100];
var 204..408: INT____00002 :: is_defined_var :: var_is_introduced;
var 0..7344: INT____00003 :: is_defined_var :: var_is_introduced;
var 0..7344: INT____00004 :: is_defined_var :: var_is_introduced;
var 0..7344: INT____00005 :: is_defined_var :: var_is_introduced;
var 0..7344: INT____00006 :: is_defined_var :: var_is_introduced;
var 0..7344: INT____00007 :: is_defined_var :: var_is_introduced;
var 0..7344: INT____00008 :: is_defined_var :: var_is_introduced;
var 0..7344: INT____00009 :: is_defined_var :: var_is_introduced;
var 0..7344: INT____00010 :: is_defined_var :: var_is_introduced;
var 0..7344: INT____00011 :: is_defined_var :: var_is_introduced;
var 0..7344: INT____00012 :: is_defined_var :: var_is_introduced;
var 0..7344: INT____00013 :: is_defined_var :: var_is_introduced;
var 0..7344: INT____00014 :: is_defined_var :: var_is_introduced;
var 0..7344: INT____00015 :: is_defined_var :: var_is_introduced;
var 0..7344: INT____00016 :: is_defined_var :: var_is_introduced;
var 408..816: INT____00017 :: is_defined_var :: var_is_introduced;
var 408..816: Production :: output_var = INT____00017;
array [1..2] of var 1..816: R :: output_array([1..2]);
var 7..408: Surplus;
array [1..14] of var 0..9: p :: output_array([1..7, 1..2]);
constraint int_div(Production, 2, INT____00002) :: defines_var(INT____00002);
constraint int_le(INT____00002, R[2]);
constraint int_le(R[1], INT____00002);
constraint int_lin_eq([-1, 9], [Surplus, Production], 3665);
constraint int_lin_eq([1, 1, 1, 1, 1, 1, 1], [p[1], p[3], p[5], p[7], p[9], p[11], p[13]], 9);
constraint int_lin_eq([1, 1, 1, 1, 1, 1, 1], [p[2], p[4], p[6], p[8], p[10], p[12], p[14]], 9);
constraint int_lin_le([-1, -1], [INT____00003, INT____00005], -250);
constraint int_lin_le([-1, -1], [INT____00004, INT____00006], -255);
constraint int_lin_le([-1, -1], [INT____00007, INT____00008], -260);
constraint int_lin_le([-1, -1], [INT____00009, INT____00010], -500);
constraint int_lin_le([-1, -1], [INT____00011, INT____00012], -500);
constraint int_lin_le([-1, -1], [INT____00013, INT____00014], -800);
constraint int_lin_le([-1, -1], [INT____00015, INT____00016], -1100);
constraint int_lin_le([-1, 1, 1], [Surplus, INT____00003, INT____00005], 500);
constraint int_lin_le([-1, 1, 1], [Surplus, INT____00004, INT____00006], 510);
constraint int_lin_le([-1, 1, 1], [Surplus, INT____00007, INT____00008], 520);
constraint int_lin_le([-1, 1, 1], [Surplus, INT____00009, INT____00010], 1000);
constraint int_lin_le([-1, 1, 1], [Surplus, INT____00011, INT____00012], 1000);
constraint int_lin_le([-1, 1, 1], [Surplus, INT____00013, INT____00014], 1600);
constraint int_lin_le([-1, 1, 1], [Surplus, INT____00015, INT____00016], 2200);
constraint int_lin_le([1, -1, 1, -1], [INT____00003, INT____00004, INT____00005, INT____00006], -1);
constraint int_lin_le([1, 1, -1, -1], [INT____00004, INT____00006, INT____00007, INT____00008], -1);
constraint int_lin_le([1, 1, -1, -1], [INT____00007, INT____00008, INT____00009, INT____00010], -1);
constraint int_lin_le([1, 1, -1, -1], [INT____00011, INT____00012, INT____00013, INT____00014], -1);
constraint int_lin_le([1, 1, -1, -1], [INT____00013, INT____00014, INT____00015, INT____00016], -1);
constraint int_lin_le([-1, 1, 1, 1, 1], [Surplus, INT____00003, INT____00004, INT____00005, INT____00006], 1010);
constraint int_lin_le([-1, 1, 1, 1, 1, 1, 1], [Surplus, INT____00003, INT____00004, INT____00005, INT____00006, INT____00007, INT____00008], 1530);
constraint int_lin_le([-1, 1, 1, 1, 1, 1, 1, 1, 1], [Surplus, INT____00003, INT____00004, INT____00005, INT____00006, INT____00007, INT____00008, INT____00009, INT____00010], 2530);
constraint int_lin_le([-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [Surplus, INT____00003, INT____00004, INT____00005, INT____00006, INT____00007, INT____00008, INT____00009, INT____00010, INT____00011, INT____00012], 3530);
constraint int_lin_le([-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [Surplus, INT____00003, INT____00004, INT____00005, INT____00006, INT____00007, INT____00008, INT____00009, INT____00010, INT____00011, INT____00012, INT____00013, INT____00014], 5130);
constraint int_plus(R[1], R[2], INT____00017) :: defines_var(INT____00017);
constraint int_times(p[1], R[1], INT____00003) :: defines_var(INT____00003);
constraint int_times(p[2], R[2], INT____00005) :: defines_var(INT____00005);
constraint int_times(p[3], R[1], INT____00004) :: defines_var(INT____00004);
constraint int_times(p[4], R[2], INT____00006) :: defines_var(INT____00006);
constraint int_times(p[5], R[1], INT____00007) :: defines_var(INT____00007);
constraint int_times(p[6], R[2], INT____00008) :: defines_var(INT____00008);
constraint int_times(p[7], R[1], INT____00009) :: defines_var(INT____00009);
constraint int_times(p[8], R[2], INT____00010) :: defines_var(INT____00010);
constraint int_times(p[9], R[1], INT____00011) :: defines_var(INT____00011);
constraint int_times(p[10], R[2], INT____00012) :: defines_var(INT____00012);
constraint int_times(p[11], R[1], INT____00013) :: defines_var(INT____00013);
constraint int_times(p[12], R[2], INT____00014) :: defines_var(INT____00014);
constraint int_times(p[13], R[1], INT____00015) :: defines_var(INT____00015);
constraint int_times(p[14], R[2], INT____00016) :: defines_var(INT____00016);
constraint lex_int_sicstus([p[7], p[8]], [p[9], p[10]], -1);
solve  :: int_search([p[1], p[2], p[3], p[4], p[5], p[6], p[7], p[8], p[9], p[10], p[11], p[12], p[13], p[14], R[1], R[2]], input_order, indomain_min, complete) minimize INT____00017;
