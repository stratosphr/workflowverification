predicate all_different_int(array [int] of var int: x);
predicate all_equal_int(array [int] of var int: x);
predicate among_sicstus(var int: n, array [int] of var int: x, set of int: v);
predicate at_least_int(int: n, array [int] of var int: x, int: v);
predicate at_most_int(int: n, array [int] of var int: x, int: v);
predicate bin_packing_capa_sicstus(array [int] of int: c, array [int] of var int: bin, array [int] of int: w, int: min_index);
predicate bin_packing_load_sicstus(array [int] of var int: l, array [int] of var int: bin, array [int] of int: w, int: min_index);
predicate bin_packing_sicstus(int: c, array [int] of var int: bin, array [int] of int: w);
predicate count_sicstus(array [int] of var int: x, var int: y, var int: c);
predicate cumulative(array [int] of var int: s, array [int] of var int: d, array [int] of var int: r, var int: b);
predicate diffn_sicstus(array [int] of var int: x, array [int] of var int: y, array [int] of var int: dx, array [int] of var int: dy);
predicate distribute_sicstus(array [int] of var int: card, array [int] of var int: representation, array [int] of var int: base);
predicate element_bool_sicstus(var int: i, array [int] of var bool: x, var bool: y, int: min_index);
predicate element_int_sicstus(var int: i, array [int] of var int: x, var int: y, int: min_index);
predicate exactly_int(int: n, array [int] of var int: x, int: v);
predicate global_cardinality_low_up_sicstus(array [int] of var int: x, array [int] of int: cover, array [int] of int: lbound, array [int] of int: ubound, int: closed);
predicate global_cardinality_sicstus(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts, int: closed);
predicate inverse_sicstus(array [int] of var int: f, array [int] of var int: invf, int: min_index_f, int: min_index_invf);
predicate lex2_sicstus(array [int] of var int: x, int: nrows, int: ncolumns, int: relop);
predicate lex_sicstus(array [int] of var int: x, array [int] of var int: y, int: relop);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate member_bool(array [int] of var bool: x, var bool: y);
predicate member_int(array [int] of var int: x, var int: y);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate nvalue(var int: n, array [int] of var int: x);
predicate pairwise_relation_bool_sicstus(array [int] of var bool: x, int: relop);
predicate pairwise_relation_int_sicstus(array [int] of var int: x, int: relop);
predicate regular_sicstus(array [int] of var int: x, int: Q, int: S, array [int] of int: d, int: q0, set of int: F);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate sum_pred_sicstus(var int: i, array [int] of set of int: sets, array [int] of int: cs, var int: s, int: min_index);
predicate table_bool_sicstus(array [int] of var bool: x, array [int] of bool: t);
predicate table_int_sicstus(array [int] of var int: x, array [int] of int: t);
predicate value_precede_chain_sicstus(array [int] of int: c, array [int] of var int: x);
predicate value_precede_sicstus(int: s, int: t, array [int] of var int: x);
var 0..15: INT____00001 :: is_defined_var :: var_is_introduced;
var 0..16: INT____00002 :: is_defined_var :: var_is_introduced;
var 0..16: INT____00003 :: is_defined_var :: var_is_introduced;
var 0..16: INT____00004 :: is_defined_var :: var_is_introduced;
var 0..16: INT____00005 :: is_defined_var :: var_is_introduced;
var 1..16: INT____00006 :: is_defined_var :: var_is_introduced;
array [1..6] of var 0..16: differences = [INT____00001, INT____00002, INT____00003, INT____00004, INT____00005, INT____00006];
array [1..4] of var 0..16: mark :: output_array([1..4]);
constraint all_different_int(differences);
constraint int_eq(mark[1], 0);
constraint int_lin_eq([-1, -1, 1], [INT____00001, mark[1], mark[2]], 0) :: defines_var(INT____00001);
constraint int_lin_eq([-1, -1, 1], [INT____00002, mark[1], mark[3]], 0) :: defines_var(INT____00002);
constraint int_lin_eq([-1, -1, 1], [INT____00003, mark[1], mark[4]], 0) :: defines_var(INT____00003);
constraint int_lin_eq([-1, -1, 1], [INT____00004, mark[2], mark[3]], 0) :: defines_var(INT____00004);
constraint int_lin_eq([-1, -1, 1], [INT____00005, mark[2], mark[4]], 0) :: defines_var(INT____00005);
constraint int_lin_eq([-1, -1, 1], [INT____00006, mark[3], mark[4]], 0) :: defines_var(INT____00006);
constraint int_lt(INT____00001, INT____00006);
constraint int_lt(mark[1], mark[2]);
constraint int_lt(mark[2], mark[3]);
constraint int_lt(mark[3], mark[4]);
solve  :: int_search(mark, input_order, indomain, complete) minimize mark[4];
